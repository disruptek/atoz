
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_599368 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_599368](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_599368): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_599977 = ref object of OpenApiRestCall_599368
proc url_PostAttachInstances_599979(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachInstances_599978(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_599980 = query.getOrDefault("Action")
  valid_599980 = validateParameter(valid_599980, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_599980 != nil:
    section.add "Action", valid_599980
  var valid_599981 = query.getOrDefault("Version")
  valid_599981 = validateParameter(valid_599981, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_599981 != nil:
    section.add "Version", valid_599981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_599982 = header.getOrDefault("X-Amz-Date")
  valid_599982 = validateParameter(valid_599982, JString, required = false,
                                 default = nil)
  if valid_599982 != nil:
    section.add "X-Amz-Date", valid_599982
  var valid_599983 = header.getOrDefault("X-Amz-Security-Token")
  valid_599983 = validateParameter(valid_599983, JString, required = false,
                                 default = nil)
  if valid_599983 != nil:
    section.add "X-Amz-Security-Token", valid_599983
  var valid_599984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_599984 = validateParameter(valid_599984, JString, required = false,
                                 default = nil)
  if valid_599984 != nil:
    section.add "X-Amz-Content-Sha256", valid_599984
  var valid_599985 = header.getOrDefault("X-Amz-Algorithm")
  valid_599985 = validateParameter(valid_599985, JString, required = false,
                                 default = nil)
  if valid_599985 != nil:
    section.add "X-Amz-Algorithm", valid_599985
  var valid_599986 = header.getOrDefault("X-Amz-Signature")
  valid_599986 = validateParameter(valid_599986, JString, required = false,
                                 default = nil)
  if valid_599986 != nil:
    section.add "X-Amz-Signature", valid_599986
  var valid_599987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_599987 = validateParameter(valid_599987, JString, required = false,
                                 default = nil)
  if valid_599987 != nil:
    section.add "X-Amz-SignedHeaders", valid_599987
  var valid_599988 = header.getOrDefault("X-Amz-Credential")
  valid_599988 = validateParameter(valid_599988, JString, required = false,
                                 default = nil)
  if valid_599988 != nil:
    section.add "X-Amz-Credential", valid_599988
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_599989 = formData.getOrDefault("AutoScalingGroupName")
  valid_599989 = validateParameter(valid_599989, JString, required = true,
                                 default = nil)
  if valid_599989 != nil:
    section.add "AutoScalingGroupName", valid_599989
  var valid_599990 = formData.getOrDefault("InstanceIds")
  valid_599990 = validateParameter(valid_599990, JArray, required = false,
                                 default = nil)
  if valid_599990 != nil:
    section.add "InstanceIds", valid_599990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_599991: Call_PostAttachInstances_599977; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_599991.validator(path, query, header, formData, body)
  let scheme = call_599991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_599991.url(scheme.get, call_599991.host, call_599991.base,
                         call_599991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_599991, url, valid)

proc call*(call_599992: Call_PostAttachInstances_599977;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_599993 = newJObject()
  var formData_599994 = newJObject()
  add(formData_599994, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_599994.add "InstanceIds", InstanceIds
  add(query_599993, "Action", newJString(Action))
  add(query_599993, "Version", newJString(Version))
  result = call_599992.call(nil, query_599993, nil, formData_599994, nil)

var postAttachInstances* = Call_PostAttachInstances_599977(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_599978, base: "/",
    url: url_PostAttachInstances_599979, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_599705 = ref object of OpenApiRestCall_599368
proc url_GetAttachInstances_599707(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachInstances_599706(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_599819 = query.getOrDefault("AutoScalingGroupName")
  valid_599819 = validateParameter(valid_599819, JString, required = true,
                                 default = nil)
  if valid_599819 != nil:
    section.add "AutoScalingGroupName", valid_599819
  var valid_599833 = query.getOrDefault("Action")
  valid_599833 = validateParameter(valid_599833, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_599833 != nil:
    section.add "Action", valid_599833
  var valid_599834 = query.getOrDefault("InstanceIds")
  valid_599834 = validateParameter(valid_599834, JArray, required = false,
                                 default = nil)
  if valid_599834 != nil:
    section.add "InstanceIds", valid_599834
  var valid_599835 = query.getOrDefault("Version")
  valid_599835 = validateParameter(valid_599835, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_599835 != nil:
    section.add "Version", valid_599835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_599836 = header.getOrDefault("X-Amz-Date")
  valid_599836 = validateParameter(valid_599836, JString, required = false,
                                 default = nil)
  if valid_599836 != nil:
    section.add "X-Amz-Date", valid_599836
  var valid_599837 = header.getOrDefault("X-Amz-Security-Token")
  valid_599837 = validateParameter(valid_599837, JString, required = false,
                                 default = nil)
  if valid_599837 != nil:
    section.add "X-Amz-Security-Token", valid_599837
  var valid_599838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_599838 = validateParameter(valid_599838, JString, required = false,
                                 default = nil)
  if valid_599838 != nil:
    section.add "X-Amz-Content-Sha256", valid_599838
  var valid_599839 = header.getOrDefault("X-Amz-Algorithm")
  valid_599839 = validateParameter(valid_599839, JString, required = false,
                                 default = nil)
  if valid_599839 != nil:
    section.add "X-Amz-Algorithm", valid_599839
  var valid_599840 = header.getOrDefault("X-Amz-Signature")
  valid_599840 = validateParameter(valid_599840, JString, required = false,
                                 default = nil)
  if valid_599840 != nil:
    section.add "X-Amz-Signature", valid_599840
  var valid_599841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_599841 = validateParameter(valid_599841, JString, required = false,
                                 default = nil)
  if valid_599841 != nil:
    section.add "X-Amz-SignedHeaders", valid_599841
  var valid_599842 = header.getOrDefault("X-Amz-Credential")
  valid_599842 = validateParameter(valid_599842, JString, required = false,
                                 default = nil)
  if valid_599842 != nil:
    section.add "X-Amz-Credential", valid_599842
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_599865: Call_GetAttachInstances_599705; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_599865.validator(path, query, header, formData, body)
  let scheme = call_599865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_599865.url(scheme.get, call_599865.host, call_599865.base,
                         call_599865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_599865, url, valid)

proc call*(call_599936: Call_GetAttachInstances_599705;
          AutoScalingGroupName: string; Action: string = "AttachInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_599937 = newJObject()
  add(query_599937, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_599937, "Action", newJString(Action))
  if InstanceIds != nil:
    query_599937.add "InstanceIds", InstanceIds
  add(query_599937, "Version", newJString(Version))
  result = call_599936.call(nil, query_599937, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_599705(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_599706, base: "/",
    url: url_GetAttachInstances_599707, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_600012 = ref object of OpenApiRestCall_599368
proc url_PostAttachLoadBalancerTargetGroups_600014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_600013(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600015 = query.getOrDefault("Action")
  valid_600015 = validateParameter(valid_600015, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_600015 != nil:
    section.add "Action", valid_600015
  var valid_600016 = query.getOrDefault("Version")
  valid_600016 = validateParameter(valid_600016, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600016 != nil:
    section.add "Version", valid_600016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600017 = header.getOrDefault("X-Amz-Date")
  valid_600017 = validateParameter(valid_600017, JString, required = false,
                                 default = nil)
  if valid_600017 != nil:
    section.add "X-Amz-Date", valid_600017
  var valid_600018 = header.getOrDefault("X-Amz-Security-Token")
  valid_600018 = validateParameter(valid_600018, JString, required = false,
                                 default = nil)
  if valid_600018 != nil:
    section.add "X-Amz-Security-Token", valid_600018
  var valid_600019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600019 = validateParameter(valid_600019, JString, required = false,
                                 default = nil)
  if valid_600019 != nil:
    section.add "X-Amz-Content-Sha256", valid_600019
  var valid_600020 = header.getOrDefault("X-Amz-Algorithm")
  valid_600020 = validateParameter(valid_600020, JString, required = false,
                                 default = nil)
  if valid_600020 != nil:
    section.add "X-Amz-Algorithm", valid_600020
  var valid_600021 = header.getOrDefault("X-Amz-Signature")
  valid_600021 = validateParameter(valid_600021, JString, required = false,
                                 default = nil)
  if valid_600021 != nil:
    section.add "X-Amz-Signature", valid_600021
  var valid_600022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600022 = validateParameter(valid_600022, JString, required = false,
                                 default = nil)
  if valid_600022 != nil:
    section.add "X-Amz-SignedHeaders", valid_600022
  var valid_600023 = header.getOrDefault("X-Amz-Credential")
  valid_600023 = validateParameter(valid_600023, JString, required = false,
                                 default = nil)
  if valid_600023 != nil:
    section.add "X-Amz-Credential", valid_600023
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600024 = formData.getOrDefault("AutoScalingGroupName")
  valid_600024 = validateParameter(valid_600024, JString, required = true,
                                 default = nil)
  if valid_600024 != nil:
    section.add "AutoScalingGroupName", valid_600024
  var valid_600025 = formData.getOrDefault("TargetGroupARNs")
  valid_600025 = validateParameter(valid_600025, JArray, required = true, default = nil)
  if valid_600025 != nil:
    section.add "TargetGroupARNs", valid_600025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600026: Call_PostAttachLoadBalancerTargetGroups_600012;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600026.validator(path, query, header, formData, body)
  let scheme = call_600026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600026.url(scheme.get, call_600026.host, call_600026.base,
                         call_600026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600026, url, valid)

proc call*(call_600027: Call_PostAttachLoadBalancerTargetGroups_600012;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600028 = newJObject()
  var formData_600029 = newJObject()
  add(formData_600029, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_600029.add "TargetGroupARNs", TargetGroupARNs
  add(query_600028, "Action", newJString(Action))
  add(query_600028, "Version", newJString(Version))
  result = call_600027.call(nil, query_600028, nil, formData_600029, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_600012(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_600013, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_600014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_599995 = ref object of OpenApiRestCall_599368
proc url_GetAttachLoadBalancerTargetGroups_599997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_599996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_599998 = query.getOrDefault("AutoScalingGroupName")
  valid_599998 = validateParameter(valid_599998, JString, required = true,
                                 default = nil)
  if valid_599998 != nil:
    section.add "AutoScalingGroupName", valid_599998
  var valid_599999 = query.getOrDefault("Action")
  valid_599999 = validateParameter(valid_599999, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_599999 != nil:
    section.add "Action", valid_599999
  var valid_600000 = query.getOrDefault("TargetGroupARNs")
  valid_600000 = validateParameter(valid_600000, JArray, required = true, default = nil)
  if valid_600000 != nil:
    section.add "TargetGroupARNs", valid_600000
  var valid_600001 = query.getOrDefault("Version")
  valid_600001 = validateParameter(valid_600001, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600001 != nil:
    section.add "Version", valid_600001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600002 = header.getOrDefault("X-Amz-Date")
  valid_600002 = validateParameter(valid_600002, JString, required = false,
                                 default = nil)
  if valid_600002 != nil:
    section.add "X-Amz-Date", valid_600002
  var valid_600003 = header.getOrDefault("X-Amz-Security-Token")
  valid_600003 = validateParameter(valid_600003, JString, required = false,
                                 default = nil)
  if valid_600003 != nil:
    section.add "X-Amz-Security-Token", valid_600003
  var valid_600004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600004 = validateParameter(valid_600004, JString, required = false,
                                 default = nil)
  if valid_600004 != nil:
    section.add "X-Amz-Content-Sha256", valid_600004
  var valid_600005 = header.getOrDefault("X-Amz-Algorithm")
  valid_600005 = validateParameter(valid_600005, JString, required = false,
                                 default = nil)
  if valid_600005 != nil:
    section.add "X-Amz-Algorithm", valid_600005
  var valid_600006 = header.getOrDefault("X-Amz-Signature")
  valid_600006 = validateParameter(valid_600006, JString, required = false,
                                 default = nil)
  if valid_600006 != nil:
    section.add "X-Amz-Signature", valid_600006
  var valid_600007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600007 = validateParameter(valid_600007, JString, required = false,
                                 default = nil)
  if valid_600007 != nil:
    section.add "X-Amz-SignedHeaders", valid_600007
  var valid_600008 = header.getOrDefault("X-Amz-Credential")
  valid_600008 = validateParameter(valid_600008, JString, required = false,
                                 default = nil)
  if valid_600008 != nil:
    section.add "X-Amz-Credential", valid_600008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600009: Call_GetAttachLoadBalancerTargetGroups_599995;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600009.validator(path, query, header, formData, body)
  let scheme = call_600009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600009.url(scheme.get, call_600009.host, call_600009.base,
                         call_600009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600009, url, valid)

proc call*(call_600010: Call_GetAttachLoadBalancerTargetGroups_599995;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_600011 = newJObject()
  add(query_600011, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600011, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_600011.add "TargetGroupARNs", TargetGroupARNs
  add(query_600011, "Version", newJString(Version))
  result = call_600010.call(nil, query_600011, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_599995(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_599996, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_599997,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_600047 = ref object of OpenApiRestCall_599368
proc url_PostAttachLoadBalancers_600049(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancers_600048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600050 = query.getOrDefault("Action")
  valid_600050 = validateParameter(valid_600050, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_600050 != nil:
    section.add "Action", valid_600050
  var valid_600051 = query.getOrDefault("Version")
  valid_600051 = validateParameter(valid_600051, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600051 != nil:
    section.add "Version", valid_600051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600052 = header.getOrDefault("X-Amz-Date")
  valid_600052 = validateParameter(valid_600052, JString, required = false,
                                 default = nil)
  if valid_600052 != nil:
    section.add "X-Amz-Date", valid_600052
  var valid_600053 = header.getOrDefault("X-Amz-Security-Token")
  valid_600053 = validateParameter(valid_600053, JString, required = false,
                                 default = nil)
  if valid_600053 != nil:
    section.add "X-Amz-Security-Token", valid_600053
  var valid_600054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600054 = validateParameter(valid_600054, JString, required = false,
                                 default = nil)
  if valid_600054 != nil:
    section.add "X-Amz-Content-Sha256", valid_600054
  var valid_600055 = header.getOrDefault("X-Amz-Algorithm")
  valid_600055 = validateParameter(valid_600055, JString, required = false,
                                 default = nil)
  if valid_600055 != nil:
    section.add "X-Amz-Algorithm", valid_600055
  var valid_600056 = header.getOrDefault("X-Amz-Signature")
  valid_600056 = validateParameter(valid_600056, JString, required = false,
                                 default = nil)
  if valid_600056 != nil:
    section.add "X-Amz-Signature", valid_600056
  var valid_600057 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600057 = validateParameter(valid_600057, JString, required = false,
                                 default = nil)
  if valid_600057 != nil:
    section.add "X-Amz-SignedHeaders", valid_600057
  var valid_600058 = header.getOrDefault("X-Amz-Credential")
  valid_600058 = validateParameter(valid_600058, JString, required = false,
                                 default = nil)
  if valid_600058 != nil:
    section.add "X-Amz-Credential", valid_600058
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600059 = formData.getOrDefault("AutoScalingGroupName")
  valid_600059 = validateParameter(valid_600059, JString, required = true,
                                 default = nil)
  if valid_600059 != nil:
    section.add "AutoScalingGroupName", valid_600059
  var valid_600060 = formData.getOrDefault("LoadBalancerNames")
  valid_600060 = validateParameter(valid_600060, JArray, required = true, default = nil)
  if valid_600060 != nil:
    section.add "LoadBalancerNames", valid_600060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600061: Call_PostAttachLoadBalancers_600047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600061.validator(path, query, header, formData, body)
  let scheme = call_600061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600061.url(scheme.get, call_600061.host, call_600061.base,
                         call_600061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600061, url, valid)

proc call*(call_600062: Call_PostAttachLoadBalancers_600047;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_600063 = newJObject()
  var formData_600064 = newJObject()
  add(formData_600064, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600063, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_600064.add "LoadBalancerNames", LoadBalancerNames
  add(query_600063, "Version", newJString(Version))
  result = call_600062.call(nil, query_600063, nil, formData_600064, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_600047(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_600048, base: "/",
    url: url_PostAttachLoadBalancers_600049, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_600030 = ref object of OpenApiRestCall_599368
proc url_GetAttachLoadBalancers_600032(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancers_600031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600033 = query.getOrDefault("AutoScalingGroupName")
  valid_600033 = validateParameter(valid_600033, JString, required = true,
                                 default = nil)
  if valid_600033 != nil:
    section.add "AutoScalingGroupName", valid_600033
  var valid_600034 = query.getOrDefault("Action")
  valid_600034 = validateParameter(valid_600034, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_600034 != nil:
    section.add "Action", valid_600034
  var valid_600035 = query.getOrDefault("LoadBalancerNames")
  valid_600035 = validateParameter(valid_600035, JArray, required = true, default = nil)
  if valid_600035 != nil:
    section.add "LoadBalancerNames", valid_600035
  var valid_600036 = query.getOrDefault("Version")
  valid_600036 = validateParameter(valid_600036, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600036 != nil:
    section.add "Version", valid_600036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600037 = header.getOrDefault("X-Amz-Date")
  valid_600037 = validateParameter(valid_600037, JString, required = false,
                                 default = nil)
  if valid_600037 != nil:
    section.add "X-Amz-Date", valid_600037
  var valid_600038 = header.getOrDefault("X-Amz-Security-Token")
  valid_600038 = validateParameter(valid_600038, JString, required = false,
                                 default = nil)
  if valid_600038 != nil:
    section.add "X-Amz-Security-Token", valid_600038
  var valid_600039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600039 = validateParameter(valid_600039, JString, required = false,
                                 default = nil)
  if valid_600039 != nil:
    section.add "X-Amz-Content-Sha256", valid_600039
  var valid_600040 = header.getOrDefault("X-Amz-Algorithm")
  valid_600040 = validateParameter(valid_600040, JString, required = false,
                                 default = nil)
  if valid_600040 != nil:
    section.add "X-Amz-Algorithm", valid_600040
  var valid_600041 = header.getOrDefault("X-Amz-Signature")
  valid_600041 = validateParameter(valid_600041, JString, required = false,
                                 default = nil)
  if valid_600041 != nil:
    section.add "X-Amz-Signature", valid_600041
  var valid_600042 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600042 = validateParameter(valid_600042, JString, required = false,
                                 default = nil)
  if valid_600042 != nil:
    section.add "X-Amz-SignedHeaders", valid_600042
  var valid_600043 = header.getOrDefault("X-Amz-Credential")
  valid_600043 = validateParameter(valid_600043, JString, required = false,
                                 default = nil)
  if valid_600043 != nil:
    section.add "X-Amz-Credential", valid_600043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600044: Call_GetAttachLoadBalancers_600030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600044.validator(path, query, header, formData, body)
  let scheme = call_600044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600044.url(scheme.get, call_600044.host, call_600044.base,
                         call_600044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600044, url, valid)

proc call*(call_600045: Call_GetAttachLoadBalancers_600030;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_600046 = newJObject()
  add(query_600046, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600046, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_600046.add "LoadBalancerNames", LoadBalancerNames
  add(query_600046, "Version", newJString(Version))
  result = call_600045.call(nil, query_600046, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_600030(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_600031, base: "/",
    url: url_GetAttachLoadBalancers_600032, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_600082 = ref object of OpenApiRestCall_599368
proc url_PostBatchDeleteScheduledAction_600084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchDeleteScheduledAction_600083(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600085 = query.getOrDefault("Action")
  valid_600085 = validateParameter(valid_600085, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_600085 != nil:
    section.add "Action", valid_600085
  var valid_600086 = query.getOrDefault("Version")
  valid_600086 = validateParameter(valid_600086, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600086 != nil:
    section.add "Version", valid_600086
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600087 = header.getOrDefault("X-Amz-Date")
  valid_600087 = validateParameter(valid_600087, JString, required = false,
                                 default = nil)
  if valid_600087 != nil:
    section.add "X-Amz-Date", valid_600087
  var valid_600088 = header.getOrDefault("X-Amz-Security-Token")
  valid_600088 = validateParameter(valid_600088, JString, required = false,
                                 default = nil)
  if valid_600088 != nil:
    section.add "X-Amz-Security-Token", valid_600088
  var valid_600089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600089 = validateParameter(valid_600089, JString, required = false,
                                 default = nil)
  if valid_600089 != nil:
    section.add "X-Amz-Content-Sha256", valid_600089
  var valid_600090 = header.getOrDefault("X-Amz-Algorithm")
  valid_600090 = validateParameter(valid_600090, JString, required = false,
                                 default = nil)
  if valid_600090 != nil:
    section.add "X-Amz-Algorithm", valid_600090
  var valid_600091 = header.getOrDefault("X-Amz-Signature")
  valid_600091 = validateParameter(valid_600091, JString, required = false,
                                 default = nil)
  if valid_600091 != nil:
    section.add "X-Amz-Signature", valid_600091
  var valid_600092 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600092 = validateParameter(valid_600092, JString, required = false,
                                 default = nil)
  if valid_600092 != nil:
    section.add "X-Amz-SignedHeaders", valid_600092
  var valid_600093 = header.getOrDefault("X-Amz-Credential")
  valid_600093 = validateParameter(valid_600093, JString, required = false,
                                 default = nil)
  if valid_600093 != nil:
    section.add "X-Amz-Credential", valid_600093
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600094 = formData.getOrDefault("AutoScalingGroupName")
  valid_600094 = validateParameter(valid_600094, JString, required = true,
                                 default = nil)
  if valid_600094 != nil:
    section.add "AutoScalingGroupName", valid_600094
  var valid_600095 = formData.getOrDefault("ScheduledActionNames")
  valid_600095 = validateParameter(valid_600095, JArray, required = true, default = nil)
  if valid_600095 != nil:
    section.add "ScheduledActionNames", valid_600095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600096: Call_PostBatchDeleteScheduledAction_600082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_600096.validator(path, query, header, formData, body)
  let scheme = call_600096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600096.url(scheme.get, call_600096.host, call_600096.base,
                         call_600096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600096, url, valid)

proc call*(call_600097: Call_PostBatchDeleteScheduledAction_600082;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_600098 = newJObject()
  var formData_600099 = newJObject()
  add(formData_600099, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600098, "Action", newJString(Action))
  add(query_600098, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_600099.add "ScheduledActionNames", ScheduledActionNames
  result = call_600097.call(nil, query_600098, nil, formData_600099, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_600082(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_600083, base: "/",
    url: url_PostBatchDeleteScheduledAction_600084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_600065 = ref object of OpenApiRestCall_599368
proc url_GetBatchDeleteScheduledAction_600067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchDeleteScheduledAction_600066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600068 = query.getOrDefault("AutoScalingGroupName")
  valid_600068 = validateParameter(valid_600068, JString, required = true,
                                 default = nil)
  if valid_600068 != nil:
    section.add "AutoScalingGroupName", valid_600068
  var valid_600069 = query.getOrDefault("Action")
  valid_600069 = validateParameter(valid_600069, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_600069 != nil:
    section.add "Action", valid_600069
  var valid_600070 = query.getOrDefault("ScheduledActionNames")
  valid_600070 = validateParameter(valid_600070, JArray, required = true, default = nil)
  if valid_600070 != nil:
    section.add "ScheduledActionNames", valid_600070
  var valid_600071 = query.getOrDefault("Version")
  valid_600071 = validateParameter(valid_600071, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600071 != nil:
    section.add "Version", valid_600071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600072 = header.getOrDefault("X-Amz-Date")
  valid_600072 = validateParameter(valid_600072, JString, required = false,
                                 default = nil)
  if valid_600072 != nil:
    section.add "X-Amz-Date", valid_600072
  var valid_600073 = header.getOrDefault("X-Amz-Security-Token")
  valid_600073 = validateParameter(valid_600073, JString, required = false,
                                 default = nil)
  if valid_600073 != nil:
    section.add "X-Amz-Security-Token", valid_600073
  var valid_600074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600074 = validateParameter(valid_600074, JString, required = false,
                                 default = nil)
  if valid_600074 != nil:
    section.add "X-Amz-Content-Sha256", valid_600074
  var valid_600075 = header.getOrDefault("X-Amz-Algorithm")
  valid_600075 = validateParameter(valid_600075, JString, required = false,
                                 default = nil)
  if valid_600075 != nil:
    section.add "X-Amz-Algorithm", valid_600075
  var valid_600076 = header.getOrDefault("X-Amz-Signature")
  valid_600076 = validateParameter(valid_600076, JString, required = false,
                                 default = nil)
  if valid_600076 != nil:
    section.add "X-Amz-Signature", valid_600076
  var valid_600077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600077 = validateParameter(valid_600077, JString, required = false,
                                 default = nil)
  if valid_600077 != nil:
    section.add "X-Amz-SignedHeaders", valid_600077
  var valid_600078 = header.getOrDefault("X-Amz-Credential")
  valid_600078 = validateParameter(valid_600078, JString, required = false,
                                 default = nil)
  if valid_600078 != nil:
    section.add "X-Amz-Credential", valid_600078
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600079: Call_GetBatchDeleteScheduledAction_600065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_600079.validator(path, query, header, formData, body)
  let scheme = call_600079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600079.url(scheme.get, call_600079.host, call_600079.base,
                         call_600079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600079, url, valid)

proc call*(call_600080: Call_GetBatchDeleteScheduledAction_600065;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_600081 = newJObject()
  add(query_600081, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600081, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_600081.add "ScheduledActionNames", ScheduledActionNames
  add(query_600081, "Version", newJString(Version))
  result = call_600080.call(nil, query_600081, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_600065(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_600066, base: "/",
    url: url_GetBatchDeleteScheduledAction_600067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_600117 = ref object of OpenApiRestCall_599368
proc url_PostBatchPutScheduledUpdateGroupAction_600119(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_600118(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600120 = query.getOrDefault("Action")
  valid_600120 = validateParameter(valid_600120, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_600120 != nil:
    section.add "Action", valid_600120
  var valid_600121 = query.getOrDefault("Version")
  valid_600121 = validateParameter(valid_600121, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600121 != nil:
    section.add "Version", valid_600121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600122 = header.getOrDefault("X-Amz-Date")
  valid_600122 = validateParameter(valid_600122, JString, required = false,
                                 default = nil)
  if valid_600122 != nil:
    section.add "X-Amz-Date", valid_600122
  var valid_600123 = header.getOrDefault("X-Amz-Security-Token")
  valid_600123 = validateParameter(valid_600123, JString, required = false,
                                 default = nil)
  if valid_600123 != nil:
    section.add "X-Amz-Security-Token", valid_600123
  var valid_600124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600124 = validateParameter(valid_600124, JString, required = false,
                                 default = nil)
  if valid_600124 != nil:
    section.add "X-Amz-Content-Sha256", valid_600124
  var valid_600125 = header.getOrDefault("X-Amz-Algorithm")
  valid_600125 = validateParameter(valid_600125, JString, required = false,
                                 default = nil)
  if valid_600125 != nil:
    section.add "X-Amz-Algorithm", valid_600125
  var valid_600126 = header.getOrDefault("X-Amz-Signature")
  valid_600126 = validateParameter(valid_600126, JString, required = false,
                                 default = nil)
  if valid_600126 != nil:
    section.add "X-Amz-Signature", valid_600126
  var valid_600127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600127 = validateParameter(valid_600127, JString, required = false,
                                 default = nil)
  if valid_600127 != nil:
    section.add "X-Amz-SignedHeaders", valid_600127
  var valid_600128 = header.getOrDefault("X-Amz-Credential")
  valid_600128 = validateParameter(valid_600128, JString, required = false,
                                 default = nil)
  if valid_600128 != nil:
    section.add "X-Amz-Credential", valid_600128
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600129 = formData.getOrDefault("AutoScalingGroupName")
  valid_600129 = validateParameter(valid_600129, JString, required = true,
                                 default = nil)
  if valid_600129 != nil:
    section.add "AutoScalingGroupName", valid_600129
  var valid_600130 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_600130 = validateParameter(valid_600130, JArray, required = true, default = nil)
  if valid_600130 != nil:
    section.add "ScheduledUpdateGroupActions", valid_600130
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600131: Call_PostBatchPutScheduledUpdateGroupAction_600117;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_600131.validator(path, query, header, formData, body)
  let scheme = call_600131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600131.url(scheme.get, call_600131.host, call_600131.base,
                         call_600131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600131, url, valid)

proc call*(call_600132: Call_PostBatchPutScheduledUpdateGroupAction_600117;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600133 = newJObject()
  var formData_600134 = newJObject()
  add(formData_600134, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScheduledUpdateGroupActions != nil:
    formData_600134.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_600133, "Action", newJString(Action))
  add(query_600133, "Version", newJString(Version))
  result = call_600132.call(nil, query_600133, nil, formData_600134, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_600117(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_600118, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_600119,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_600100 = ref object of OpenApiRestCall_599368
proc url_GetBatchPutScheduledUpdateGroupAction_600102(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_600101(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600103 = query.getOrDefault("AutoScalingGroupName")
  valid_600103 = validateParameter(valid_600103, JString, required = true,
                                 default = nil)
  if valid_600103 != nil:
    section.add "AutoScalingGroupName", valid_600103
  var valid_600104 = query.getOrDefault("Action")
  valid_600104 = validateParameter(valid_600104, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_600104 != nil:
    section.add "Action", valid_600104
  var valid_600105 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_600105 = validateParameter(valid_600105, JArray, required = true, default = nil)
  if valid_600105 != nil:
    section.add "ScheduledUpdateGroupActions", valid_600105
  var valid_600106 = query.getOrDefault("Version")
  valid_600106 = validateParameter(valid_600106, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600106 != nil:
    section.add "Version", valid_600106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600107 = header.getOrDefault("X-Amz-Date")
  valid_600107 = validateParameter(valid_600107, JString, required = false,
                                 default = nil)
  if valid_600107 != nil:
    section.add "X-Amz-Date", valid_600107
  var valid_600108 = header.getOrDefault("X-Amz-Security-Token")
  valid_600108 = validateParameter(valid_600108, JString, required = false,
                                 default = nil)
  if valid_600108 != nil:
    section.add "X-Amz-Security-Token", valid_600108
  var valid_600109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600109 = validateParameter(valid_600109, JString, required = false,
                                 default = nil)
  if valid_600109 != nil:
    section.add "X-Amz-Content-Sha256", valid_600109
  var valid_600110 = header.getOrDefault("X-Amz-Algorithm")
  valid_600110 = validateParameter(valid_600110, JString, required = false,
                                 default = nil)
  if valid_600110 != nil:
    section.add "X-Amz-Algorithm", valid_600110
  var valid_600111 = header.getOrDefault("X-Amz-Signature")
  valid_600111 = validateParameter(valid_600111, JString, required = false,
                                 default = nil)
  if valid_600111 != nil:
    section.add "X-Amz-Signature", valid_600111
  var valid_600112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600112 = validateParameter(valid_600112, JString, required = false,
                                 default = nil)
  if valid_600112 != nil:
    section.add "X-Amz-SignedHeaders", valid_600112
  var valid_600113 = header.getOrDefault("X-Amz-Credential")
  valid_600113 = validateParameter(valid_600113, JString, required = false,
                                 default = nil)
  if valid_600113 != nil:
    section.add "X-Amz-Credential", valid_600113
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600114: Call_GetBatchPutScheduledUpdateGroupAction_600100;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_600114.validator(path, query, header, formData, body)
  let scheme = call_600114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600114.url(scheme.get, call_600114.host, call_600114.base,
                         call_600114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600114, url, valid)

proc call*(call_600115: Call_GetBatchPutScheduledUpdateGroupAction_600100;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: string (required)
  var query_600116 = newJObject()
  add(query_600116, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600116, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    query_600116.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_600116, "Version", newJString(Version))
  result = call_600115.call(nil, query_600116, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_600100(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_600101, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_600102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_600155 = ref object of OpenApiRestCall_599368
proc url_PostCompleteLifecycleAction_600157(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteLifecycleAction_600156(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600158 = query.getOrDefault("Action")
  valid_600158 = validateParameter(valid_600158, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_600158 != nil:
    section.add "Action", valid_600158
  var valid_600159 = query.getOrDefault("Version")
  valid_600159 = validateParameter(valid_600159, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600159 != nil:
    section.add "Version", valid_600159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600160 = header.getOrDefault("X-Amz-Date")
  valid_600160 = validateParameter(valid_600160, JString, required = false,
                                 default = nil)
  if valid_600160 != nil:
    section.add "X-Amz-Date", valid_600160
  var valid_600161 = header.getOrDefault("X-Amz-Security-Token")
  valid_600161 = validateParameter(valid_600161, JString, required = false,
                                 default = nil)
  if valid_600161 != nil:
    section.add "X-Amz-Security-Token", valid_600161
  var valid_600162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600162 = validateParameter(valid_600162, JString, required = false,
                                 default = nil)
  if valid_600162 != nil:
    section.add "X-Amz-Content-Sha256", valid_600162
  var valid_600163 = header.getOrDefault("X-Amz-Algorithm")
  valid_600163 = validateParameter(valid_600163, JString, required = false,
                                 default = nil)
  if valid_600163 != nil:
    section.add "X-Amz-Algorithm", valid_600163
  var valid_600164 = header.getOrDefault("X-Amz-Signature")
  valid_600164 = validateParameter(valid_600164, JString, required = false,
                                 default = nil)
  if valid_600164 != nil:
    section.add "X-Amz-Signature", valid_600164
  var valid_600165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600165 = validateParameter(valid_600165, JString, required = false,
                                 default = nil)
  if valid_600165 != nil:
    section.add "X-Amz-SignedHeaders", valid_600165
  var valid_600166 = header.getOrDefault("X-Amz-Credential")
  valid_600166 = validateParameter(valid_600166, JString, required = false,
                                 default = nil)
  if valid_600166 != nil:
    section.add "X-Amz-Credential", valid_600166
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600167 = formData.getOrDefault("AutoScalingGroupName")
  valid_600167 = validateParameter(valid_600167, JString, required = true,
                                 default = nil)
  if valid_600167 != nil:
    section.add "AutoScalingGroupName", valid_600167
  var valid_600168 = formData.getOrDefault("InstanceId")
  valid_600168 = validateParameter(valid_600168, JString, required = false,
                                 default = nil)
  if valid_600168 != nil:
    section.add "InstanceId", valid_600168
  var valid_600169 = formData.getOrDefault("LifecycleHookName")
  valid_600169 = validateParameter(valid_600169, JString, required = true,
                                 default = nil)
  if valid_600169 != nil:
    section.add "LifecycleHookName", valid_600169
  var valid_600170 = formData.getOrDefault("LifecycleActionResult")
  valid_600170 = validateParameter(valid_600170, JString, required = true,
                                 default = nil)
  if valid_600170 != nil:
    section.add "LifecycleActionResult", valid_600170
  var valid_600171 = formData.getOrDefault("LifecycleActionToken")
  valid_600171 = validateParameter(valid_600171, JString, required = false,
                                 default = nil)
  if valid_600171 != nil:
    section.add "LifecycleActionToken", valid_600171
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600172: Call_PostCompleteLifecycleAction_600155; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600172.validator(path, query, header, formData, body)
  let scheme = call_600172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600172.url(scheme.get, call_600172.host, call_600172.base,
                         call_600172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600172, url, valid)

proc call*(call_600173: Call_PostCompleteLifecycleAction_600155;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string;
          Action: string = "CompleteLifecycleAction"; InstanceId: string = "";
          Version: string = "2011-01-01"; LifecycleActionToken: string = ""): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_600174 = newJObject()
  var formData_600175 = newJObject()
  add(formData_600175, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600174, "Action", newJString(Action))
  add(formData_600175, "InstanceId", newJString(InstanceId))
  add(formData_600175, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_600175, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_600174, "Version", newJString(Version))
  add(formData_600175, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_600173.call(nil, query_600174, nil, formData_600175, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_600155(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_600156, base: "/",
    url: url_PostCompleteLifecycleAction_600157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_600135 = ref object of OpenApiRestCall_599368
proc url_GetCompleteLifecycleAction_600137(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteLifecycleAction_600136(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600138 = query.getOrDefault("AutoScalingGroupName")
  valid_600138 = validateParameter(valid_600138, JString, required = true,
                                 default = nil)
  if valid_600138 != nil:
    section.add "AutoScalingGroupName", valid_600138
  var valid_600139 = query.getOrDefault("LifecycleActionResult")
  valid_600139 = validateParameter(valid_600139, JString, required = true,
                                 default = nil)
  if valid_600139 != nil:
    section.add "LifecycleActionResult", valid_600139
  var valid_600140 = query.getOrDefault("Action")
  valid_600140 = validateParameter(valid_600140, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_600140 != nil:
    section.add "Action", valid_600140
  var valid_600141 = query.getOrDefault("LifecycleHookName")
  valid_600141 = validateParameter(valid_600141, JString, required = true,
                                 default = nil)
  if valid_600141 != nil:
    section.add "LifecycleHookName", valid_600141
  var valid_600142 = query.getOrDefault("InstanceId")
  valid_600142 = validateParameter(valid_600142, JString, required = false,
                                 default = nil)
  if valid_600142 != nil:
    section.add "InstanceId", valid_600142
  var valid_600143 = query.getOrDefault("Version")
  valid_600143 = validateParameter(valid_600143, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600143 != nil:
    section.add "Version", valid_600143
  var valid_600144 = query.getOrDefault("LifecycleActionToken")
  valid_600144 = validateParameter(valid_600144, JString, required = false,
                                 default = nil)
  if valid_600144 != nil:
    section.add "LifecycleActionToken", valid_600144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600145 = header.getOrDefault("X-Amz-Date")
  valid_600145 = validateParameter(valid_600145, JString, required = false,
                                 default = nil)
  if valid_600145 != nil:
    section.add "X-Amz-Date", valid_600145
  var valid_600146 = header.getOrDefault("X-Amz-Security-Token")
  valid_600146 = validateParameter(valid_600146, JString, required = false,
                                 default = nil)
  if valid_600146 != nil:
    section.add "X-Amz-Security-Token", valid_600146
  var valid_600147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600147 = validateParameter(valid_600147, JString, required = false,
                                 default = nil)
  if valid_600147 != nil:
    section.add "X-Amz-Content-Sha256", valid_600147
  var valid_600148 = header.getOrDefault("X-Amz-Algorithm")
  valid_600148 = validateParameter(valid_600148, JString, required = false,
                                 default = nil)
  if valid_600148 != nil:
    section.add "X-Amz-Algorithm", valid_600148
  var valid_600149 = header.getOrDefault("X-Amz-Signature")
  valid_600149 = validateParameter(valid_600149, JString, required = false,
                                 default = nil)
  if valid_600149 != nil:
    section.add "X-Amz-Signature", valid_600149
  var valid_600150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600150 = validateParameter(valid_600150, JString, required = false,
                                 default = nil)
  if valid_600150 != nil:
    section.add "X-Amz-SignedHeaders", valid_600150
  var valid_600151 = header.getOrDefault("X-Amz-Credential")
  valid_600151 = validateParameter(valid_600151, JString, required = false,
                                 default = nil)
  if valid_600151 != nil:
    section.add "X-Amz-Credential", valid_600151
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600152: Call_GetCompleteLifecycleAction_600135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600152.validator(path, query, header, formData, body)
  let scheme = call_600152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600152.url(scheme.get, call_600152.host, call_600152.base,
                         call_600152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600152, url, valid)

proc call*(call_600153: Call_GetCompleteLifecycleAction_600135;
          AutoScalingGroupName: string; LifecycleActionResult: string;
          LifecycleHookName: string; Action: string = "CompleteLifecycleAction";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  var query_600154 = newJObject()
  add(query_600154, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600154, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_600154, "Action", newJString(Action))
  add(query_600154, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_600154, "InstanceId", newJString(InstanceId))
  add(query_600154, "Version", newJString(Version))
  add(query_600154, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_600153.call(nil, query_600154, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_600135(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_600136, base: "/",
    url: url_GetCompleteLifecycleAction_600137,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_600216 = ref object of OpenApiRestCall_599368
proc url_PostCreateAutoScalingGroup_600218(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAutoScalingGroup_600217(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600219 = query.getOrDefault("Action")
  valid_600219 = validateParameter(valid_600219, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_600219 != nil:
    section.add "Action", valid_600219
  var valid_600220 = query.getOrDefault("Version")
  valid_600220 = validateParameter(valid_600220, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600220 != nil:
    section.add "Version", valid_600220
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600221 = header.getOrDefault("X-Amz-Date")
  valid_600221 = validateParameter(valid_600221, JString, required = false,
                                 default = nil)
  if valid_600221 != nil:
    section.add "X-Amz-Date", valid_600221
  var valid_600222 = header.getOrDefault("X-Amz-Security-Token")
  valid_600222 = validateParameter(valid_600222, JString, required = false,
                                 default = nil)
  if valid_600222 != nil:
    section.add "X-Amz-Security-Token", valid_600222
  var valid_600223 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600223 = validateParameter(valid_600223, JString, required = false,
                                 default = nil)
  if valid_600223 != nil:
    section.add "X-Amz-Content-Sha256", valid_600223
  var valid_600224 = header.getOrDefault("X-Amz-Algorithm")
  valid_600224 = validateParameter(valid_600224, JString, required = false,
                                 default = nil)
  if valid_600224 != nil:
    section.add "X-Amz-Algorithm", valid_600224
  var valid_600225 = header.getOrDefault("X-Amz-Signature")
  valid_600225 = validateParameter(valid_600225, JString, required = false,
                                 default = nil)
  if valid_600225 != nil:
    section.add "X-Amz-Signature", valid_600225
  var valid_600226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600226 = validateParameter(valid_600226, JString, required = false,
                                 default = nil)
  if valid_600226 != nil:
    section.add "X-Amz-SignedHeaders", valid_600226
  var valid_600227 = header.getOrDefault("X-Amz-Credential")
  valid_600227 = validateParameter(valid_600227, JString, required = false,
                                 default = nil)
  if valid_600227 != nil:
    section.add "X-Amz-Credential", valid_600227
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600228 = formData.getOrDefault("AutoScalingGroupName")
  valid_600228 = validateParameter(valid_600228, JString, required = true,
                                 default = nil)
  if valid_600228 != nil:
    section.add "AutoScalingGroupName", valid_600228
  var valid_600229 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_600229 = validateParameter(valid_600229, JString, required = false,
                                 default = nil)
  if valid_600229 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_600229
  var valid_600230 = formData.getOrDefault("LaunchConfigurationName")
  valid_600230 = validateParameter(valid_600230, JString, required = false,
                                 default = nil)
  if valid_600230 != nil:
    section.add "LaunchConfigurationName", valid_600230
  var valid_600231 = formData.getOrDefault("HealthCheckType")
  valid_600231 = validateParameter(valid_600231, JString, required = false,
                                 default = nil)
  if valid_600231 != nil:
    section.add "HealthCheckType", valid_600231
  var valid_600232 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_600232 = validateParameter(valid_600232, JString, required = false,
                                 default = nil)
  if valid_600232 != nil:
    section.add "ServiceLinkedRoleARN", valid_600232
  var valid_600233 = formData.getOrDefault("DesiredCapacity")
  valid_600233 = validateParameter(valid_600233, JInt, required = false, default = nil)
  if valid_600233 != nil:
    section.add "DesiredCapacity", valid_600233
  var valid_600234 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_600234 = validateParameter(valid_600234, JInt, required = false, default = nil)
  if valid_600234 != nil:
    section.add "HealthCheckGracePeriod", valid_600234
  var valid_600235 = formData.getOrDefault("VPCZoneIdentifier")
  valid_600235 = validateParameter(valid_600235, JString, required = false,
                                 default = nil)
  if valid_600235 != nil:
    section.add "VPCZoneIdentifier", valid_600235
  var valid_600236 = formData.getOrDefault("Tags")
  valid_600236 = validateParameter(valid_600236, JArray, required = false,
                                 default = nil)
  if valid_600236 != nil:
    section.add "Tags", valid_600236
  var valid_600237 = formData.getOrDefault("TargetGroupARNs")
  valid_600237 = validateParameter(valid_600237, JArray, required = false,
                                 default = nil)
  if valid_600237 != nil:
    section.add "TargetGroupARNs", valid_600237
  var valid_600238 = formData.getOrDefault("AvailabilityZones")
  valid_600238 = validateParameter(valid_600238, JArray, required = false,
                                 default = nil)
  if valid_600238 != nil:
    section.add "AvailabilityZones", valid_600238
  var valid_600239 = formData.getOrDefault("InstanceId")
  valid_600239 = validateParameter(valid_600239, JString, required = false,
                                 default = nil)
  if valid_600239 != nil:
    section.add "InstanceId", valid_600239
  var valid_600240 = formData.getOrDefault("MinSize")
  valid_600240 = validateParameter(valid_600240, JInt, required = true, default = nil)
  if valid_600240 != nil:
    section.add "MinSize", valid_600240
  var valid_600241 = formData.getOrDefault("DefaultCooldown")
  valid_600241 = validateParameter(valid_600241, JInt, required = false, default = nil)
  if valid_600241 != nil:
    section.add "DefaultCooldown", valid_600241
  var valid_600242 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_600242 = validateParameter(valid_600242, JString, required = false,
                                 default = nil)
  if valid_600242 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_600242
  var valid_600243 = formData.getOrDefault("LoadBalancerNames")
  valid_600243 = validateParameter(valid_600243, JArray, required = false,
                                 default = nil)
  if valid_600243 != nil:
    section.add "LoadBalancerNames", valid_600243
  var valid_600244 = formData.getOrDefault("MaxSize")
  valid_600244 = validateParameter(valid_600244, JInt, required = true, default = nil)
  if valid_600244 != nil:
    section.add "MaxSize", valid_600244
  var valid_600245 = formData.getOrDefault("MaxInstanceLifetime")
  valid_600245 = validateParameter(valid_600245, JInt, required = false, default = nil)
  if valid_600245 != nil:
    section.add "MaxInstanceLifetime", valid_600245
  var valid_600246 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_600246 = validateParameter(valid_600246, JString, required = false,
                                 default = nil)
  if valid_600246 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_600246
  var valid_600247 = formData.getOrDefault("PlacementGroup")
  valid_600247 = validateParameter(valid_600247, JString, required = false,
                                 default = nil)
  if valid_600247 != nil:
    section.add "PlacementGroup", valid_600247
  var valid_600248 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_600248 = validateParameter(valid_600248, JBool, required = false, default = nil)
  if valid_600248 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_600248
  var valid_600249 = formData.getOrDefault("LaunchTemplate.Version")
  valid_600249 = validateParameter(valid_600249, JString, required = false,
                                 default = nil)
  if valid_600249 != nil:
    section.add "LaunchTemplate.Version", valid_600249
  var valid_600250 = formData.getOrDefault("TerminationPolicies")
  valid_600250 = validateParameter(valid_600250, JArray, required = false,
                                 default = nil)
  if valid_600250 != nil:
    section.add "TerminationPolicies", valid_600250
  var valid_600251 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_600251 = validateParameter(valid_600251, JString, required = false,
                                 default = nil)
  if valid_600251 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_600251
  var valid_600252 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_600252 = validateParameter(valid_600252, JArray, required = false,
                                 default = nil)
  if valid_600252 != nil:
    section.add "LifecycleHookSpecificationList", valid_600252
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600253: Call_PostCreateAutoScalingGroup_600216; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600253.validator(path, query, header, formData, body)
  let scheme = call_600253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600253.url(scheme.get, call_600253.host, call_600253.base,
                         call_600253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600253, url, valid)

proc call*(call_600254: Call_PostCreateAutoScalingGroup_600216;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Tags: JsonNode = nil; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; InstanceId: string = "";
          DefaultCooldown: int = 0; MixedInstancesPolicyLaunchTemplate: string = "";
          LoadBalancerNames: JsonNode = nil; MaxInstanceLifetime: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  var query_600255 = newJObject()
  var formData_600256 = newJObject()
  add(formData_600256, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_600256, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_600256, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_600256, "HealthCheckType", newJString(HealthCheckType))
  add(formData_600256, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_600256, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_600256, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_600256, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if Tags != nil:
    formData_600256.add "Tags", Tags
  if TargetGroupARNs != nil:
    formData_600256.add "TargetGroupARNs", TargetGroupARNs
  add(query_600255, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_600256.add "AvailabilityZones", AvailabilityZones
  add(formData_600256, "InstanceId", newJString(InstanceId))
  add(formData_600256, "MinSize", newJInt(MinSize))
  add(formData_600256, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_600256, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if LoadBalancerNames != nil:
    formData_600256.add "LoadBalancerNames", LoadBalancerNames
  add(formData_600256, "MaxSize", newJInt(MaxSize))
  add(formData_600256, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(formData_600256, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_600256, "PlacementGroup", newJString(PlacementGroup))
  add(formData_600256, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_600256, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_600256.add "TerminationPolicies", TerminationPolicies
  add(query_600255, "Version", newJString(Version))
  add(formData_600256, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_600256.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  result = call_600254.call(nil, query_600255, nil, formData_600256, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_600216(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_600217, base: "/",
    url: url_PostCreateAutoScalingGroup_600218,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_600176 = ref object of OpenApiRestCall_599368
proc url_GetCreateAutoScalingGroup_600178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAutoScalingGroup_600177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_600179 = query.getOrDefault("HealthCheckGracePeriod")
  valid_600179 = validateParameter(valid_600179, JInt, required = false, default = nil)
  if valid_600179 != nil:
    section.add "HealthCheckGracePeriod", valid_600179
  var valid_600180 = query.getOrDefault("TerminationPolicies")
  valid_600180 = validateParameter(valid_600180, JArray, required = false,
                                 default = nil)
  if valid_600180 != nil:
    section.add "TerminationPolicies", valid_600180
  var valid_600181 = query.getOrDefault("HealthCheckType")
  valid_600181 = validateParameter(valid_600181, JString, required = false,
                                 default = nil)
  if valid_600181 != nil:
    section.add "HealthCheckType", valid_600181
  var valid_600182 = query.getOrDefault("DesiredCapacity")
  valid_600182 = validateParameter(valid_600182, JInt, required = false, default = nil)
  if valid_600182 != nil:
    section.add "DesiredCapacity", valid_600182
  var valid_600183 = query.getOrDefault("DefaultCooldown")
  valid_600183 = validateParameter(valid_600183, JInt, required = false, default = nil)
  if valid_600183 != nil:
    section.add "DefaultCooldown", valid_600183
  var valid_600184 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_600184 = validateParameter(valid_600184, JString, required = false,
                                 default = nil)
  if valid_600184 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_600184
  var valid_600185 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_600185 = validateParameter(valid_600185, JString, required = false,
                                 default = nil)
  if valid_600185 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_600185
  var valid_600186 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_600186 = validateParameter(valid_600186, JArray, required = false,
                                 default = nil)
  if valid_600186 != nil:
    section.add "LifecycleHookSpecificationList", valid_600186
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600187 = query.getOrDefault("AutoScalingGroupName")
  valid_600187 = validateParameter(valid_600187, JString, required = true,
                                 default = nil)
  if valid_600187 != nil:
    section.add "AutoScalingGroupName", valid_600187
  var valid_600188 = query.getOrDefault("AvailabilityZones")
  valid_600188 = validateParameter(valid_600188, JArray, required = false,
                                 default = nil)
  if valid_600188 != nil:
    section.add "AvailabilityZones", valid_600188
  var valid_600189 = query.getOrDefault("VPCZoneIdentifier")
  valid_600189 = validateParameter(valid_600189, JString, required = false,
                                 default = nil)
  if valid_600189 != nil:
    section.add "VPCZoneIdentifier", valid_600189
  var valid_600190 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_600190 = validateParameter(valid_600190, JBool, required = false, default = nil)
  if valid_600190 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_600190
  var valid_600191 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_600191 = validateParameter(valid_600191, JString, required = false,
                                 default = nil)
  if valid_600191 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_600191
  var valid_600192 = query.getOrDefault("LaunchConfigurationName")
  valid_600192 = validateParameter(valid_600192, JString, required = false,
                                 default = nil)
  if valid_600192 != nil:
    section.add "LaunchConfigurationName", valid_600192
  var valid_600193 = query.getOrDefault("Tags")
  valid_600193 = validateParameter(valid_600193, JArray, required = false,
                                 default = nil)
  if valid_600193 != nil:
    section.add "Tags", valid_600193
  var valid_600194 = query.getOrDefault("MaxInstanceLifetime")
  valid_600194 = validateParameter(valid_600194, JInt, required = false, default = nil)
  if valid_600194 != nil:
    section.add "MaxInstanceLifetime", valid_600194
  var valid_600195 = query.getOrDefault("Action")
  valid_600195 = validateParameter(valid_600195, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_600195 != nil:
    section.add "Action", valid_600195
  var valid_600196 = query.getOrDefault("PlacementGroup")
  valid_600196 = validateParameter(valid_600196, JString, required = false,
                                 default = nil)
  if valid_600196 != nil:
    section.add "PlacementGroup", valid_600196
  var valid_600197 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_600197 = validateParameter(valid_600197, JString, required = false,
                                 default = nil)
  if valid_600197 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_600197
  var valid_600198 = query.getOrDefault("LaunchTemplate.Version")
  valid_600198 = validateParameter(valid_600198, JString, required = false,
                                 default = nil)
  if valid_600198 != nil:
    section.add "LaunchTemplate.Version", valid_600198
  var valid_600199 = query.getOrDefault("TargetGroupARNs")
  valid_600199 = validateParameter(valid_600199, JArray, required = false,
                                 default = nil)
  if valid_600199 != nil:
    section.add "TargetGroupARNs", valid_600199
  var valid_600200 = query.getOrDefault("LoadBalancerNames")
  valid_600200 = validateParameter(valid_600200, JArray, required = false,
                                 default = nil)
  if valid_600200 != nil:
    section.add "LoadBalancerNames", valid_600200
  var valid_600201 = query.getOrDefault("InstanceId")
  valid_600201 = validateParameter(valid_600201, JString, required = false,
                                 default = nil)
  if valid_600201 != nil:
    section.add "InstanceId", valid_600201
  var valid_600202 = query.getOrDefault("MaxSize")
  valid_600202 = validateParameter(valid_600202, JInt, required = true, default = nil)
  if valid_600202 != nil:
    section.add "MaxSize", valid_600202
  var valid_600203 = query.getOrDefault("MinSize")
  valid_600203 = validateParameter(valid_600203, JInt, required = true, default = nil)
  if valid_600203 != nil:
    section.add "MinSize", valid_600203
  var valid_600204 = query.getOrDefault("Version")
  valid_600204 = validateParameter(valid_600204, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600204 != nil:
    section.add "Version", valid_600204
  var valid_600205 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_600205 = validateParameter(valid_600205, JString, required = false,
                                 default = nil)
  if valid_600205 != nil:
    section.add "ServiceLinkedRoleARN", valid_600205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600206 = header.getOrDefault("X-Amz-Date")
  valid_600206 = validateParameter(valid_600206, JString, required = false,
                                 default = nil)
  if valid_600206 != nil:
    section.add "X-Amz-Date", valid_600206
  var valid_600207 = header.getOrDefault("X-Amz-Security-Token")
  valid_600207 = validateParameter(valid_600207, JString, required = false,
                                 default = nil)
  if valid_600207 != nil:
    section.add "X-Amz-Security-Token", valid_600207
  var valid_600208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600208 = validateParameter(valid_600208, JString, required = false,
                                 default = nil)
  if valid_600208 != nil:
    section.add "X-Amz-Content-Sha256", valid_600208
  var valid_600209 = header.getOrDefault("X-Amz-Algorithm")
  valid_600209 = validateParameter(valid_600209, JString, required = false,
                                 default = nil)
  if valid_600209 != nil:
    section.add "X-Amz-Algorithm", valid_600209
  var valid_600210 = header.getOrDefault("X-Amz-Signature")
  valid_600210 = validateParameter(valid_600210, JString, required = false,
                                 default = nil)
  if valid_600210 != nil:
    section.add "X-Amz-Signature", valid_600210
  var valid_600211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600211 = validateParameter(valid_600211, JString, required = false,
                                 default = nil)
  if valid_600211 != nil:
    section.add "X-Amz-SignedHeaders", valid_600211
  var valid_600212 = header.getOrDefault("X-Amz-Credential")
  valid_600212 = validateParameter(valid_600212, JString, required = false,
                                 default = nil)
  if valid_600212 != nil:
    section.add "X-Amz-Credential", valid_600212
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600213: Call_GetCreateAutoScalingGroup_600176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600213.validator(path, query, header, formData, body)
  let scheme = call_600213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600213.url(scheme.get, call_600213.host, call_600213.base,
                         call_600213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600213, url, valid)

proc call*(call_600214: Call_GetCreateAutoScalingGroup_600176;
          AutoScalingGroupName: string; MaxSize: int; MinSize: int;
          HealthCheckGracePeriod: int = 0; TerminationPolicies: JsonNode = nil;
          HealthCheckType: string = ""; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; Tags: JsonNode = nil;
          MaxInstanceLifetime: int = 0; Action: string = "CreateAutoScalingGroup";
          PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; TargetGroupARNs: JsonNode = nil;
          LoadBalancerNames: JsonNode = nil; InstanceId: string = "";
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_600215 = newJObject()
  add(query_600215, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_600215.add "TerminationPolicies", TerminationPolicies
  add(query_600215, "HealthCheckType", newJString(HealthCheckType))
  add(query_600215, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_600215, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_600215, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_600215, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    query_600215.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_600215, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_600215.add "AvailabilityZones", AvailabilityZones
  add(query_600215, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_600215, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_600215, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_600215, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  if Tags != nil:
    query_600215.add "Tags", Tags
  add(query_600215, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_600215, "Action", newJString(Action))
  add(query_600215, "PlacementGroup", newJString(PlacementGroup))
  add(query_600215, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_600215, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TargetGroupARNs != nil:
    query_600215.add "TargetGroupARNs", TargetGroupARNs
  if LoadBalancerNames != nil:
    query_600215.add "LoadBalancerNames", LoadBalancerNames
  add(query_600215, "InstanceId", newJString(InstanceId))
  add(query_600215, "MaxSize", newJInt(MaxSize))
  add(query_600215, "MinSize", newJInt(MinSize))
  add(query_600215, "Version", newJString(Version))
  add(query_600215, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_600214.call(nil, query_600215, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_600176(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_600177, base: "/",
    url: url_GetCreateAutoScalingGroup_600178,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_600290 = ref object of OpenApiRestCall_599368
proc url_PostCreateLaunchConfiguration_600292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLaunchConfiguration_600291(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600293 = query.getOrDefault("Action")
  valid_600293 = validateParameter(valid_600293, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_600293 != nil:
    section.add "Action", valid_600293
  var valid_600294 = query.getOrDefault("Version")
  valid_600294 = validateParameter(valid_600294, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600294 != nil:
    section.add "Version", valid_600294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600295 = header.getOrDefault("X-Amz-Date")
  valid_600295 = validateParameter(valid_600295, JString, required = false,
                                 default = nil)
  if valid_600295 != nil:
    section.add "X-Amz-Date", valid_600295
  var valid_600296 = header.getOrDefault("X-Amz-Security-Token")
  valid_600296 = validateParameter(valid_600296, JString, required = false,
                                 default = nil)
  if valid_600296 != nil:
    section.add "X-Amz-Security-Token", valid_600296
  var valid_600297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600297 = validateParameter(valid_600297, JString, required = false,
                                 default = nil)
  if valid_600297 != nil:
    section.add "X-Amz-Content-Sha256", valid_600297
  var valid_600298 = header.getOrDefault("X-Amz-Algorithm")
  valid_600298 = validateParameter(valid_600298, JString, required = false,
                                 default = nil)
  if valid_600298 != nil:
    section.add "X-Amz-Algorithm", valid_600298
  var valid_600299 = header.getOrDefault("X-Amz-Signature")
  valid_600299 = validateParameter(valid_600299, JString, required = false,
                                 default = nil)
  if valid_600299 != nil:
    section.add "X-Amz-Signature", valid_600299
  var valid_600300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600300 = validateParameter(valid_600300, JString, required = false,
                                 default = nil)
  if valid_600300 != nil:
    section.add "X-Amz-SignedHeaders", valid_600300
  var valid_600301 = header.getOrDefault("X-Amz-Credential")
  valid_600301 = validateParameter(valid_600301, JString, required = false,
                                 default = nil)
  if valid_600301 != nil:
    section.add "X-Amz-Credential", valid_600301
  result.add "header", section
  ## parameters in `formData` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_600302 = formData.getOrDefault("PlacementTenancy")
  valid_600302 = validateParameter(valid_600302, JString, required = false,
                                 default = nil)
  if valid_600302 != nil:
    section.add "PlacementTenancy", valid_600302
  var valid_600303 = formData.getOrDefault("BlockDeviceMappings")
  valid_600303 = validateParameter(valid_600303, JArray, required = false,
                                 default = nil)
  if valid_600303 != nil:
    section.add "BlockDeviceMappings", valid_600303
  var valid_600304 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_600304 = validateParameter(valid_600304, JBool, required = false, default = nil)
  if valid_600304 != nil:
    section.add "AssociatePublicIpAddress", valid_600304
  var valid_600305 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_600305 = validateParameter(valid_600305, JArray, required = false,
                                 default = nil)
  if valid_600305 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_600305
  var valid_600306 = formData.getOrDefault("KernelId")
  valid_600306 = validateParameter(valid_600306, JString, required = false,
                                 default = nil)
  if valid_600306 != nil:
    section.add "KernelId", valid_600306
  var valid_600307 = formData.getOrDefault("KeyName")
  valid_600307 = validateParameter(valid_600307, JString, required = false,
                                 default = nil)
  if valid_600307 != nil:
    section.add "KeyName", valid_600307
  var valid_600308 = formData.getOrDefault("ImageId")
  valid_600308 = validateParameter(valid_600308, JString, required = false,
                                 default = nil)
  if valid_600308 != nil:
    section.add "ImageId", valid_600308
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_600309 = formData.getOrDefault("LaunchConfigurationName")
  valid_600309 = validateParameter(valid_600309, JString, required = true,
                                 default = nil)
  if valid_600309 != nil:
    section.add "LaunchConfigurationName", valid_600309
  var valid_600310 = formData.getOrDefault("ClassicLinkVPCId")
  valid_600310 = validateParameter(valid_600310, JString, required = false,
                                 default = nil)
  if valid_600310 != nil:
    section.add "ClassicLinkVPCId", valid_600310
  var valid_600311 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_600311 = validateParameter(valid_600311, JString, required = false,
                                 default = nil)
  if valid_600311 != nil:
    section.add "InstanceMonitoring.Enabled", valid_600311
  var valid_600312 = formData.getOrDefault("IamInstanceProfile")
  valid_600312 = validateParameter(valid_600312, JString, required = false,
                                 default = nil)
  if valid_600312 != nil:
    section.add "IamInstanceProfile", valid_600312
  var valid_600313 = formData.getOrDefault("InstanceId")
  valid_600313 = validateParameter(valid_600313, JString, required = false,
                                 default = nil)
  if valid_600313 != nil:
    section.add "InstanceId", valid_600313
  var valid_600314 = formData.getOrDefault("UserData")
  valid_600314 = validateParameter(valid_600314, JString, required = false,
                                 default = nil)
  if valid_600314 != nil:
    section.add "UserData", valid_600314
  var valid_600315 = formData.getOrDefault("SecurityGroups")
  valid_600315 = validateParameter(valid_600315, JArray, required = false,
                                 default = nil)
  if valid_600315 != nil:
    section.add "SecurityGroups", valid_600315
  var valid_600316 = formData.getOrDefault("RamdiskId")
  valid_600316 = validateParameter(valid_600316, JString, required = false,
                                 default = nil)
  if valid_600316 != nil:
    section.add "RamdiskId", valid_600316
  var valid_600317 = formData.getOrDefault("EbsOptimized")
  valid_600317 = validateParameter(valid_600317, JBool, required = false, default = nil)
  if valid_600317 != nil:
    section.add "EbsOptimized", valid_600317
  var valid_600318 = formData.getOrDefault("InstanceType")
  valid_600318 = validateParameter(valid_600318, JString, required = false,
                                 default = nil)
  if valid_600318 != nil:
    section.add "InstanceType", valid_600318
  var valid_600319 = formData.getOrDefault("SpotPrice")
  valid_600319 = validateParameter(valid_600319, JString, required = false,
                                 default = nil)
  if valid_600319 != nil:
    section.add "SpotPrice", valid_600319
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600320: Call_PostCreateLaunchConfiguration_600290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600320.validator(path, query, header, formData, body)
  let scheme = call_600320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600320.url(scheme.get, call_600320.host, call_600320.base,
                         call_600320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600320, url, valid)

proc call*(call_600321: Call_PostCreateLaunchConfiguration_600290;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          BlockDeviceMappings: JsonNode = nil;
          AssociatePublicIpAddress: bool = false;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; KernelId: string = "";
          KeyName: string = ""; ImageId: string = ""; ClassicLinkVPCId: string = "";
          InstanceMonitoringEnabled: string = ""; IamInstanceProfile: string = "";
          Action: string = "CreateLaunchConfiguration"; InstanceId: string = "";
          UserData: string = ""; SecurityGroups: JsonNode = nil; RamdiskId: string = "";
          EbsOptimized: bool = false; InstanceType: string = ""; SpotPrice: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   Version: string (required)
  var query_600322 = newJObject()
  var formData_600323 = newJObject()
  add(formData_600323, "PlacementTenancy", newJString(PlacementTenancy))
  if BlockDeviceMappings != nil:
    formData_600323.add "BlockDeviceMappings", BlockDeviceMappings
  add(formData_600323, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  if ClassicLinkVPCSecurityGroups != nil:
    formData_600323.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_600323, "KernelId", newJString(KernelId))
  add(formData_600323, "KeyName", newJString(KeyName))
  add(formData_600323, "ImageId", newJString(ImageId))
  add(formData_600323, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_600323, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_600323, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(formData_600323, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_600322, "Action", newJString(Action))
  add(formData_600323, "InstanceId", newJString(InstanceId))
  add(formData_600323, "UserData", newJString(UserData))
  if SecurityGroups != nil:
    formData_600323.add "SecurityGroups", SecurityGroups
  add(formData_600323, "RamdiskId", newJString(RamdiskId))
  add(formData_600323, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_600323, "InstanceType", newJString(InstanceType))
  add(formData_600323, "SpotPrice", newJString(SpotPrice))
  add(query_600322, "Version", newJString(Version))
  result = call_600321.call(nil, query_600322, nil, formData_600323, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_600290(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_600291, base: "/",
    url: url_PostCreateLaunchConfiguration_600292,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_600257 = ref object of OpenApiRestCall_599368
proc url_GetCreateLaunchConfiguration_600259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLaunchConfiguration_600258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: JString (required)
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_600260 = query.getOrDefault("PlacementTenancy")
  valid_600260 = validateParameter(valid_600260, JString, required = false,
                                 default = nil)
  if valid_600260 != nil:
    section.add "PlacementTenancy", valid_600260
  var valid_600261 = query.getOrDefault("KeyName")
  valid_600261 = validateParameter(valid_600261, JString, required = false,
                                 default = nil)
  if valid_600261 != nil:
    section.add "KeyName", valid_600261
  var valid_600262 = query.getOrDefault("KernelId")
  valid_600262 = validateParameter(valid_600262, JString, required = false,
                                 default = nil)
  if valid_600262 != nil:
    section.add "KernelId", valid_600262
  var valid_600263 = query.getOrDefault("UserData")
  valid_600263 = validateParameter(valid_600263, JString, required = false,
                                 default = nil)
  if valid_600263 != nil:
    section.add "UserData", valid_600263
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_600264 = query.getOrDefault("LaunchConfigurationName")
  valid_600264 = validateParameter(valid_600264, JString, required = true,
                                 default = nil)
  if valid_600264 != nil:
    section.add "LaunchConfigurationName", valid_600264
  var valid_600265 = query.getOrDefault("AssociatePublicIpAddress")
  valid_600265 = validateParameter(valid_600265, JBool, required = false, default = nil)
  if valid_600265 != nil:
    section.add "AssociatePublicIpAddress", valid_600265
  var valid_600266 = query.getOrDefault("EbsOptimized")
  valid_600266 = validateParameter(valid_600266, JBool, required = false, default = nil)
  if valid_600266 != nil:
    section.add "EbsOptimized", valid_600266
  var valid_600267 = query.getOrDefault("ImageId")
  valid_600267 = validateParameter(valid_600267, JString, required = false,
                                 default = nil)
  if valid_600267 != nil:
    section.add "ImageId", valid_600267
  var valid_600268 = query.getOrDefault("Action")
  valid_600268 = validateParameter(valid_600268, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_600268 != nil:
    section.add "Action", valid_600268
  var valid_600269 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_600269 = validateParameter(valid_600269, JString, required = false,
                                 default = nil)
  if valid_600269 != nil:
    section.add "InstanceMonitoring.Enabled", valid_600269
  var valid_600270 = query.getOrDefault("BlockDeviceMappings")
  valid_600270 = validateParameter(valid_600270, JArray, required = false,
                                 default = nil)
  if valid_600270 != nil:
    section.add "BlockDeviceMappings", valid_600270
  var valid_600271 = query.getOrDefault("RamdiskId")
  valid_600271 = validateParameter(valid_600271, JString, required = false,
                                 default = nil)
  if valid_600271 != nil:
    section.add "RamdiskId", valid_600271
  var valid_600272 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_600272 = validateParameter(valid_600272, JArray, required = false,
                                 default = nil)
  if valid_600272 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_600272
  var valid_600273 = query.getOrDefault("InstanceType")
  valid_600273 = validateParameter(valid_600273, JString, required = false,
                                 default = nil)
  if valid_600273 != nil:
    section.add "InstanceType", valid_600273
  var valid_600274 = query.getOrDefault("ClassicLinkVPCId")
  valid_600274 = validateParameter(valid_600274, JString, required = false,
                                 default = nil)
  if valid_600274 != nil:
    section.add "ClassicLinkVPCId", valid_600274
  var valid_600275 = query.getOrDefault("InstanceId")
  valid_600275 = validateParameter(valid_600275, JString, required = false,
                                 default = nil)
  if valid_600275 != nil:
    section.add "InstanceId", valid_600275
  var valid_600276 = query.getOrDefault("IamInstanceProfile")
  valid_600276 = validateParameter(valid_600276, JString, required = false,
                                 default = nil)
  if valid_600276 != nil:
    section.add "IamInstanceProfile", valid_600276
  var valid_600277 = query.getOrDefault("Version")
  valid_600277 = validateParameter(valid_600277, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600277 != nil:
    section.add "Version", valid_600277
  var valid_600278 = query.getOrDefault("SecurityGroups")
  valid_600278 = validateParameter(valid_600278, JArray, required = false,
                                 default = nil)
  if valid_600278 != nil:
    section.add "SecurityGroups", valid_600278
  var valid_600279 = query.getOrDefault("SpotPrice")
  valid_600279 = validateParameter(valid_600279, JString, required = false,
                                 default = nil)
  if valid_600279 != nil:
    section.add "SpotPrice", valid_600279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600280 = header.getOrDefault("X-Amz-Date")
  valid_600280 = validateParameter(valid_600280, JString, required = false,
                                 default = nil)
  if valid_600280 != nil:
    section.add "X-Amz-Date", valid_600280
  var valid_600281 = header.getOrDefault("X-Amz-Security-Token")
  valid_600281 = validateParameter(valid_600281, JString, required = false,
                                 default = nil)
  if valid_600281 != nil:
    section.add "X-Amz-Security-Token", valid_600281
  var valid_600282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600282 = validateParameter(valid_600282, JString, required = false,
                                 default = nil)
  if valid_600282 != nil:
    section.add "X-Amz-Content-Sha256", valid_600282
  var valid_600283 = header.getOrDefault("X-Amz-Algorithm")
  valid_600283 = validateParameter(valid_600283, JString, required = false,
                                 default = nil)
  if valid_600283 != nil:
    section.add "X-Amz-Algorithm", valid_600283
  var valid_600284 = header.getOrDefault("X-Amz-Signature")
  valid_600284 = validateParameter(valid_600284, JString, required = false,
                                 default = nil)
  if valid_600284 != nil:
    section.add "X-Amz-Signature", valid_600284
  var valid_600285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600285 = validateParameter(valid_600285, JString, required = false,
                                 default = nil)
  if valid_600285 != nil:
    section.add "X-Amz-SignedHeaders", valid_600285
  var valid_600286 = header.getOrDefault("X-Amz-Credential")
  valid_600286 = validateParameter(valid_600286, JString, required = false,
                                 default = nil)
  if valid_600286 != nil:
    section.add "X-Amz-Credential", valid_600286
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600287: Call_GetCreateLaunchConfiguration_600257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600287.validator(path, query, header, formData, body)
  let scheme = call_600287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600287.url(scheme.get, call_600287.host, call_600287.base,
                         call_600287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600287, url, valid)

proc call*(call_600288: Call_GetCreateLaunchConfiguration_600257;
          LaunchConfigurationName: string; PlacementTenancy: string = "";
          KeyName: string = ""; KernelId: string = ""; UserData: string = "";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          ImageId: string = ""; Action: string = "CreateLaunchConfiguration";
          InstanceMonitoringEnabled: string = "";
          BlockDeviceMappings: JsonNode = nil; RamdiskId: string = "";
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceType: string = "";
          ClassicLinkVPCId: string = ""; InstanceId: string = "";
          IamInstanceProfile: string = ""; Version: string = "2011-01-01";
          SecurityGroups: JsonNode = nil; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Action: string (required)
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  var query_600289 = newJObject()
  add(query_600289, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_600289, "KeyName", newJString(KeyName))
  add(query_600289, "KernelId", newJString(KernelId))
  add(query_600289, "UserData", newJString(UserData))
  add(query_600289, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_600289, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_600289, "EbsOptimized", newJBool(EbsOptimized))
  add(query_600289, "ImageId", newJString(ImageId))
  add(query_600289, "Action", newJString(Action))
  add(query_600289, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  if BlockDeviceMappings != nil:
    query_600289.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_600289, "RamdiskId", newJString(RamdiskId))
  if ClassicLinkVPCSecurityGroups != nil:
    query_600289.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_600289, "InstanceType", newJString(InstanceType))
  add(query_600289, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_600289, "InstanceId", newJString(InstanceId))
  add(query_600289, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_600289, "Version", newJString(Version))
  if SecurityGroups != nil:
    query_600289.add "SecurityGroups", SecurityGroups
  add(query_600289, "SpotPrice", newJString(SpotPrice))
  result = call_600288.call(nil, query_600289, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_600257(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_600258, base: "/",
    url: url_GetCreateLaunchConfiguration_600259,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_600340 = ref object of OpenApiRestCall_599368
proc url_PostCreateOrUpdateTags_600342(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOrUpdateTags_600341(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600343 = query.getOrDefault("Action")
  valid_600343 = validateParameter(valid_600343, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_600343 != nil:
    section.add "Action", valid_600343
  var valid_600344 = query.getOrDefault("Version")
  valid_600344 = validateParameter(valid_600344, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600344 != nil:
    section.add "Version", valid_600344
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600345 = header.getOrDefault("X-Amz-Date")
  valid_600345 = validateParameter(valid_600345, JString, required = false,
                                 default = nil)
  if valid_600345 != nil:
    section.add "X-Amz-Date", valid_600345
  var valid_600346 = header.getOrDefault("X-Amz-Security-Token")
  valid_600346 = validateParameter(valid_600346, JString, required = false,
                                 default = nil)
  if valid_600346 != nil:
    section.add "X-Amz-Security-Token", valid_600346
  var valid_600347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600347 = validateParameter(valid_600347, JString, required = false,
                                 default = nil)
  if valid_600347 != nil:
    section.add "X-Amz-Content-Sha256", valid_600347
  var valid_600348 = header.getOrDefault("X-Amz-Algorithm")
  valid_600348 = validateParameter(valid_600348, JString, required = false,
                                 default = nil)
  if valid_600348 != nil:
    section.add "X-Amz-Algorithm", valid_600348
  var valid_600349 = header.getOrDefault("X-Amz-Signature")
  valid_600349 = validateParameter(valid_600349, JString, required = false,
                                 default = nil)
  if valid_600349 != nil:
    section.add "X-Amz-Signature", valid_600349
  var valid_600350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600350 = validateParameter(valid_600350, JString, required = false,
                                 default = nil)
  if valid_600350 != nil:
    section.add "X-Amz-SignedHeaders", valid_600350
  var valid_600351 = header.getOrDefault("X-Amz-Credential")
  valid_600351 = validateParameter(valid_600351, JString, required = false,
                                 default = nil)
  if valid_600351 != nil:
    section.add "X-Amz-Credential", valid_600351
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_600352 = formData.getOrDefault("Tags")
  valid_600352 = validateParameter(valid_600352, JArray, required = true, default = nil)
  if valid_600352 != nil:
    section.add "Tags", valid_600352
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600353: Call_PostCreateOrUpdateTags_600340; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600353.validator(path, query, header, formData, body)
  let scheme = call_600353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600353.url(scheme.get, call_600353.host, call_600353.base,
                         call_600353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600353, url, valid)

proc call*(call_600354: Call_PostCreateOrUpdateTags_600340; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600355 = newJObject()
  var formData_600356 = newJObject()
  if Tags != nil:
    formData_600356.add "Tags", Tags
  add(query_600355, "Action", newJString(Action))
  add(query_600355, "Version", newJString(Version))
  result = call_600354.call(nil, query_600355, nil, formData_600356, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_600340(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_600341, base: "/",
    url: url_PostCreateOrUpdateTags_600342, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_600324 = ref object of OpenApiRestCall_599368
proc url_GetCreateOrUpdateTags_600326(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOrUpdateTags_600325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_600327 = query.getOrDefault("Tags")
  valid_600327 = validateParameter(valid_600327, JArray, required = true, default = nil)
  if valid_600327 != nil:
    section.add "Tags", valid_600327
  var valid_600328 = query.getOrDefault("Action")
  valid_600328 = validateParameter(valid_600328, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_600328 != nil:
    section.add "Action", valid_600328
  var valid_600329 = query.getOrDefault("Version")
  valid_600329 = validateParameter(valid_600329, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600329 != nil:
    section.add "Version", valid_600329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600330 = header.getOrDefault("X-Amz-Date")
  valid_600330 = validateParameter(valid_600330, JString, required = false,
                                 default = nil)
  if valid_600330 != nil:
    section.add "X-Amz-Date", valid_600330
  var valid_600331 = header.getOrDefault("X-Amz-Security-Token")
  valid_600331 = validateParameter(valid_600331, JString, required = false,
                                 default = nil)
  if valid_600331 != nil:
    section.add "X-Amz-Security-Token", valid_600331
  var valid_600332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600332 = validateParameter(valid_600332, JString, required = false,
                                 default = nil)
  if valid_600332 != nil:
    section.add "X-Amz-Content-Sha256", valid_600332
  var valid_600333 = header.getOrDefault("X-Amz-Algorithm")
  valid_600333 = validateParameter(valid_600333, JString, required = false,
                                 default = nil)
  if valid_600333 != nil:
    section.add "X-Amz-Algorithm", valid_600333
  var valid_600334 = header.getOrDefault("X-Amz-Signature")
  valid_600334 = validateParameter(valid_600334, JString, required = false,
                                 default = nil)
  if valid_600334 != nil:
    section.add "X-Amz-Signature", valid_600334
  var valid_600335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600335 = validateParameter(valid_600335, JString, required = false,
                                 default = nil)
  if valid_600335 != nil:
    section.add "X-Amz-SignedHeaders", valid_600335
  var valid_600336 = header.getOrDefault("X-Amz-Credential")
  valid_600336 = validateParameter(valid_600336, JString, required = false,
                                 default = nil)
  if valid_600336 != nil:
    section.add "X-Amz-Credential", valid_600336
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600337: Call_GetCreateOrUpdateTags_600324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600337.validator(path, query, header, formData, body)
  let scheme = call_600337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600337.url(scheme.get, call_600337.host, call_600337.base,
                         call_600337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600337, url, valid)

proc call*(call_600338: Call_GetCreateOrUpdateTags_600324; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600339 = newJObject()
  if Tags != nil:
    query_600339.add "Tags", Tags
  add(query_600339, "Action", newJString(Action))
  add(query_600339, "Version", newJString(Version))
  result = call_600338.call(nil, query_600339, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_600324(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_600325, base: "/",
    url: url_GetCreateOrUpdateTags_600326, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_600374 = ref object of OpenApiRestCall_599368
proc url_PostDeleteAutoScalingGroup_600376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAutoScalingGroup_600375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600377 = query.getOrDefault("Action")
  valid_600377 = validateParameter(valid_600377, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_600377 != nil:
    section.add "Action", valid_600377
  var valid_600378 = query.getOrDefault("Version")
  valid_600378 = validateParameter(valid_600378, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600378 != nil:
    section.add "Version", valid_600378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600379 = header.getOrDefault("X-Amz-Date")
  valid_600379 = validateParameter(valid_600379, JString, required = false,
                                 default = nil)
  if valid_600379 != nil:
    section.add "X-Amz-Date", valid_600379
  var valid_600380 = header.getOrDefault("X-Amz-Security-Token")
  valid_600380 = validateParameter(valid_600380, JString, required = false,
                                 default = nil)
  if valid_600380 != nil:
    section.add "X-Amz-Security-Token", valid_600380
  var valid_600381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600381 = validateParameter(valid_600381, JString, required = false,
                                 default = nil)
  if valid_600381 != nil:
    section.add "X-Amz-Content-Sha256", valid_600381
  var valid_600382 = header.getOrDefault("X-Amz-Algorithm")
  valid_600382 = validateParameter(valid_600382, JString, required = false,
                                 default = nil)
  if valid_600382 != nil:
    section.add "X-Amz-Algorithm", valid_600382
  var valid_600383 = header.getOrDefault("X-Amz-Signature")
  valid_600383 = validateParameter(valid_600383, JString, required = false,
                                 default = nil)
  if valid_600383 != nil:
    section.add "X-Amz-Signature", valid_600383
  var valid_600384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600384 = validateParameter(valid_600384, JString, required = false,
                                 default = nil)
  if valid_600384 != nil:
    section.add "X-Amz-SignedHeaders", valid_600384
  var valid_600385 = header.getOrDefault("X-Amz-Credential")
  valid_600385 = validateParameter(valid_600385, JString, required = false,
                                 default = nil)
  if valid_600385 != nil:
    section.add "X-Amz-Credential", valid_600385
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600386 = formData.getOrDefault("AutoScalingGroupName")
  valid_600386 = validateParameter(valid_600386, JString, required = true,
                                 default = nil)
  if valid_600386 != nil:
    section.add "AutoScalingGroupName", valid_600386
  var valid_600387 = formData.getOrDefault("ForceDelete")
  valid_600387 = validateParameter(valid_600387, JBool, required = false, default = nil)
  if valid_600387 != nil:
    section.add "ForceDelete", valid_600387
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600388: Call_PostDeleteAutoScalingGroup_600374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_600388.validator(path, query, header, formData, body)
  let scheme = call_600388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600388.url(scheme.get, call_600388.host, call_600388.base,
                         call_600388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600388, url, valid)

proc call*(call_600389: Call_PostDeleteAutoScalingGroup_600374;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600390 = newJObject()
  var formData_600391 = newJObject()
  add(formData_600391, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_600391, "ForceDelete", newJBool(ForceDelete))
  add(query_600390, "Action", newJString(Action))
  add(query_600390, "Version", newJString(Version))
  result = call_600389.call(nil, query_600390, nil, formData_600391, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_600374(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_600375, base: "/",
    url: url_PostDeleteAutoScalingGroup_600376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_600357 = ref object of OpenApiRestCall_599368
proc url_GetDeleteAutoScalingGroup_600359(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAutoScalingGroup_600358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600360 = query.getOrDefault("AutoScalingGroupName")
  valid_600360 = validateParameter(valid_600360, JString, required = true,
                                 default = nil)
  if valid_600360 != nil:
    section.add "AutoScalingGroupName", valid_600360
  var valid_600361 = query.getOrDefault("Action")
  valid_600361 = validateParameter(valid_600361, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_600361 != nil:
    section.add "Action", valid_600361
  var valid_600362 = query.getOrDefault("ForceDelete")
  valid_600362 = validateParameter(valid_600362, JBool, required = false, default = nil)
  if valid_600362 != nil:
    section.add "ForceDelete", valid_600362
  var valid_600363 = query.getOrDefault("Version")
  valid_600363 = validateParameter(valid_600363, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600363 != nil:
    section.add "Version", valid_600363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600364 = header.getOrDefault("X-Amz-Date")
  valid_600364 = validateParameter(valid_600364, JString, required = false,
                                 default = nil)
  if valid_600364 != nil:
    section.add "X-Amz-Date", valid_600364
  var valid_600365 = header.getOrDefault("X-Amz-Security-Token")
  valid_600365 = validateParameter(valid_600365, JString, required = false,
                                 default = nil)
  if valid_600365 != nil:
    section.add "X-Amz-Security-Token", valid_600365
  var valid_600366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600366 = validateParameter(valid_600366, JString, required = false,
                                 default = nil)
  if valid_600366 != nil:
    section.add "X-Amz-Content-Sha256", valid_600366
  var valid_600367 = header.getOrDefault("X-Amz-Algorithm")
  valid_600367 = validateParameter(valid_600367, JString, required = false,
                                 default = nil)
  if valid_600367 != nil:
    section.add "X-Amz-Algorithm", valid_600367
  var valid_600368 = header.getOrDefault("X-Amz-Signature")
  valid_600368 = validateParameter(valid_600368, JString, required = false,
                                 default = nil)
  if valid_600368 != nil:
    section.add "X-Amz-Signature", valid_600368
  var valid_600369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600369 = validateParameter(valid_600369, JString, required = false,
                                 default = nil)
  if valid_600369 != nil:
    section.add "X-Amz-SignedHeaders", valid_600369
  var valid_600370 = header.getOrDefault("X-Amz-Credential")
  valid_600370 = validateParameter(valid_600370, JString, required = false,
                                 default = nil)
  if valid_600370 != nil:
    section.add "X-Amz-Credential", valid_600370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600371: Call_GetDeleteAutoScalingGroup_600357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_600371.validator(path, query, header, formData, body)
  let scheme = call_600371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600371.url(scheme.get, call_600371.host, call_600371.base,
                         call_600371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600371, url, valid)

proc call*(call_600372: Call_GetDeleteAutoScalingGroup_600357;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_600373 = newJObject()
  add(query_600373, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600373, "Action", newJString(Action))
  add(query_600373, "ForceDelete", newJBool(ForceDelete))
  add(query_600373, "Version", newJString(Version))
  result = call_600372.call(nil, query_600373, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_600357(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_600358, base: "/",
    url: url_GetDeleteAutoScalingGroup_600359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_600408 = ref object of OpenApiRestCall_599368
proc url_PostDeleteLaunchConfiguration_600410(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLaunchConfiguration_600409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600411 = query.getOrDefault("Action")
  valid_600411 = validateParameter(valid_600411, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_600411 != nil:
    section.add "Action", valid_600411
  var valid_600412 = query.getOrDefault("Version")
  valid_600412 = validateParameter(valid_600412, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600412 != nil:
    section.add "Version", valid_600412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600413 = header.getOrDefault("X-Amz-Date")
  valid_600413 = validateParameter(valid_600413, JString, required = false,
                                 default = nil)
  if valid_600413 != nil:
    section.add "X-Amz-Date", valid_600413
  var valid_600414 = header.getOrDefault("X-Amz-Security-Token")
  valid_600414 = validateParameter(valid_600414, JString, required = false,
                                 default = nil)
  if valid_600414 != nil:
    section.add "X-Amz-Security-Token", valid_600414
  var valid_600415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600415 = validateParameter(valid_600415, JString, required = false,
                                 default = nil)
  if valid_600415 != nil:
    section.add "X-Amz-Content-Sha256", valid_600415
  var valid_600416 = header.getOrDefault("X-Amz-Algorithm")
  valid_600416 = validateParameter(valid_600416, JString, required = false,
                                 default = nil)
  if valid_600416 != nil:
    section.add "X-Amz-Algorithm", valid_600416
  var valid_600417 = header.getOrDefault("X-Amz-Signature")
  valid_600417 = validateParameter(valid_600417, JString, required = false,
                                 default = nil)
  if valid_600417 != nil:
    section.add "X-Amz-Signature", valid_600417
  var valid_600418 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600418 = validateParameter(valid_600418, JString, required = false,
                                 default = nil)
  if valid_600418 != nil:
    section.add "X-Amz-SignedHeaders", valid_600418
  var valid_600419 = header.getOrDefault("X-Amz-Credential")
  valid_600419 = validateParameter(valid_600419, JString, required = false,
                                 default = nil)
  if valid_600419 != nil:
    section.add "X-Amz-Credential", valid_600419
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_600420 = formData.getOrDefault("LaunchConfigurationName")
  valid_600420 = validateParameter(valid_600420, JString, required = true,
                                 default = nil)
  if valid_600420 != nil:
    section.add "LaunchConfigurationName", valid_600420
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600421: Call_PostDeleteLaunchConfiguration_600408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_600421.validator(path, query, header, formData, body)
  let scheme = call_600421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600421.url(scheme.get, call_600421.host, call_600421.base,
                         call_600421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600421, url, valid)

proc call*(call_600422: Call_PostDeleteLaunchConfiguration_600408;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600423 = newJObject()
  var formData_600424 = newJObject()
  add(formData_600424, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_600423, "Action", newJString(Action))
  add(query_600423, "Version", newJString(Version))
  result = call_600422.call(nil, query_600423, nil, formData_600424, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_600408(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_600409, base: "/",
    url: url_PostDeleteLaunchConfiguration_600410,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_600392 = ref object of OpenApiRestCall_599368
proc url_GetDeleteLaunchConfiguration_600394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLaunchConfiguration_600393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_600395 = query.getOrDefault("LaunchConfigurationName")
  valid_600395 = validateParameter(valid_600395, JString, required = true,
                                 default = nil)
  if valid_600395 != nil:
    section.add "LaunchConfigurationName", valid_600395
  var valid_600396 = query.getOrDefault("Action")
  valid_600396 = validateParameter(valid_600396, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_600396 != nil:
    section.add "Action", valid_600396
  var valid_600397 = query.getOrDefault("Version")
  valid_600397 = validateParameter(valid_600397, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600397 != nil:
    section.add "Version", valid_600397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600398 = header.getOrDefault("X-Amz-Date")
  valid_600398 = validateParameter(valid_600398, JString, required = false,
                                 default = nil)
  if valid_600398 != nil:
    section.add "X-Amz-Date", valid_600398
  var valid_600399 = header.getOrDefault("X-Amz-Security-Token")
  valid_600399 = validateParameter(valid_600399, JString, required = false,
                                 default = nil)
  if valid_600399 != nil:
    section.add "X-Amz-Security-Token", valid_600399
  var valid_600400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600400 = validateParameter(valid_600400, JString, required = false,
                                 default = nil)
  if valid_600400 != nil:
    section.add "X-Amz-Content-Sha256", valid_600400
  var valid_600401 = header.getOrDefault("X-Amz-Algorithm")
  valid_600401 = validateParameter(valid_600401, JString, required = false,
                                 default = nil)
  if valid_600401 != nil:
    section.add "X-Amz-Algorithm", valid_600401
  var valid_600402 = header.getOrDefault("X-Amz-Signature")
  valid_600402 = validateParameter(valid_600402, JString, required = false,
                                 default = nil)
  if valid_600402 != nil:
    section.add "X-Amz-Signature", valid_600402
  var valid_600403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600403 = validateParameter(valid_600403, JString, required = false,
                                 default = nil)
  if valid_600403 != nil:
    section.add "X-Amz-SignedHeaders", valid_600403
  var valid_600404 = header.getOrDefault("X-Amz-Credential")
  valid_600404 = validateParameter(valid_600404, JString, required = false,
                                 default = nil)
  if valid_600404 != nil:
    section.add "X-Amz-Credential", valid_600404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600405: Call_GetDeleteLaunchConfiguration_600392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_600405.validator(path, query, header, formData, body)
  let scheme = call_600405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600405.url(scheme.get, call_600405.host, call_600405.base,
                         call_600405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600405, url, valid)

proc call*(call_600406: Call_GetDeleteLaunchConfiguration_600392;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600407 = newJObject()
  add(query_600407, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_600407, "Action", newJString(Action))
  add(query_600407, "Version", newJString(Version))
  result = call_600406.call(nil, query_600407, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_600392(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_600393, base: "/",
    url: url_GetDeleteLaunchConfiguration_600394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_600442 = ref object of OpenApiRestCall_599368
proc url_PostDeleteLifecycleHook_600444(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLifecycleHook_600443(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600445 = query.getOrDefault("Action")
  valid_600445 = validateParameter(valid_600445, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_600445 != nil:
    section.add "Action", valid_600445
  var valid_600446 = query.getOrDefault("Version")
  valid_600446 = validateParameter(valid_600446, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600446 != nil:
    section.add "Version", valid_600446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600447 = header.getOrDefault("X-Amz-Date")
  valid_600447 = validateParameter(valid_600447, JString, required = false,
                                 default = nil)
  if valid_600447 != nil:
    section.add "X-Amz-Date", valid_600447
  var valid_600448 = header.getOrDefault("X-Amz-Security-Token")
  valid_600448 = validateParameter(valid_600448, JString, required = false,
                                 default = nil)
  if valid_600448 != nil:
    section.add "X-Amz-Security-Token", valid_600448
  var valid_600449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600449 = validateParameter(valid_600449, JString, required = false,
                                 default = nil)
  if valid_600449 != nil:
    section.add "X-Amz-Content-Sha256", valid_600449
  var valid_600450 = header.getOrDefault("X-Amz-Algorithm")
  valid_600450 = validateParameter(valid_600450, JString, required = false,
                                 default = nil)
  if valid_600450 != nil:
    section.add "X-Amz-Algorithm", valid_600450
  var valid_600451 = header.getOrDefault("X-Amz-Signature")
  valid_600451 = validateParameter(valid_600451, JString, required = false,
                                 default = nil)
  if valid_600451 != nil:
    section.add "X-Amz-Signature", valid_600451
  var valid_600452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600452 = validateParameter(valid_600452, JString, required = false,
                                 default = nil)
  if valid_600452 != nil:
    section.add "X-Amz-SignedHeaders", valid_600452
  var valid_600453 = header.getOrDefault("X-Amz-Credential")
  valid_600453 = validateParameter(valid_600453, JString, required = false,
                                 default = nil)
  if valid_600453 != nil:
    section.add "X-Amz-Credential", valid_600453
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600454 = formData.getOrDefault("AutoScalingGroupName")
  valid_600454 = validateParameter(valid_600454, JString, required = true,
                                 default = nil)
  if valid_600454 != nil:
    section.add "AutoScalingGroupName", valid_600454
  var valid_600455 = formData.getOrDefault("LifecycleHookName")
  valid_600455 = validateParameter(valid_600455, JString, required = true,
                                 default = nil)
  if valid_600455 != nil:
    section.add "LifecycleHookName", valid_600455
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600456: Call_PostDeleteLifecycleHook_600442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_600456.validator(path, query, header, formData, body)
  let scheme = call_600456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600456.url(scheme.get, call_600456.host, call_600456.base,
                         call_600456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600456, url, valid)

proc call*(call_600457: Call_PostDeleteLifecycleHook_600442;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_600458 = newJObject()
  var formData_600459 = newJObject()
  add(formData_600459, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600458, "Action", newJString(Action))
  add(formData_600459, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_600458, "Version", newJString(Version))
  result = call_600457.call(nil, query_600458, nil, formData_600459, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_600442(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_600443, base: "/",
    url: url_PostDeleteLifecycleHook_600444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_600425 = ref object of OpenApiRestCall_599368
proc url_GetDeleteLifecycleHook_600427(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLifecycleHook_600426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600428 = query.getOrDefault("AutoScalingGroupName")
  valid_600428 = validateParameter(valid_600428, JString, required = true,
                                 default = nil)
  if valid_600428 != nil:
    section.add "AutoScalingGroupName", valid_600428
  var valid_600429 = query.getOrDefault("Action")
  valid_600429 = validateParameter(valid_600429, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_600429 != nil:
    section.add "Action", valid_600429
  var valid_600430 = query.getOrDefault("LifecycleHookName")
  valid_600430 = validateParameter(valid_600430, JString, required = true,
                                 default = nil)
  if valid_600430 != nil:
    section.add "LifecycleHookName", valid_600430
  var valid_600431 = query.getOrDefault("Version")
  valid_600431 = validateParameter(valid_600431, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600431 != nil:
    section.add "Version", valid_600431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600432 = header.getOrDefault("X-Amz-Date")
  valid_600432 = validateParameter(valid_600432, JString, required = false,
                                 default = nil)
  if valid_600432 != nil:
    section.add "X-Amz-Date", valid_600432
  var valid_600433 = header.getOrDefault("X-Amz-Security-Token")
  valid_600433 = validateParameter(valid_600433, JString, required = false,
                                 default = nil)
  if valid_600433 != nil:
    section.add "X-Amz-Security-Token", valid_600433
  var valid_600434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600434 = validateParameter(valid_600434, JString, required = false,
                                 default = nil)
  if valid_600434 != nil:
    section.add "X-Amz-Content-Sha256", valid_600434
  var valid_600435 = header.getOrDefault("X-Amz-Algorithm")
  valid_600435 = validateParameter(valid_600435, JString, required = false,
                                 default = nil)
  if valid_600435 != nil:
    section.add "X-Amz-Algorithm", valid_600435
  var valid_600436 = header.getOrDefault("X-Amz-Signature")
  valid_600436 = validateParameter(valid_600436, JString, required = false,
                                 default = nil)
  if valid_600436 != nil:
    section.add "X-Amz-Signature", valid_600436
  var valid_600437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600437 = validateParameter(valid_600437, JString, required = false,
                                 default = nil)
  if valid_600437 != nil:
    section.add "X-Amz-SignedHeaders", valid_600437
  var valid_600438 = header.getOrDefault("X-Amz-Credential")
  valid_600438 = validateParameter(valid_600438, JString, required = false,
                                 default = nil)
  if valid_600438 != nil:
    section.add "X-Amz-Credential", valid_600438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600439: Call_GetDeleteLifecycleHook_600425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_600439.validator(path, query, header, formData, body)
  let scheme = call_600439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600439.url(scheme.get, call_600439.host, call_600439.base,
                         call_600439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600439, url, valid)

proc call*(call_600440: Call_GetDeleteLifecycleHook_600425;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_600441 = newJObject()
  add(query_600441, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600441, "Action", newJString(Action))
  add(query_600441, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_600441, "Version", newJString(Version))
  result = call_600440.call(nil, query_600441, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_600425(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_600426, base: "/",
    url: url_GetDeleteLifecycleHook_600427, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_600477 = ref object of OpenApiRestCall_599368
proc url_PostDeleteNotificationConfiguration_600479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteNotificationConfiguration_600478(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600480 = query.getOrDefault("Action")
  valid_600480 = validateParameter(valid_600480, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_600480 != nil:
    section.add "Action", valid_600480
  var valid_600481 = query.getOrDefault("Version")
  valid_600481 = validateParameter(valid_600481, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600481 != nil:
    section.add "Version", valid_600481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600482 = header.getOrDefault("X-Amz-Date")
  valid_600482 = validateParameter(valid_600482, JString, required = false,
                                 default = nil)
  if valid_600482 != nil:
    section.add "X-Amz-Date", valid_600482
  var valid_600483 = header.getOrDefault("X-Amz-Security-Token")
  valid_600483 = validateParameter(valid_600483, JString, required = false,
                                 default = nil)
  if valid_600483 != nil:
    section.add "X-Amz-Security-Token", valid_600483
  var valid_600484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600484 = validateParameter(valid_600484, JString, required = false,
                                 default = nil)
  if valid_600484 != nil:
    section.add "X-Amz-Content-Sha256", valid_600484
  var valid_600485 = header.getOrDefault("X-Amz-Algorithm")
  valid_600485 = validateParameter(valid_600485, JString, required = false,
                                 default = nil)
  if valid_600485 != nil:
    section.add "X-Amz-Algorithm", valid_600485
  var valid_600486 = header.getOrDefault("X-Amz-Signature")
  valid_600486 = validateParameter(valid_600486, JString, required = false,
                                 default = nil)
  if valid_600486 != nil:
    section.add "X-Amz-Signature", valid_600486
  var valid_600487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600487 = validateParameter(valid_600487, JString, required = false,
                                 default = nil)
  if valid_600487 != nil:
    section.add "X-Amz-SignedHeaders", valid_600487
  var valid_600488 = header.getOrDefault("X-Amz-Credential")
  valid_600488 = validateParameter(valid_600488, JString, required = false,
                                 default = nil)
  if valid_600488 != nil:
    section.add "X-Amz-Credential", valid_600488
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600489 = formData.getOrDefault("AutoScalingGroupName")
  valid_600489 = validateParameter(valid_600489, JString, required = true,
                                 default = nil)
  if valid_600489 != nil:
    section.add "AutoScalingGroupName", valid_600489
  var valid_600490 = formData.getOrDefault("TopicARN")
  valid_600490 = validateParameter(valid_600490, JString, required = true,
                                 default = nil)
  if valid_600490 != nil:
    section.add "TopicARN", valid_600490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600491: Call_PostDeleteNotificationConfiguration_600477;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_600491.validator(path, query, header, formData, body)
  let scheme = call_600491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600491.url(scheme.get, call_600491.host, call_600491.base,
                         call_600491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600491, url, valid)

proc call*(call_600492: Call_PostDeleteNotificationConfiguration_600477;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600493 = newJObject()
  var formData_600494 = newJObject()
  add(formData_600494, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_600494, "TopicARN", newJString(TopicARN))
  add(query_600493, "Action", newJString(Action))
  add(query_600493, "Version", newJString(Version))
  result = call_600492.call(nil, query_600493, nil, formData_600494, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_600477(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_600478, base: "/",
    url: url_PostDeleteNotificationConfiguration_600479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_600460 = ref object of OpenApiRestCall_599368
proc url_GetDeleteNotificationConfiguration_600462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteNotificationConfiguration_600461(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600463 = query.getOrDefault("AutoScalingGroupName")
  valid_600463 = validateParameter(valid_600463, JString, required = true,
                                 default = nil)
  if valid_600463 != nil:
    section.add "AutoScalingGroupName", valid_600463
  var valid_600464 = query.getOrDefault("Action")
  valid_600464 = validateParameter(valid_600464, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_600464 != nil:
    section.add "Action", valid_600464
  var valid_600465 = query.getOrDefault("TopicARN")
  valid_600465 = validateParameter(valid_600465, JString, required = true,
                                 default = nil)
  if valid_600465 != nil:
    section.add "TopicARN", valid_600465
  var valid_600466 = query.getOrDefault("Version")
  valid_600466 = validateParameter(valid_600466, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600466 != nil:
    section.add "Version", valid_600466
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600467 = header.getOrDefault("X-Amz-Date")
  valid_600467 = validateParameter(valid_600467, JString, required = false,
                                 default = nil)
  if valid_600467 != nil:
    section.add "X-Amz-Date", valid_600467
  var valid_600468 = header.getOrDefault("X-Amz-Security-Token")
  valid_600468 = validateParameter(valid_600468, JString, required = false,
                                 default = nil)
  if valid_600468 != nil:
    section.add "X-Amz-Security-Token", valid_600468
  var valid_600469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600469 = validateParameter(valid_600469, JString, required = false,
                                 default = nil)
  if valid_600469 != nil:
    section.add "X-Amz-Content-Sha256", valid_600469
  var valid_600470 = header.getOrDefault("X-Amz-Algorithm")
  valid_600470 = validateParameter(valid_600470, JString, required = false,
                                 default = nil)
  if valid_600470 != nil:
    section.add "X-Amz-Algorithm", valid_600470
  var valid_600471 = header.getOrDefault("X-Amz-Signature")
  valid_600471 = validateParameter(valid_600471, JString, required = false,
                                 default = nil)
  if valid_600471 != nil:
    section.add "X-Amz-Signature", valid_600471
  var valid_600472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600472 = validateParameter(valid_600472, JString, required = false,
                                 default = nil)
  if valid_600472 != nil:
    section.add "X-Amz-SignedHeaders", valid_600472
  var valid_600473 = header.getOrDefault("X-Amz-Credential")
  valid_600473 = validateParameter(valid_600473, JString, required = false,
                                 default = nil)
  if valid_600473 != nil:
    section.add "X-Amz-Credential", valid_600473
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600474: Call_GetDeleteNotificationConfiguration_600460;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_600474.validator(path, query, header, formData, body)
  let scheme = call_600474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600474.url(scheme.get, call_600474.host, call_600474.base,
                         call_600474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600474, url, valid)

proc call*(call_600475: Call_GetDeleteNotificationConfiguration_600460;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_600476 = newJObject()
  add(query_600476, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600476, "Action", newJString(Action))
  add(query_600476, "TopicARN", newJString(TopicARN))
  add(query_600476, "Version", newJString(Version))
  result = call_600475.call(nil, query_600476, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_600460(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_600461, base: "/",
    url: url_GetDeleteNotificationConfiguration_600462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_600512 = ref object of OpenApiRestCall_599368
proc url_PostDeletePolicy_600514(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_600513(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600515 = query.getOrDefault("Action")
  valid_600515 = validateParameter(valid_600515, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_600515 != nil:
    section.add "Action", valid_600515
  var valid_600516 = query.getOrDefault("Version")
  valid_600516 = validateParameter(valid_600516, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600516 != nil:
    section.add "Version", valid_600516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600517 = header.getOrDefault("X-Amz-Date")
  valid_600517 = validateParameter(valid_600517, JString, required = false,
                                 default = nil)
  if valid_600517 != nil:
    section.add "X-Amz-Date", valid_600517
  var valid_600518 = header.getOrDefault("X-Amz-Security-Token")
  valid_600518 = validateParameter(valid_600518, JString, required = false,
                                 default = nil)
  if valid_600518 != nil:
    section.add "X-Amz-Security-Token", valid_600518
  var valid_600519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600519 = validateParameter(valid_600519, JString, required = false,
                                 default = nil)
  if valid_600519 != nil:
    section.add "X-Amz-Content-Sha256", valid_600519
  var valid_600520 = header.getOrDefault("X-Amz-Algorithm")
  valid_600520 = validateParameter(valid_600520, JString, required = false,
                                 default = nil)
  if valid_600520 != nil:
    section.add "X-Amz-Algorithm", valid_600520
  var valid_600521 = header.getOrDefault("X-Amz-Signature")
  valid_600521 = validateParameter(valid_600521, JString, required = false,
                                 default = nil)
  if valid_600521 != nil:
    section.add "X-Amz-Signature", valid_600521
  var valid_600522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600522 = validateParameter(valid_600522, JString, required = false,
                                 default = nil)
  if valid_600522 != nil:
    section.add "X-Amz-SignedHeaders", valid_600522
  var valid_600523 = header.getOrDefault("X-Amz-Credential")
  valid_600523 = validateParameter(valid_600523, JString, required = false,
                                 default = nil)
  if valid_600523 != nil:
    section.add "X-Amz-Credential", valid_600523
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_600524 = formData.getOrDefault("AutoScalingGroupName")
  valid_600524 = validateParameter(valid_600524, JString, required = false,
                                 default = nil)
  if valid_600524 != nil:
    section.add "AutoScalingGroupName", valid_600524
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_600525 = formData.getOrDefault("PolicyName")
  valid_600525 = validateParameter(valid_600525, JString, required = true,
                                 default = nil)
  if valid_600525 != nil:
    section.add "PolicyName", valid_600525
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600526: Call_PostDeletePolicy_600512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600526.validator(path, query, header, formData, body)
  let scheme = call_600526.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600526.url(scheme.get, call_600526.host, call_600526.base,
                         call_600526.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600526, url, valid)

proc call*(call_600527: Call_PostDeletePolicy_600512; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600528 = newJObject()
  var formData_600529 = newJObject()
  add(formData_600529, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_600529, "PolicyName", newJString(PolicyName))
  add(query_600528, "Action", newJString(Action))
  add(query_600528, "Version", newJString(Version))
  result = call_600527.call(nil, query_600528, nil, formData_600529, nil)

var postDeletePolicy* = Call_PostDeletePolicy_600512(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_600513,
    base: "/", url: url_PostDeletePolicy_600514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_600495 = ref object of OpenApiRestCall_599368
proc url_GetDeletePolicy_600497(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_600496(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_600498 = query.getOrDefault("AutoScalingGroupName")
  valid_600498 = validateParameter(valid_600498, JString, required = false,
                                 default = nil)
  if valid_600498 != nil:
    section.add "AutoScalingGroupName", valid_600498
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600499 = query.getOrDefault("Action")
  valid_600499 = validateParameter(valid_600499, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_600499 != nil:
    section.add "Action", valid_600499
  var valid_600500 = query.getOrDefault("Version")
  valid_600500 = validateParameter(valid_600500, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600500 != nil:
    section.add "Version", valid_600500
  var valid_600501 = query.getOrDefault("PolicyName")
  valid_600501 = validateParameter(valid_600501, JString, required = true,
                                 default = nil)
  if valid_600501 != nil:
    section.add "PolicyName", valid_600501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600502 = header.getOrDefault("X-Amz-Date")
  valid_600502 = validateParameter(valid_600502, JString, required = false,
                                 default = nil)
  if valid_600502 != nil:
    section.add "X-Amz-Date", valid_600502
  var valid_600503 = header.getOrDefault("X-Amz-Security-Token")
  valid_600503 = validateParameter(valid_600503, JString, required = false,
                                 default = nil)
  if valid_600503 != nil:
    section.add "X-Amz-Security-Token", valid_600503
  var valid_600504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600504 = validateParameter(valid_600504, JString, required = false,
                                 default = nil)
  if valid_600504 != nil:
    section.add "X-Amz-Content-Sha256", valid_600504
  var valid_600505 = header.getOrDefault("X-Amz-Algorithm")
  valid_600505 = validateParameter(valid_600505, JString, required = false,
                                 default = nil)
  if valid_600505 != nil:
    section.add "X-Amz-Algorithm", valid_600505
  var valid_600506 = header.getOrDefault("X-Amz-Signature")
  valid_600506 = validateParameter(valid_600506, JString, required = false,
                                 default = nil)
  if valid_600506 != nil:
    section.add "X-Amz-Signature", valid_600506
  var valid_600507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600507 = validateParameter(valid_600507, JString, required = false,
                                 default = nil)
  if valid_600507 != nil:
    section.add "X-Amz-SignedHeaders", valid_600507
  var valid_600508 = header.getOrDefault("X-Amz-Credential")
  valid_600508 = validateParameter(valid_600508, JString, required = false,
                                 default = nil)
  if valid_600508 != nil:
    section.add "X-Amz-Credential", valid_600508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600509: Call_GetDeletePolicy_600495; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600509.validator(path, query, header, formData, body)
  let scheme = call_600509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600509.url(scheme.get, call_600509.host, call_600509.base,
                         call_600509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600509, url, valid)

proc call*(call_600510: Call_GetDeletePolicy_600495; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_600511 = newJObject()
  add(query_600511, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600511, "Action", newJString(Action))
  add(query_600511, "Version", newJString(Version))
  add(query_600511, "PolicyName", newJString(PolicyName))
  result = call_600510.call(nil, query_600511, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_600495(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_600496,
    base: "/", url: url_GetDeletePolicy_600497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_600547 = ref object of OpenApiRestCall_599368
proc url_PostDeleteScheduledAction_600549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteScheduledAction_600548(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600550 = query.getOrDefault("Action")
  valid_600550 = validateParameter(valid_600550, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_600550 != nil:
    section.add "Action", valid_600550
  var valid_600551 = query.getOrDefault("Version")
  valid_600551 = validateParameter(valid_600551, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600551 != nil:
    section.add "Version", valid_600551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600552 = header.getOrDefault("X-Amz-Date")
  valid_600552 = validateParameter(valid_600552, JString, required = false,
                                 default = nil)
  if valid_600552 != nil:
    section.add "X-Amz-Date", valid_600552
  var valid_600553 = header.getOrDefault("X-Amz-Security-Token")
  valid_600553 = validateParameter(valid_600553, JString, required = false,
                                 default = nil)
  if valid_600553 != nil:
    section.add "X-Amz-Security-Token", valid_600553
  var valid_600554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600554 = validateParameter(valid_600554, JString, required = false,
                                 default = nil)
  if valid_600554 != nil:
    section.add "X-Amz-Content-Sha256", valid_600554
  var valid_600555 = header.getOrDefault("X-Amz-Algorithm")
  valid_600555 = validateParameter(valid_600555, JString, required = false,
                                 default = nil)
  if valid_600555 != nil:
    section.add "X-Amz-Algorithm", valid_600555
  var valid_600556 = header.getOrDefault("X-Amz-Signature")
  valid_600556 = validateParameter(valid_600556, JString, required = false,
                                 default = nil)
  if valid_600556 != nil:
    section.add "X-Amz-Signature", valid_600556
  var valid_600557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600557 = validateParameter(valid_600557, JString, required = false,
                                 default = nil)
  if valid_600557 != nil:
    section.add "X-Amz-SignedHeaders", valid_600557
  var valid_600558 = header.getOrDefault("X-Amz-Credential")
  valid_600558 = validateParameter(valid_600558, JString, required = false,
                                 default = nil)
  if valid_600558 != nil:
    section.add "X-Amz-Credential", valid_600558
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600559 = formData.getOrDefault("AutoScalingGroupName")
  valid_600559 = validateParameter(valid_600559, JString, required = true,
                                 default = nil)
  if valid_600559 != nil:
    section.add "AutoScalingGroupName", valid_600559
  var valid_600560 = formData.getOrDefault("ScheduledActionName")
  valid_600560 = validateParameter(valid_600560, JString, required = true,
                                 default = nil)
  if valid_600560 != nil:
    section.add "ScheduledActionName", valid_600560
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600561: Call_PostDeleteScheduledAction_600547; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_600561.validator(path, query, header, formData, body)
  let scheme = call_600561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600561.url(scheme.get, call_600561.host, call_600561.base,
                         call_600561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600561, url, valid)

proc call*(call_600562: Call_PostDeleteScheduledAction_600547;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Version: string (required)
  var query_600563 = newJObject()
  var formData_600564 = newJObject()
  add(formData_600564, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600563, "Action", newJString(Action))
  add(formData_600564, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_600563, "Version", newJString(Version))
  result = call_600562.call(nil, query_600563, nil, formData_600564, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_600547(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_600548, base: "/",
    url: url_PostDeleteScheduledAction_600549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_600530 = ref object of OpenApiRestCall_599368
proc url_GetDeleteScheduledAction_600532(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteScheduledAction_600531(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_600533 = query.getOrDefault("ScheduledActionName")
  valid_600533 = validateParameter(valid_600533, JString, required = true,
                                 default = nil)
  if valid_600533 != nil:
    section.add "ScheduledActionName", valid_600533
  var valid_600534 = query.getOrDefault("AutoScalingGroupName")
  valid_600534 = validateParameter(valid_600534, JString, required = true,
                                 default = nil)
  if valid_600534 != nil:
    section.add "AutoScalingGroupName", valid_600534
  var valid_600535 = query.getOrDefault("Action")
  valid_600535 = validateParameter(valid_600535, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_600535 != nil:
    section.add "Action", valid_600535
  var valid_600536 = query.getOrDefault("Version")
  valid_600536 = validateParameter(valid_600536, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600536 != nil:
    section.add "Version", valid_600536
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600537 = header.getOrDefault("X-Amz-Date")
  valid_600537 = validateParameter(valid_600537, JString, required = false,
                                 default = nil)
  if valid_600537 != nil:
    section.add "X-Amz-Date", valid_600537
  var valid_600538 = header.getOrDefault("X-Amz-Security-Token")
  valid_600538 = validateParameter(valid_600538, JString, required = false,
                                 default = nil)
  if valid_600538 != nil:
    section.add "X-Amz-Security-Token", valid_600538
  var valid_600539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600539 = validateParameter(valid_600539, JString, required = false,
                                 default = nil)
  if valid_600539 != nil:
    section.add "X-Amz-Content-Sha256", valid_600539
  var valid_600540 = header.getOrDefault("X-Amz-Algorithm")
  valid_600540 = validateParameter(valid_600540, JString, required = false,
                                 default = nil)
  if valid_600540 != nil:
    section.add "X-Amz-Algorithm", valid_600540
  var valid_600541 = header.getOrDefault("X-Amz-Signature")
  valid_600541 = validateParameter(valid_600541, JString, required = false,
                                 default = nil)
  if valid_600541 != nil:
    section.add "X-Amz-Signature", valid_600541
  var valid_600542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600542 = validateParameter(valid_600542, JString, required = false,
                                 default = nil)
  if valid_600542 != nil:
    section.add "X-Amz-SignedHeaders", valid_600542
  var valid_600543 = header.getOrDefault("X-Amz-Credential")
  valid_600543 = validateParameter(valid_600543, JString, required = false,
                                 default = nil)
  if valid_600543 != nil:
    section.add "X-Amz-Credential", valid_600543
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600544: Call_GetDeleteScheduledAction_600530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_600544.validator(path, query, header, formData, body)
  let scheme = call_600544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600544.url(scheme.get, call_600544.host, call_600544.base,
                         call_600544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600544, url, valid)

proc call*(call_600545: Call_GetDeleteScheduledAction_600530;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600546 = newJObject()
  add(query_600546, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_600546, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600546, "Action", newJString(Action))
  add(query_600546, "Version", newJString(Version))
  result = call_600545.call(nil, query_600546, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_600530(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_600531, base: "/",
    url: url_GetDeleteScheduledAction_600532, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_600581 = ref object of OpenApiRestCall_599368
proc url_PostDeleteTags_600583(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTags_600582(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600584 = query.getOrDefault("Action")
  valid_600584 = validateParameter(valid_600584, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_600584 != nil:
    section.add "Action", valid_600584
  var valid_600585 = query.getOrDefault("Version")
  valid_600585 = validateParameter(valid_600585, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600585 != nil:
    section.add "Version", valid_600585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600586 = header.getOrDefault("X-Amz-Date")
  valid_600586 = validateParameter(valid_600586, JString, required = false,
                                 default = nil)
  if valid_600586 != nil:
    section.add "X-Amz-Date", valid_600586
  var valid_600587 = header.getOrDefault("X-Amz-Security-Token")
  valid_600587 = validateParameter(valid_600587, JString, required = false,
                                 default = nil)
  if valid_600587 != nil:
    section.add "X-Amz-Security-Token", valid_600587
  var valid_600588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600588 = validateParameter(valid_600588, JString, required = false,
                                 default = nil)
  if valid_600588 != nil:
    section.add "X-Amz-Content-Sha256", valid_600588
  var valid_600589 = header.getOrDefault("X-Amz-Algorithm")
  valid_600589 = validateParameter(valid_600589, JString, required = false,
                                 default = nil)
  if valid_600589 != nil:
    section.add "X-Amz-Algorithm", valid_600589
  var valid_600590 = header.getOrDefault("X-Amz-Signature")
  valid_600590 = validateParameter(valid_600590, JString, required = false,
                                 default = nil)
  if valid_600590 != nil:
    section.add "X-Amz-Signature", valid_600590
  var valid_600591 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600591 = validateParameter(valid_600591, JString, required = false,
                                 default = nil)
  if valid_600591 != nil:
    section.add "X-Amz-SignedHeaders", valid_600591
  var valid_600592 = header.getOrDefault("X-Amz-Credential")
  valid_600592 = validateParameter(valid_600592, JString, required = false,
                                 default = nil)
  if valid_600592 != nil:
    section.add "X-Amz-Credential", valid_600592
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_600593 = formData.getOrDefault("Tags")
  valid_600593 = validateParameter(valid_600593, JArray, required = true, default = nil)
  if valid_600593 != nil:
    section.add "Tags", valid_600593
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600594: Call_PostDeleteTags_600581; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_600594.validator(path, query, header, formData, body)
  let scheme = call_600594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600594.url(scheme.get, call_600594.host, call_600594.base,
                         call_600594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600594, url, valid)

proc call*(call_600595: Call_PostDeleteTags_600581; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600596 = newJObject()
  var formData_600597 = newJObject()
  if Tags != nil:
    formData_600597.add "Tags", Tags
  add(query_600596, "Action", newJString(Action))
  add(query_600596, "Version", newJString(Version))
  result = call_600595.call(nil, query_600596, nil, formData_600597, nil)

var postDeleteTags* = Call_PostDeleteTags_600581(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_600582,
    base: "/", url: url_PostDeleteTags_600583, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_600565 = ref object of OpenApiRestCall_599368
proc url_GetDeleteTags_600567(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTags_600566(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_600568 = query.getOrDefault("Tags")
  valid_600568 = validateParameter(valid_600568, JArray, required = true, default = nil)
  if valid_600568 != nil:
    section.add "Tags", valid_600568
  var valid_600569 = query.getOrDefault("Action")
  valid_600569 = validateParameter(valid_600569, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_600569 != nil:
    section.add "Action", valid_600569
  var valid_600570 = query.getOrDefault("Version")
  valid_600570 = validateParameter(valid_600570, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600570 != nil:
    section.add "Version", valid_600570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600571 = header.getOrDefault("X-Amz-Date")
  valid_600571 = validateParameter(valid_600571, JString, required = false,
                                 default = nil)
  if valid_600571 != nil:
    section.add "X-Amz-Date", valid_600571
  var valid_600572 = header.getOrDefault("X-Amz-Security-Token")
  valid_600572 = validateParameter(valid_600572, JString, required = false,
                                 default = nil)
  if valid_600572 != nil:
    section.add "X-Amz-Security-Token", valid_600572
  var valid_600573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600573 = validateParameter(valid_600573, JString, required = false,
                                 default = nil)
  if valid_600573 != nil:
    section.add "X-Amz-Content-Sha256", valid_600573
  var valid_600574 = header.getOrDefault("X-Amz-Algorithm")
  valid_600574 = validateParameter(valid_600574, JString, required = false,
                                 default = nil)
  if valid_600574 != nil:
    section.add "X-Amz-Algorithm", valid_600574
  var valid_600575 = header.getOrDefault("X-Amz-Signature")
  valid_600575 = validateParameter(valid_600575, JString, required = false,
                                 default = nil)
  if valid_600575 != nil:
    section.add "X-Amz-Signature", valid_600575
  var valid_600576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600576 = validateParameter(valid_600576, JString, required = false,
                                 default = nil)
  if valid_600576 != nil:
    section.add "X-Amz-SignedHeaders", valid_600576
  var valid_600577 = header.getOrDefault("X-Amz-Credential")
  valid_600577 = validateParameter(valid_600577, JString, required = false,
                                 default = nil)
  if valid_600577 != nil:
    section.add "X-Amz-Credential", valid_600577
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600578: Call_GetDeleteTags_600565; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_600578.validator(path, query, header, formData, body)
  let scheme = call_600578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600578.url(scheme.get, call_600578.host, call_600578.base,
                         call_600578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600578, url, valid)

proc call*(call_600579: Call_GetDeleteTags_600565; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600580 = newJObject()
  if Tags != nil:
    query_600580.add "Tags", Tags
  add(query_600580, "Action", newJString(Action))
  add(query_600580, "Version", newJString(Version))
  result = call_600579.call(nil, query_600580, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_600565(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_600566,
    base: "/", url: url_GetDeleteTags_600567, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_600613 = ref object of OpenApiRestCall_599368
proc url_PostDescribeAccountLimits_600615(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountLimits_600614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600616 = query.getOrDefault("Action")
  valid_600616 = validateParameter(valid_600616, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_600616 != nil:
    section.add "Action", valid_600616
  var valid_600617 = query.getOrDefault("Version")
  valid_600617 = validateParameter(valid_600617, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600617 != nil:
    section.add "Version", valid_600617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600618 = header.getOrDefault("X-Amz-Date")
  valid_600618 = validateParameter(valid_600618, JString, required = false,
                                 default = nil)
  if valid_600618 != nil:
    section.add "X-Amz-Date", valid_600618
  var valid_600619 = header.getOrDefault("X-Amz-Security-Token")
  valid_600619 = validateParameter(valid_600619, JString, required = false,
                                 default = nil)
  if valid_600619 != nil:
    section.add "X-Amz-Security-Token", valid_600619
  var valid_600620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600620 = validateParameter(valid_600620, JString, required = false,
                                 default = nil)
  if valid_600620 != nil:
    section.add "X-Amz-Content-Sha256", valid_600620
  var valid_600621 = header.getOrDefault("X-Amz-Algorithm")
  valid_600621 = validateParameter(valid_600621, JString, required = false,
                                 default = nil)
  if valid_600621 != nil:
    section.add "X-Amz-Algorithm", valid_600621
  var valid_600622 = header.getOrDefault("X-Amz-Signature")
  valid_600622 = validateParameter(valid_600622, JString, required = false,
                                 default = nil)
  if valid_600622 != nil:
    section.add "X-Amz-Signature", valid_600622
  var valid_600623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600623 = validateParameter(valid_600623, JString, required = false,
                                 default = nil)
  if valid_600623 != nil:
    section.add "X-Amz-SignedHeaders", valid_600623
  var valid_600624 = header.getOrDefault("X-Amz-Credential")
  valid_600624 = validateParameter(valid_600624, JString, required = false,
                                 default = nil)
  if valid_600624 != nil:
    section.add "X-Amz-Credential", valid_600624
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600625: Call_PostDescribeAccountLimits_600613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600625.validator(path, query, header, formData, body)
  let scheme = call_600625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600625.url(scheme.get, call_600625.host, call_600625.base,
                         call_600625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600625, url, valid)

proc call*(call_600626: Call_PostDescribeAccountLimits_600613;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600627 = newJObject()
  add(query_600627, "Action", newJString(Action))
  add(query_600627, "Version", newJString(Version))
  result = call_600626.call(nil, query_600627, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_600613(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_600614, base: "/",
    url: url_PostDescribeAccountLimits_600615,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_600598 = ref object of OpenApiRestCall_599368
proc url_GetDescribeAccountLimits_600600(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountLimits_600599(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600601 = query.getOrDefault("Action")
  valid_600601 = validateParameter(valid_600601, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_600601 != nil:
    section.add "Action", valid_600601
  var valid_600602 = query.getOrDefault("Version")
  valid_600602 = validateParameter(valid_600602, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600602 != nil:
    section.add "Version", valid_600602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600603 = header.getOrDefault("X-Amz-Date")
  valid_600603 = validateParameter(valid_600603, JString, required = false,
                                 default = nil)
  if valid_600603 != nil:
    section.add "X-Amz-Date", valid_600603
  var valid_600604 = header.getOrDefault("X-Amz-Security-Token")
  valid_600604 = validateParameter(valid_600604, JString, required = false,
                                 default = nil)
  if valid_600604 != nil:
    section.add "X-Amz-Security-Token", valid_600604
  var valid_600605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600605 = validateParameter(valid_600605, JString, required = false,
                                 default = nil)
  if valid_600605 != nil:
    section.add "X-Amz-Content-Sha256", valid_600605
  var valid_600606 = header.getOrDefault("X-Amz-Algorithm")
  valid_600606 = validateParameter(valid_600606, JString, required = false,
                                 default = nil)
  if valid_600606 != nil:
    section.add "X-Amz-Algorithm", valid_600606
  var valid_600607 = header.getOrDefault("X-Amz-Signature")
  valid_600607 = validateParameter(valid_600607, JString, required = false,
                                 default = nil)
  if valid_600607 != nil:
    section.add "X-Amz-Signature", valid_600607
  var valid_600608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600608 = validateParameter(valid_600608, JString, required = false,
                                 default = nil)
  if valid_600608 != nil:
    section.add "X-Amz-SignedHeaders", valid_600608
  var valid_600609 = header.getOrDefault("X-Amz-Credential")
  valid_600609 = validateParameter(valid_600609, JString, required = false,
                                 default = nil)
  if valid_600609 != nil:
    section.add "X-Amz-Credential", valid_600609
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600610: Call_GetDescribeAccountLimits_600598; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_600610.validator(path, query, header, formData, body)
  let scheme = call_600610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600610.url(scheme.get, call_600610.host, call_600610.base,
                         call_600610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600610, url, valid)

proc call*(call_600611: Call_GetDescribeAccountLimits_600598;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600612 = newJObject()
  add(query_600612, "Action", newJString(Action))
  add(query_600612, "Version", newJString(Version))
  result = call_600611.call(nil, query_600612, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_600598(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_600599, base: "/",
    url: url_GetDescribeAccountLimits_600600, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_600643 = ref object of OpenApiRestCall_599368
proc url_PostDescribeAdjustmentTypes_600645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAdjustmentTypes_600644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600646 = query.getOrDefault("Action")
  valid_600646 = validateParameter(valid_600646, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_600646 != nil:
    section.add "Action", valid_600646
  var valid_600647 = query.getOrDefault("Version")
  valid_600647 = validateParameter(valid_600647, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600647 != nil:
    section.add "Version", valid_600647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600648 = header.getOrDefault("X-Amz-Date")
  valid_600648 = validateParameter(valid_600648, JString, required = false,
                                 default = nil)
  if valid_600648 != nil:
    section.add "X-Amz-Date", valid_600648
  var valid_600649 = header.getOrDefault("X-Amz-Security-Token")
  valid_600649 = validateParameter(valid_600649, JString, required = false,
                                 default = nil)
  if valid_600649 != nil:
    section.add "X-Amz-Security-Token", valid_600649
  var valid_600650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600650 = validateParameter(valid_600650, JString, required = false,
                                 default = nil)
  if valid_600650 != nil:
    section.add "X-Amz-Content-Sha256", valid_600650
  var valid_600651 = header.getOrDefault("X-Amz-Algorithm")
  valid_600651 = validateParameter(valid_600651, JString, required = false,
                                 default = nil)
  if valid_600651 != nil:
    section.add "X-Amz-Algorithm", valid_600651
  var valid_600652 = header.getOrDefault("X-Amz-Signature")
  valid_600652 = validateParameter(valid_600652, JString, required = false,
                                 default = nil)
  if valid_600652 != nil:
    section.add "X-Amz-Signature", valid_600652
  var valid_600653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600653 = validateParameter(valid_600653, JString, required = false,
                                 default = nil)
  if valid_600653 != nil:
    section.add "X-Amz-SignedHeaders", valid_600653
  var valid_600654 = header.getOrDefault("X-Amz-Credential")
  valid_600654 = validateParameter(valid_600654, JString, required = false,
                                 default = nil)
  if valid_600654 != nil:
    section.add "X-Amz-Credential", valid_600654
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600655: Call_PostDescribeAdjustmentTypes_600643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_600655.validator(path, query, header, formData, body)
  let scheme = call_600655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600655.url(scheme.get, call_600655.host, call_600655.base,
                         call_600655.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600655, url, valid)

proc call*(call_600656: Call_PostDescribeAdjustmentTypes_600643;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600657 = newJObject()
  add(query_600657, "Action", newJString(Action))
  add(query_600657, "Version", newJString(Version))
  result = call_600656.call(nil, query_600657, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_600643(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_600644, base: "/",
    url: url_PostDescribeAdjustmentTypes_600645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_600628 = ref object of OpenApiRestCall_599368
proc url_GetDescribeAdjustmentTypes_600630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAdjustmentTypes_600629(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600631 = query.getOrDefault("Action")
  valid_600631 = validateParameter(valid_600631, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_600631 != nil:
    section.add "Action", valid_600631
  var valid_600632 = query.getOrDefault("Version")
  valid_600632 = validateParameter(valid_600632, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600632 != nil:
    section.add "Version", valid_600632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600633 = header.getOrDefault("X-Amz-Date")
  valid_600633 = validateParameter(valid_600633, JString, required = false,
                                 default = nil)
  if valid_600633 != nil:
    section.add "X-Amz-Date", valid_600633
  var valid_600634 = header.getOrDefault("X-Amz-Security-Token")
  valid_600634 = validateParameter(valid_600634, JString, required = false,
                                 default = nil)
  if valid_600634 != nil:
    section.add "X-Amz-Security-Token", valid_600634
  var valid_600635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600635 = validateParameter(valid_600635, JString, required = false,
                                 default = nil)
  if valid_600635 != nil:
    section.add "X-Amz-Content-Sha256", valid_600635
  var valid_600636 = header.getOrDefault("X-Amz-Algorithm")
  valid_600636 = validateParameter(valid_600636, JString, required = false,
                                 default = nil)
  if valid_600636 != nil:
    section.add "X-Amz-Algorithm", valid_600636
  var valid_600637 = header.getOrDefault("X-Amz-Signature")
  valid_600637 = validateParameter(valid_600637, JString, required = false,
                                 default = nil)
  if valid_600637 != nil:
    section.add "X-Amz-Signature", valid_600637
  var valid_600638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600638 = validateParameter(valid_600638, JString, required = false,
                                 default = nil)
  if valid_600638 != nil:
    section.add "X-Amz-SignedHeaders", valid_600638
  var valid_600639 = header.getOrDefault("X-Amz-Credential")
  valid_600639 = validateParameter(valid_600639, JString, required = false,
                                 default = nil)
  if valid_600639 != nil:
    section.add "X-Amz-Credential", valid_600639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600640: Call_GetDescribeAdjustmentTypes_600628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_600640.validator(path, query, header, formData, body)
  let scheme = call_600640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600640.url(scheme.get, call_600640.host, call_600640.base,
                         call_600640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600640, url, valid)

proc call*(call_600641: Call_GetDescribeAdjustmentTypes_600628;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600642 = newJObject()
  add(query_600642, "Action", newJString(Action))
  add(query_600642, "Version", newJString(Version))
  result = call_600641.call(nil, query_600642, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_600628(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_600629, base: "/",
    url: url_GetDescribeAdjustmentTypes_600630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_600676 = ref object of OpenApiRestCall_599368
proc url_PostDescribeAutoScalingGroups_600678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingGroups_600677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600679 = query.getOrDefault("Action")
  valid_600679 = validateParameter(valid_600679, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_600679 != nil:
    section.add "Action", valid_600679
  var valid_600680 = query.getOrDefault("Version")
  valid_600680 = validateParameter(valid_600680, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600680 != nil:
    section.add "Version", valid_600680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600681 = header.getOrDefault("X-Amz-Date")
  valid_600681 = validateParameter(valid_600681, JString, required = false,
                                 default = nil)
  if valid_600681 != nil:
    section.add "X-Amz-Date", valid_600681
  var valid_600682 = header.getOrDefault("X-Amz-Security-Token")
  valid_600682 = validateParameter(valid_600682, JString, required = false,
                                 default = nil)
  if valid_600682 != nil:
    section.add "X-Amz-Security-Token", valid_600682
  var valid_600683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600683 = validateParameter(valid_600683, JString, required = false,
                                 default = nil)
  if valid_600683 != nil:
    section.add "X-Amz-Content-Sha256", valid_600683
  var valid_600684 = header.getOrDefault("X-Amz-Algorithm")
  valid_600684 = validateParameter(valid_600684, JString, required = false,
                                 default = nil)
  if valid_600684 != nil:
    section.add "X-Amz-Algorithm", valid_600684
  var valid_600685 = header.getOrDefault("X-Amz-Signature")
  valid_600685 = validateParameter(valid_600685, JString, required = false,
                                 default = nil)
  if valid_600685 != nil:
    section.add "X-Amz-Signature", valid_600685
  var valid_600686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600686 = validateParameter(valid_600686, JString, required = false,
                                 default = nil)
  if valid_600686 != nil:
    section.add "X-Amz-SignedHeaders", valid_600686
  var valid_600687 = header.getOrDefault("X-Amz-Credential")
  valid_600687 = validateParameter(valid_600687, JString, required = false,
                                 default = nil)
  if valid_600687 != nil:
    section.add "X-Amz-Credential", valid_600687
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_600688 = formData.getOrDefault("NextToken")
  valid_600688 = validateParameter(valid_600688, JString, required = false,
                                 default = nil)
  if valid_600688 != nil:
    section.add "NextToken", valid_600688
  var valid_600689 = formData.getOrDefault("MaxRecords")
  valid_600689 = validateParameter(valid_600689, JInt, required = false, default = nil)
  if valid_600689 != nil:
    section.add "MaxRecords", valid_600689
  var valid_600690 = formData.getOrDefault("AutoScalingGroupNames")
  valid_600690 = validateParameter(valid_600690, JArray, required = false,
                                 default = nil)
  if valid_600690 != nil:
    section.add "AutoScalingGroupNames", valid_600690
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600691: Call_PostDescribeAutoScalingGroups_600676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_600691.validator(path, query, header, formData, body)
  let scheme = call_600691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600691.url(scheme.get, call_600691.host, call_600691.base,
                         call_600691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600691, url, valid)

proc call*(call_600692: Call_PostDescribeAutoScalingGroups_600676;
          NextToken: string = ""; Action: string = "DescribeAutoScalingGroups";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  var query_600693 = newJObject()
  var formData_600694 = newJObject()
  add(formData_600694, "NextToken", newJString(NextToken))
  add(query_600693, "Action", newJString(Action))
  add(formData_600694, "MaxRecords", newJInt(MaxRecords))
  add(query_600693, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_600694.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_600692.call(nil, query_600693, nil, formData_600694, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_600676(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_600677, base: "/",
    url: url_PostDescribeAutoScalingGroups_600678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_600658 = ref object of OpenApiRestCall_599368
proc url_GetDescribeAutoScalingGroups_600660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingGroups_600659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_600661 = query.getOrDefault("MaxRecords")
  valid_600661 = validateParameter(valid_600661, JInt, required = false, default = nil)
  if valid_600661 != nil:
    section.add "MaxRecords", valid_600661
  var valid_600662 = query.getOrDefault("NextToken")
  valid_600662 = validateParameter(valid_600662, JString, required = false,
                                 default = nil)
  if valid_600662 != nil:
    section.add "NextToken", valid_600662
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600663 = query.getOrDefault("Action")
  valid_600663 = validateParameter(valid_600663, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_600663 != nil:
    section.add "Action", valid_600663
  var valid_600664 = query.getOrDefault("AutoScalingGroupNames")
  valid_600664 = validateParameter(valid_600664, JArray, required = false,
                                 default = nil)
  if valid_600664 != nil:
    section.add "AutoScalingGroupNames", valid_600664
  var valid_600665 = query.getOrDefault("Version")
  valid_600665 = validateParameter(valid_600665, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600665 != nil:
    section.add "Version", valid_600665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600666 = header.getOrDefault("X-Amz-Date")
  valid_600666 = validateParameter(valid_600666, JString, required = false,
                                 default = nil)
  if valid_600666 != nil:
    section.add "X-Amz-Date", valid_600666
  var valid_600667 = header.getOrDefault("X-Amz-Security-Token")
  valid_600667 = validateParameter(valid_600667, JString, required = false,
                                 default = nil)
  if valid_600667 != nil:
    section.add "X-Amz-Security-Token", valid_600667
  var valid_600668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600668 = validateParameter(valid_600668, JString, required = false,
                                 default = nil)
  if valid_600668 != nil:
    section.add "X-Amz-Content-Sha256", valid_600668
  var valid_600669 = header.getOrDefault("X-Amz-Algorithm")
  valid_600669 = validateParameter(valid_600669, JString, required = false,
                                 default = nil)
  if valid_600669 != nil:
    section.add "X-Amz-Algorithm", valid_600669
  var valid_600670 = header.getOrDefault("X-Amz-Signature")
  valid_600670 = validateParameter(valid_600670, JString, required = false,
                                 default = nil)
  if valid_600670 != nil:
    section.add "X-Amz-Signature", valid_600670
  var valid_600671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600671 = validateParameter(valid_600671, JString, required = false,
                                 default = nil)
  if valid_600671 != nil:
    section.add "X-Amz-SignedHeaders", valid_600671
  var valid_600672 = header.getOrDefault("X-Amz-Credential")
  valid_600672 = validateParameter(valid_600672, JString, required = false,
                                 default = nil)
  if valid_600672 != nil:
    section.add "X-Amz-Credential", valid_600672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600673: Call_GetDescribeAutoScalingGroups_600658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_600673.validator(path, query, header, formData, body)
  let scheme = call_600673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600673.url(scheme.get, call_600673.host, call_600673.base,
                         call_600673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600673, url, valid)

proc call*(call_600674: Call_GetDescribeAutoScalingGroups_600658;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingGroups";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Version: string (required)
  var query_600675 = newJObject()
  add(query_600675, "MaxRecords", newJInt(MaxRecords))
  add(query_600675, "NextToken", newJString(NextToken))
  add(query_600675, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_600675.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_600675, "Version", newJString(Version))
  result = call_600674.call(nil, query_600675, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_600658(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_600659, base: "/",
    url: url_GetDescribeAutoScalingGroups_600660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_600713 = ref object of OpenApiRestCall_599368
proc url_PostDescribeAutoScalingInstances_600715(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingInstances_600714(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600716 = query.getOrDefault("Action")
  valid_600716 = validateParameter(valid_600716, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_600716 != nil:
    section.add "Action", valid_600716
  var valid_600717 = query.getOrDefault("Version")
  valid_600717 = validateParameter(valid_600717, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600717 != nil:
    section.add "Version", valid_600717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600718 = header.getOrDefault("X-Amz-Date")
  valid_600718 = validateParameter(valid_600718, JString, required = false,
                                 default = nil)
  if valid_600718 != nil:
    section.add "X-Amz-Date", valid_600718
  var valid_600719 = header.getOrDefault("X-Amz-Security-Token")
  valid_600719 = validateParameter(valid_600719, JString, required = false,
                                 default = nil)
  if valid_600719 != nil:
    section.add "X-Amz-Security-Token", valid_600719
  var valid_600720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600720 = validateParameter(valid_600720, JString, required = false,
                                 default = nil)
  if valid_600720 != nil:
    section.add "X-Amz-Content-Sha256", valid_600720
  var valid_600721 = header.getOrDefault("X-Amz-Algorithm")
  valid_600721 = validateParameter(valid_600721, JString, required = false,
                                 default = nil)
  if valid_600721 != nil:
    section.add "X-Amz-Algorithm", valid_600721
  var valid_600722 = header.getOrDefault("X-Amz-Signature")
  valid_600722 = validateParameter(valid_600722, JString, required = false,
                                 default = nil)
  if valid_600722 != nil:
    section.add "X-Amz-Signature", valid_600722
  var valid_600723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600723 = validateParameter(valid_600723, JString, required = false,
                                 default = nil)
  if valid_600723 != nil:
    section.add "X-Amz-SignedHeaders", valid_600723
  var valid_600724 = header.getOrDefault("X-Amz-Credential")
  valid_600724 = validateParameter(valid_600724, JString, required = false,
                                 default = nil)
  if valid_600724 != nil:
    section.add "X-Amz-Credential", valid_600724
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_600725 = formData.getOrDefault("NextToken")
  valid_600725 = validateParameter(valid_600725, JString, required = false,
                                 default = nil)
  if valid_600725 != nil:
    section.add "NextToken", valid_600725
  var valid_600726 = formData.getOrDefault("InstanceIds")
  valid_600726 = validateParameter(valid_600726, JArray, required = false,
                                 default = nil)
  if valid_600726 != nil:
    section.add "InstanceIds", valid_600726
  var valid_600727 = formData.getOrDefault("MaxRecords")
  valid_600727 = validateParameter(valid_600727, JInt, required = false, default = nil)
  if valid_600727 != nil:
    section.add "MaxRecords", valid_600727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600728: Call_PostDescribeAutoScalingInstances_600713;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_600728.validator(path, query, header, formData, body)
  let scheme = call_600728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600728.url(scheme.get, call_600728.host, call_600728.base,
                         call_600728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600728, url, valid)

proc call*(call_600729: Call_PostDescribeAutoScalingInstances_600713;
          NextToken: string = ""; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   Version: string (required)
  var query_600730 = newJObject()
  var formData_600731 = newJObject()
  add(formData_600731, "NextToken", newJString(NextToken))
  if InstanceIds != nil:
    formData_600731.add "InstanceIds", InstanceIds
  add(query_600730, "Action", newJString(Action))
  add(formData_600731, "MaxRecords", newJInt(MaxRecords))
  add(query_600730, "Version", newJString(Version))
  result = call_600729.call(nil, query_600730, nil, formData_600731, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_600713(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_600714, base: "/",
    url: url_PostDescribeAutoScalingInstances_600715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_600695 = ref object of OpenApiRestCall_599368
proc url_GetDescribeAutoScalingInstances_600697(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingInstances_600696(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: JString (required)
  section = newJObject()
  var valid_600698 = query.getOrDefault("MaxRecords")
  valid_600698 = validateParameter(valid_600698, JInt, required = false, default = nil)
  if valid_600698 != nil:
    section.add "MaxRecords", valid_600698
  var valid_600699 = query.getOrDefault("NextToken")
  valid_600699 = validateParameter(valid_600699, JString, required = false,
                                 default = nil)
  if valid_600699 != nil:
    section.add "NextToken", valid_600699
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600700 = query.getOrDefault("Action")
  valid_600700 = validateParameter(valid_600700, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_600700 != nil:
    section.add "Action", valid_600700
  var valid_600701 = query.getOrDefault("InstanceIds")
  valid_600701 = validateParameter(valid_600701, JArray, required = false,
                                 default = nil)
  if valid_600701 != nil:
    section.add "InstanceIds", valid_600701
  var valid_600702 = query.getOrDefault("Version")
  valid_600702 = validateParameter(valid_600702, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600702 != nil:
    section.add "Version", valid_600702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600703 = header.getOrDefault("X-Amz-Date")
  valid_600703 = validateParameter(valid_600703, JString, required = false,
                                 default = nil)
  if valid_600703 != nil:
    section.add "X-Amz-Date", valid_600703
  var valid_600704 = header.getOrDefault("X-Amz-Security-Token")
  valid_600704 = validateParameter(valid_600704, JString, required = false,
                                 default = nil)
  if valid_600704 != nil:
    section.add "X-Amz-Security-Token", valid_600704
  var valid_600705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600705 = validateParameter(valid_600705, JString, required = false,
                                 default = nil)
  if valid_600705 != nil:
    section.add "X-Amz-Content-Sha256", valid_600705
  var valid_600706 = header.getOrDefault("X-Amz-Algorithm")
  valid_600706 = validateParameter(valid_600706, JString, required = false,
                                 default = nil)
  if valid_600706 != nil:
    section.add "X-Amz-Algorithm", valid_600706
  var valid_600707 = header.getOrDefault("X-Amz-Signature")
  valid_600707 = validateParameter(valid_600707, JString, required = false,
                                 default = nil)
  if valid_600707 != nil:
    section.add "X-Amz-Signature", valid_600707
  var valid_600708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600708 = validateParameter(valid_600708, JString, required = false,
                                 default = nil)
  if valid_600708 != nil:
    section.add "X-Amz-SignedHeaders", valid_600708
  var valid_600709 = header.getOrDefault("X-Amz-Credential")
  valid_600709 = validateParameter(valid_600709, JString, required = false,
                                 default = nil)
  if valid_600709 != nil:
    section.add "X-Amz-Credential", valid_600709
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600710: Call_GetDescribeAutoScalingInstances_600695;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_600710.validator(path, query, header, formData, body)
  let scheme = call_600710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600710.url(scheme.get, call_600710.host, call_600710.base,
                         call_600710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600710, url, valid)

proc call*(call_600711: Call_GetDescribeAutoScalingInstances_600695;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Version: string (required)
  var query_600712 = newJObject()
  add(query_600712, "MaxRecords", newJInt(MaxRecords))
  add(query_600712, "NextToken", newJString(NextToken))
  add(query_600712, "Action", newJString(Action))
  if InstanceIds != nil:
    query_600712.add "InstanceIds", InstanceIds
  add(query_600712, "Version", newJString(Version))
  result = call_600711.call(nil, query_600712, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_600695(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_600696, base: "/",
    url: url_GetDescribeAutoScalingInstances_600697,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_600747 = ref object of OpenApiRestCall_599368
proc url_PostDescribeAutoScalingNotificationTypes_600749(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_600748(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600750 = query.getOrDefault("Action")
  valid_600750 = validateParameter(valid_600750, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_600750 != nil:
    section.add "Action", valid_600750
  var valid_600751 = query.getOrDefault("Version")
  valid_600751 = validateParameter(valid_600751, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600751 != nil:
    section.add "Version", valid_600751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600752 = header.getOrDefault("X-Amz-Date")
  valid_600752 = validateParameter(valid_600752, JString, required = false,
                                 default = nil)
  if valid_600752 != nil:
    section.add "X-Amz-Date", valid_600752
  var valid_600753 = header.getOrDefault("X-Amz-Security-Token")
  valid_600753 = validateParameter(valid_600753, JString, required = false,
                                 default = nil)
  if valid_600753 != nil:
    section.add "X-Amz-Security-Token", valid_600753
  var valid_600754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600754 = validateParameter(valid_600754, JString, required = false,
                                 default = nil)
  if valid_600754 != nil:
    section.add "X-Amz-Content-Sha256", valid_600754
  var valid_600755 = header.getOrDefault("X-Amz-Algorithm")
  valid_600755 = validateParameter(valid_600755, JString, required = false,
                                 default = nil)
  if valid_600755 != nil:
    section.add "X-Amz-Algorithm", valid_600755
  var valid_600756 = header.getOrDefault("X-Amz-Signature")
  valid_600756 = validateParameter(valid_600756, JString, required = false,
                                 default = nil)
  if valid_600756 != nil:
    section.add "X-Amz-Signature", valid_600756
  var valid_600757 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600757 = validateParameter(valid_600757, JString, required = false,
                                 default = nil)
  if valid_600757 != nil:
    section.add "X-Amz-SignedHeaders", valid_600757
  var valid_600758 = header.getOrDefault("X-Amz-Credential")
  valid_600758 = validateParameter(valid_600758, JString, required = false,
                                 default = nil)
  if valid_600758 != nil:
    section.add "X-Amz-Credential", valid_600758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600759: Call_PostDescribeAutoScalingNotificationTypes_600747;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_600759.validator(path, query, header, formData, body)
  let scheme = call_600759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600759.url(scheme.get, call_600759.host, call_600759.base,
                         call_600759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600759, url, valid)

proc call*(call_600760: Call_PostDescribeAutoScalingNotificationTypes_600747;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600761 = newJObject()
  add(query_600761, "Action", newJString(Action))
  add(query_600761, "Version", newJString(Version))
  result = call_600760.call(nil, query_600761, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_600747(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_600748,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_600749,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_600732 = ref object of OpenApiRestCall_599368
proc url_GetDescribeAutoScalingNotificationTypes_600734(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_600733(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600735 = query.getOrDefault("Action")
  valid_600735 = validateParameter(valid_600735, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_600735 != nil:
    section.add "Action", valid_600735
  var valid_600736 = query.getOrDefault("Version")
  valid_600736 = validateParameter(valid_600736, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600736 != nil:
    section.add "Version", valid_600736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600737 = header.getOrDefault("X-Amz-Date")
  valid_600737 = validateParameter(valid_600737, JString, required = false,
                                 default = nil)
  if valid_600737 != nil:
    section.add "X-Amz-Date", valid_600737
  var valid_600738 = header.getOrDefault("X-Amz-Security-Token")
  valid_600738 = validateParameter(valid_600738, JString, required = false,
                                 default = nil)
  if valid_600738 != nil:
    section.add "X-Amz-Security-Token", valid_600738
  var valid_600739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600739 = validateParameter(valid_600739, JString, required = false,
                                 default = nil)
  if valid_600739 != nil:
    section.add "X-Amz-Content-Sha256", valid_600739
  var valid_600740 = header.getOrDefault("X-Amz-Algorithm")
  valid_600740 = validateParameter(valid_600740, JString, required = false,
                                 default = nil)
  if valid_600740 != nil:
    section.add "X-Amz-Algorithm", valid_600740
  var valid_600741 = header.getOrDefault("X-Amz-Signature")
  valid_600741 = validateParameter(valid_600741, JString, required = false,
                                 default = nil)
  if valid_600741 != nil:
    section.add "X-Amz-Signature", valid_600741
  var valid_600742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600742 = validateParameter(valid_600742, JString, required = false,
                                 default = nil)
  if valid_600742 != nil:
    section.add "X-Amz-SignedHeaders", valid_600742
  var valid_600743 = header.getOrDefault("X-Amz-Credential")
  valid_600743 = validateParameter(valid_600743, JString, required = false,
                                 default = nil)
  if valid_600743 != nil:
    section.add "X-Amz-Credential", valid_600743
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600744: Call_GetDescribeAutoScalingNotificationTypes_600732;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_600744.validator(path, query, header, formData, body)
  let scheme = call_600744.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600744.url(scheme.get, call_600744.host, call_600744.base,
                         call_600744.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600744, url, valid)

proc call*(call_600745: Call_GetDescribeAutoScalingNotificationTypes_600732;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600746 = newJObject()
  add(query_600746, "Action", newJString(Action))
  add(query_600746, "Version", newJString(Version))
  result = call_600745.call(nil, query_600746, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_600732(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_600733, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_600734,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_600780 = ref object of OpenApiRestCall_599368
proc url_PostDescribeLaunchConfigurations_600782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLaunchConfigurations_600781(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600783 = query.getOrDefault("Action")
  valid_600783 = validateParameter(valid_600783, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_600783 != nil:
    section.add "Action", valid_600783
  var valid_600784 = query.getOrDefault("Version")
  valid_600784 = validateParameter(valid_600784, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600784 != nil:
    section.add "Version", valid_600784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600785 = header.getOrDefault("X-Amz-Date")
  valid_600785 = validateParameter(valid_600785, JString, required = false,
                                 default = nil)
  if valid_600785 != nil:
    section.add "X-Amz-Date", valid_600785
  var valid_600786 = header.getOrDefault("X-Amz-Security-Token")
  valid_600786 = validateParameter(valid_600786, JString, required = false,
                                 default = nil)
  if valid_600786 != nil:
    section.add "X-Amz-Security-Token", valid_600786
  var valid_600787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600787 = validateParameter(valid_600787, JString, required = false,
                                 default = nil)
  if valid_600787 != nil:
    section.add "X-Amz-Content-Sha256", valid_600787
  var valid_600788 = header.getOrDefault("X-Amz-Algorithm")
  valid_600788 = validateParameter(valid_600788, JString, required = false,
                                 default = nil)
  if valid_600788 != nil:
    section.add "X-Amz-Algorithm", valid_600788
  var valid_600789 = header.getOrDefault("X-Amz-Signature")
  valid_600789 = validateParameter(valid_600789, JString, required = false,
                                 default = nil)
  if valid_600789 != nil:
    section.add "X-Amz-Signature", valid_600789
  var valid_600790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600790 = validateParameter(valid_600790, JString, required = false,
                                 default = nil)
  if valid_600790 != nil:
    section.add "X-Amz-SignedHeaders", valid_600790
  var valid_600791 = header.getOrDefault("X-Amz-Credential")
  valid_600791 = validateParameter(valid_600791, JString, required = false,
                                 default = nil)
  if valid_600791 != nil:
    section.add "X-Amz-Credential", valid_600791
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_600792 = formData.getOrDefault("NextToken")
  valid_600792 = validateParameter(valid_600792, JString, required = false,
                                 default = nil)
  if valid_600792 != nil:
    section.add "NextToken", valid_600792
  var valid_600793 = formData.getOrDefault("LaunchConfigurationNames")
  valid_600793 = validateParameter(valid_600793, JArray, required = false,
                                 default = nil)
  if valid_600793 != nil:
    section.add "LaunchConfigurationNames", valid_600793
  var valid_600794 = formData.getOrDefault("MaxRecords")
  valid_600794 = validateParameter(valid_600794, JInt, required = false, default = nil)
  if valid_600794 != nil:
    section.add "MaxRecords", valid_600794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600795: Call_PostDescribeLaunchConfigurations_600780;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_600795.validator(path, query, header, formData, body)
  let scheme = call_600795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600795.url(scheme.get, call_600795.host, call_600795.base,
                         call_600795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600795, url, valid)

proc call*(call_600796: Call_PostDescribeLaunchConfigurations_600780;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_600797 = newJObject()
  var formData_600798 = newJObject()
  add(formData_600798, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    formData_600798.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_600797, "Action", newJString(Action))
  add(formData_600798, "MaxRecords", newJInt(MaxRecords))
  add(query_600797, "Version", newJString(Version))
  result = call_600796.call(nil, query_600797, nil, formData_600798, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_600780(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_600781, base: "/",
    url: url_PostDescribeLaunchConfigurations_600782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_600762 = ref object of OpenApiRestCall_599368
proc url_GetDescribeLaunchConfigurations_600764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLaunchConfigurations_600763(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_600765 = query.getOrDefault("MaxRecords")
  valid_600765 = validateParameter(valid_600765, JInt, required = false, default = nil)
  if valid_600765 != nil:
    section.add "MaxRecords", valid_600765
  var valid_600766 = query.getOrDefault("NextToken")
  valid_600766 = validateParameter(valid_600766, JString, required = false,
                                 default = nil)
  if valid_600766 != nil:
    section.add "NextToken", valid_600766
  var valid_600767 = query.getOrDefault("LaunchConfigurationNames")
  valid_600767 = validateParameter(valid_600767, JArray, required = false,
                                 default = nil)
  if valid_600767 != nil:
    section.add "LaunchConfigurationNames", valid_600767
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600768 = query.getOrDefault("Action")
  valid_600768 = validateParameter(valid_600768, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_600768 != nil:
    section.add "Action", valid_600768
  var valid_600769 = query.getOrDefault("Version")
  valid_600769 = validateParameter(valid_600769, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600769 != nil:
    section.add "Version", valid_600769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600770 = header.getOrDefault("X-Amz-Date")
  valid_600770 = validateParameter(valid_600770, JString, required = false,
                                 default = nil)
  if valid_600770 != nil:
    section.add "X-Amz-Date", valid_600770
  var valid_600771 = header.getOrDefault("X-Amz-Security-Token")
  valid_600771 = validateParameter(valid_600771, JString, required = false,
                                 default = nil)
  if valid_600771 != nil:
    section.add "X-Amz-Security-Token", valid_600771
  var valid_600772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600772 = validateParameter(valid_600772, JString, required = false,
                                 default = nil)
  if valid_600772 != nil:
    section.add "X-Amz-Content-Sha256", valid_600772
  var valid_600773 = header.getOrDefault("X-Amz-Algorithm")
  valid_600773 = validateParameter(valid_600773, JString, required = false,
                                 default = nil)
  if valid_600773 != nil:
    section.add "X-Amz-Algorithm", valid_600773
  var valid_600774 = header.getOrDefault("X-Amz-Signature")
  valid_600774 = validateParameter(valid_600774, JString, required = false,
                                 default = nil)
  if valid_600774 != nil:
    section.add "X-Amz-Signature", valid_600774
  var valid_600775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600775 = validateParameter(valid_600775, JString, required = false,
                                 default = nil)
  if valid_600775 != nil:
    section.add "X-Amz-SignedHeaders", valid_600775
  var valid_600776 = header.getOrDefault("X-Amz-Credential")
  valid_600776 = validateParameter(valid_600776, JString, required = false,
                                 default = nil)
  if valid_600776 != nil:
    section.add "X-Amz-Credential", valid_600776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600777: Call_GetDescribeLaunchConfigurations_600762;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_600777.validator(path, query, header, formData, body)
  let scheme = call_600777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600777.url(scheme.get, call_600777.host, call_600777.base,
                         call_600777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600777, url, valid)

proc call*(call_600778: Call_GetDescribeLaunchConfigurations_600762;
          MaxRecords: int = 0; NextToken: string = "";
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600779 = newJObject()
  add(query_600779, "MaxRecords", newJInt(MaxRecords))
  add(query_600779, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_600779.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_600779, "Action", newJString(Action))
  add(query_600779, "Version", newJString(Version))
  result = call_600778.call(nil, query_600779, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_600762(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_600763, base: "/",
    url: url_GetDescribeLaunchConfigurations_600764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_600814 = ref object of OpenApiRestCall_599368
proc url_PostDescribeLifecycleHookTypes_600816(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_600815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600817 = query.getOrDefault("Action")
  valid_600817 = validateParameter(valid_600817, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_600817 != nil:
    section.add "Action", valid_600817
  var valid_600818 = query.getOrDefault("Version")
  valid_600818 = validateParameter(valid_600818, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600818 != nil:
    section.add "Version", valid_600818
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600819 = header.getOrDefault("X-Amz-Date")
  valid_600819 = validateParameter(valid_600819, JString, required = false,
                                 default = nil)
  if valid_600819 != nil:
    section.add "X-Amz-Date", valid_600819
  var valid_600820 = header.getOrDefault("X-Amz-Security-Token")
  valid_600820 = validateParameter(valid_600820, JString, required = false,
                                 default = nil)
  if valid_600820 != nil:
    section.add "X-Amz-Security-Token", valid_600820
  var valid_600821 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600821 = validateParameter(valid_600821, JString, required = false,
                                 default = nil)
  if valid_600821 != nil:
    section.add "X-Amz-Content-Sha256", valid_600821
  var valid_600822 = header.getOrDefault("X-Amz-Algorithm")
  valid_600822 = validateParameter(valid_600822, JString, required = false,
                                 default = nil)
  if valid_600822 != nil:
    section.add "X-Amz-Algorithm", valid_600822
  var valid_600823 = header.getOrDefault("X-Amz-Signature")
  valid_600823 = validateParameter(valid_600823, JString, required = false,
                                 default = nil)
  if valid_600823 != nil:
    section.add "X-Amz-Signature", valid_600823
  var valid_600824 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600824 = validateParameter(valid_600824, JString, required = false,
                                 default = nil)
  if valid_600824 != nil:
    section.add "X-Amz-SignedHeaders", valid_600824
  var valid_600825 = header.getOrDefault("X-Amz-Credential")
  valid_600825 = validateParameter(valid_600825, JString, required = false,
                                 default = nil)
  if valid_600825 != nil:
    section.add "X-Amz-Credential", valid_600825
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600826: Call_PostDescribeLifecycleHookTypes_600814; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_600826.validator(path, query, header, formData, body)
  let scheme = call_600826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600826.url(scheme.get, call_600826.host, call_600826.base,
                         call_600826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600826, url, valid)

proc call*(call_600827: Call_PostDescribeLifecycleHookTypes_600814;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600828 = newJObject()
  add(query_600828, "Action", newJString(Action))
  add(query_600828, "Version", newJString(Version))
  result = call_600827.call(nil, query_600828, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_600814(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_600815, base: "/",
    url: url_PostDescribeLifecycleHookTypes_600816,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_600799 = ref object of OpenApiRestCall_599368
proc url_GetDescribeLifecycleHookTypes_600801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_600800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600802 = query.getOrDefault("Action")
  valid_600802 = validateParameter(valid_600802, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_600802 != nil:
    section.add "Action", valid_600802
  var valid_600803 = query.getOrDefault("Version")
  valid_600803 = validateParameter(valid_600803, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600803 != nil:
    section.add "Version", valid_600803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600804 = header.getOrDefault("X-Amz-Date")
  valid_600804 = validateParameter(valid_600804, JString, required = false,
                                 default = nil)
  if valid_600804 != nil:
    section.add "X-Amz-Date", valid_600804
  var valid_600805 = header.getOrDefault("X-Amz-Security-Token")
  valid_600805 = validateParameter(valid_600805, JString, required = false,
                                 default = nil)
  if valid_600805 != nil:
    section.add "X-Amz-Security-Token", valid_600805
  var valid_600806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600806 = validateParameter(valid_600806, JString, required = false,
                                 default = nil)
  if valid_600806 != nil:
    section.add "X-Amz-Content-Sha256", valid_600806
  var valid_600807 = header.getOrDefault("X-Amz-Algorithm")
  valid_600807 = validateParameter(valid_600807, JString, required = false,
                                 default = nil)
  if valid_600807 != nil:
    section.add "X-Amz-Algorithm", valid_600807
  var valid_600808 = header.getOrDefault("X-Amz-Signature")
  valid_600808 = validateParameter(valid_600808, JString, required = false,
                                 default = nil)
  if valid_600808 != nil:
    section.add "X-Amz-Signature", valid_600808
  var valid_600809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600809 = validateParameter(valid_600809, JString, required = false,
                                 default = nil)
  if valid_600809 != nil:
    section.add "X-Amz-SignedHeaders", valid_600809
  var valid_600810 = header.getOrDefault("X-Amz-Credential")
  valid_600810 = validateParameter(valid_600810, JString, required = false,
                                 default = nil)
  if valid_600810 != nil:
    section.add "X-Amz-Credential", valid_600810
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600811: Call_GetDescribeLifecycleHookTypes_600799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_600811.validator(path, query, header, formData, body)
  let scheme = call_600811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600811.url(scheme.get, call_600811.host, call_600811.base,
                         call_600811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600811, url, valid)

proc call*(call_600812: Call_GetDescribeLifecycleHookTypes_600799;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600813 = newJObject()
  add(query_600813, "Action", newJString(Action))
  add(query_600813, "Version", newJString(Version))
  result = call_600812.call(nil, query_600813, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_600799(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_600800, base: "/",
    url: url_GetDescribeLifecycleHookTypes_600801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_600846 = ref object of OpenApiRestCall_599368
proc url_PostDescribeLifecycleHooks_600848(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHooks_600847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600849 = query.getOrDefault("Action")
  valid_600849 = validateParameter(valid_600849, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_600849 != nil:
    section.add "Action", valid_600849
  var valid_600850 = query.getOrDefault("Version")
  valid_600850 = validateParameter(valid_600850, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600850 != nil:
    section.add "Version", valid_600850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600851 = header.getOrDefault("X-Amz-Date")
  valid_600851 = validateParameter(valid_600851, JString, required = false,
                                 default = nil)
  if valid_600851 != nil:
    section.add "X-Amz-Date", valid_600851
  var valid_600852 = header.getOrDefault("X-Amz-Security-Token")
  valid_600852 = validateParameter(valid_600852, JString, required = false,
                                 default = nil)
  if valid_600852 != nil:
    section.add "X-Amz-Security-Token", valid_600852
  var valid_600853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600853 = validateParameter(valid_600853, JString, required = false,
                                 default = nil)
  if valid_600853 != nil:
    section.add "X-Amz-Content-Sha256", valid_600853
  var valid_600854 = header.getOrDefault("X-Amz-Algorithm")
  valid_600854 = validateParameter(valid_600854, JString, required = false,
                                 default = nil)
  if valid_600854 != nil:
    section.add "X-Amz-Algorithm", valid_600854
  var valid_600855 = header.getOrDefault("X-Amz-Signature")
  valid_600855 = validateParameter(valid_600855, JString, required = false,
                                 default = nil)
  if valid_600855 != nil:
    section.add "X-Amz-Signature", valid_600855
  var valid_600856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600856 = validateParameter(valid_600856, JString, required = false,
                                 default = nil)
  if valid_600856 != nil:
    section.add "X-Amz-SignedHeaders", valid_600856
  var valid_600857 = header.getOrDefault("X-Amz-Credential")
  valid_600857 = validateParameter(valid_600857, JString, required = false,
                                 default = nil)
  if valid_600857 != nil:
    section.add "X-Amz-Credential", valid_600857
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600858 = formData.getOrDefault("AutoScalingGroupName")
  valid_600858 = validateParameter(valid_600858, JString, required = true,
                                 default = nil)
  if valid_600858 != nil:
    section.add "AutoScalingGroupName", valid_600858
  var valid_600859 = formData.getOrDefault("LifecycleHookNames")
  valid_600859 = validateParameter(valid_600859, JArray, required = false,
                                 default = nil)
  if valid_600859 != nil:
    section.add "LifecycleHookNames", valid_600859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600860: Call_PostDescribeLifecycleHooks_600846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_600860.validator(path, query, header, formData, body)
  let scheme = call_600860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600860.url(scheme.get, call_600860.host, call_600860.base,
                         call_600860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600860, url, valid)

proc call*(call_600861: Call_PostDescribeLifecycleHooks_600846;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600862 = newJObject()
  var formData_600863 = newJObject()
  add(formData_600863, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_600863.add "LifecycleHookNames", LifecycleHookNames
  add(query_600862, "Action", newJString(Action))
  add(query_600862, "Version", newJString(Version))
  result = call_600861.call(nil, query_600862, nil, formData_600863, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_600846(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_600847, base: "/",
    url: url_PostDescribeLifecycleHooks_600848,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_600829 = ref object of OpenApiRestCall_599368
proc url_GetDescribeLifecycleHooks_600831(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHooks_600830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600832 = query.getOrDefault("AutoScalingGroupName")
  valid_600832 = validateParameter(valid_600832, JString, required = true,
                                 default = nil)
  if valid_600832 != nil:
    section.add "AutoScalingGroupName", valid_600832
  var valid_600833 = query.getOrDefault("LifecycleHookNames")
  valid_600833 = validateParameter(valid_600833, JArray, required = false,
                                 default = nil)
  if valid_600833 != nil:
    section.add "LifecycleHookNames", valid_600833
  var valid_600834 = query.getOrDefault("Action")
  valid_600834 = validateParameter(valid_600834, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_600834 != nil:
    section.add "Action", valid_600834
  var valid_600835 = query.getOrDefault("Version")
  valid_600835 = validateParameter(valid_600835, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600835 != nil:
    section.add "Version", valid_600835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600836 = header.getOrDefault("X-Amz-Date")
  valid_600836 = validateParameter(valid_600836, JString, required = false,
                                 default = nil)
  if valid_600836 != nil:
    section.add "X-Amz-Date", valid_600836
  var valid_600837 = header.getOrDefault("X-Amz-Security-Token")
  valid_600837 = validateParameter(valid_600837, JString, required = false,
                                 default = nil)
  if valid_600837 != nil:
    section.add "X-Amz-Security-Token", valid_600837
  var valid_600838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600838 = validateParameter(valid_600838, JString, required = false,
                                 default = nil)
  if valid_600838 != nil:
    section.add "X-Amz-Content-Sha256", valid_600838
  var valid_600839 = header.getOrDefault("X-Amz-Algorithm")
  valid_600839 = validateParameter(valid_600839, JString, required = false,
                                 default = nil)
  if valid_600839 != nil:
    section.add "X-Amz-Algorithm", valid_600839
  var valid_600840 = header.getOrDefault("X-Amz-Signature")
  valid_600840 = validateParameter(valid_600840, JString, required = false,
                                 default = nil)
  if valid_600840 != nil:
    section.add "X-Amz-Signature", valid_600840
  var valid_600841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600841 = validateParameter(valid_600841, JString, required = false,
                                 default = nil)
  if valid_600841 != nil:
    section.add "X-Amz-SignedHeaders", valid_600841
  var valid_600842 = header.getOrDefault("X-Amz-Credential")
  valid_600842 = validateParameter(valid_600842, JString, required = false,
                                 default = nil)
  if valid_600842 != nil:
    section.add "X-Amz-Credential", valid_600842
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600843: Call_GetDescribeLifecycleHooks_600829; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_600843.validator(path, query, header, formData, body)
  let scheme = call_600843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600843.url(scheme.get, call_600843.host, call_600843.base,
                         call_600843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600843, url, valid)

proc call*(call_600844: Call_GetDescribeLifecycleHooks_600829;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600845 = newJObject()
  add(query_600845, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    query_600845.add "LifecycleHookNames", LifecycleHookNames
  add(query_600845, "Action", newJString(Action))
  add(query_600845, "Version", newJString(Version))
  result = call_600844.call(nil, query_600845, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_600829(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_600830, base: "/",
    url: url_GetDescribeLifecycleHooks_600831,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_600882 = ref object of OpenApiRestCall_599368
proc url_PostDescribeLoadBalancerTargetGroups_600884(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_600883(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600885 = query.getOrDefault("Action")
  valid_600885 = validateParameter(valid_600885, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_600885 != nil:
    section.add "Action", valid_600885
  var valid_600886 = query.getOrDefault("Version")
  valid_600886 = validateParameter(valid_600886, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600886 != nil:
    section.add "Version", valid_600886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600887 = header.getOrDefault("X-Amz-Date")
  valid_600887 = validateParameter(valid_600887, JString, required = false,
                                 default = nil)
  if valid_600887 != nil:
    section.add "X-Amz-Date", valid_600887
  var valid_600888 = header.getOrDefault("X-Amz-Security-Token")
  valid_600888 = validateParameter(valid_600888, JString, required = false,
                                 default = nil)
  if valid_600888 != nil:
    section.add "X-Amz-Security-Token", valid_600888
  var valid_600889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600889 = validateParameter(valid_600889, JString, required = false,
                                 default = nil)
  if valid_600889 != nil:
    section.add "X-Amz-Content-Sha256", valid_600889
  var valid_600890 = header.getOrDefault("X-Amz-Algorithm")
  valid_600890 = validateParameter(valid_600890, JString, required = false,
                                 default = nil)
  if valid_600890 != nil:
    section.add "X-Amz-Algorithm", valid_600890
  var valid_600891 = header.getOrDefault("X-Amz-Signature")
  valid_600891 = validateParameter(valid_600891, JString, required = false,
                                 default = nil)
  if valid_600891 != nil:
    section.add "X-Amz-Signature", valid_600891
  var valid_600892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600892 = validateParameter(valid_600892, JString, required = false,
                                 default = nil)
  if valid_600892 != nil:
    section.add "X-Amz-SignedHeaders", valid_600892
  var valid_600893 = header.getOrDefault("X-Amz-Credential")
  valid_600893 = validateParameter(valid_600893, JString, required = false,
                                 default = nil)
  if valid_600893 != nil:
    section.add "X-Amz-Credential", valid_600893
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600894 = formData.getOrDefault("AutoScalingGroupName")
  valid_600894 = validateParameter(valid_600894, JString, required = true,
                                 default = nil)
  if valid_600894 != nil:
    section.add "AutoScalingGroupName", valid_600894
  var valid_600895 = formData.getOrDefault("NextToken")
  valid_600895 = validateParameter(valid_600895, JString, required = false,
                                 default = nil)
  if valid_600895 != nil:
    section.add "NextToken", valid_600895
  var valid_600896 = formData.getOrDefault("MaxRecords")
  valid_600896 = validateParameter(valid_600896, JInt, required = false, default = nil)
  if valid_600896 != nil:
    section.add "MaxRecords", valid_600896
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600897: Call_PostDescribeLoadBalancerTargetGroups_600882;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_600897.validator(path, query, header, formData, body)
  let scheme = call_600897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600897.url(scheme.get, call_600897.host, call_600897.base,
                         call_600897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600897, url, valid)

proc call*(call_600898: Call_PostDescribeLoadBalancerTargetGroups_600882;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_600899 = newJObject()
  var formData_600900 = newJObject()
  add(formData_600900, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_600900, "NextToken", newJString(NextToken))
  add(query_600899, "Action", newJString(Action))
  add(formData_600900, "MaxRecords", newJInt(MaxRecords))
  add(query_600899, "Version", newJString(Version))
  result = call_600898.call(nil, query_600899, nil, formData_600900, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_600882(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_600883, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_600884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_600864 = ref object of OpenApiRestCall_599368
proc url_GetDescribeLoadBalancerTargetGroups_600866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_600865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_600867 = query.getOrDefault("MaxRecords")
  valid_600867 = validateParameter(valid_600867, JInt, required = false, default = nil)
  if valid_600867 != nil:
    section.add "MaxRecords", valid_600867
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600868 = query.getOrDefault("AutoScalingGroupName")
  valid_600868 = validateParameter(valid_600868, JString, required = true,
                                 default = nil)
  if valid_600868 != nil:
    section.add "AutoScalingGroupName", valid_600868
  var valid_600869 = query.getOrDefault("NextToken")
  valid_600869 = validateParameter(valid_600869, JString, required = false,
                                 default = nil)
  if valid_600869 != nil:
    section.add "NextToken", valid_600869
  var valid_600870 = query.getOrDefault("Action")
  valid_600870 = validateParameter(valid_600870, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_600870 != nil:
    section.add "Action", valid_600870
  var valid_600871 = query.getOrDefault("Version")
  valid_600871 = validateParameter(valid_600871, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600871 != nil:
    section.add "Version", valid_600871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600872 = header.getOrDefault("X-Amz-Date")
  valid_600872 = validateParameter(valid_600872, JString, required = false,
                                 default = nil)
  if valid_600872 != nil:
    section.add "X-Amz-Date", valid_600872
  var valid_600873 = header.getOrDefault("X-Amz-Security-Token")
  valid_600873 = validateParameter(valid_600873, JString, required = false,
                                 default = nil)
  if valid_600873 != nil:
    section.add "X-Amz-Security-Token", valid_600873
  var valid_600874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600874 = validateParameter(valid_600874, JString, required = false,
                                 default = nil)
  if valid_600874 != nil:
    section.add "X-Amz-Content-Sha256", valid_600874
  var valid_600875 = header.getOrDefault("X-Amz-Algorithm")
  valid_600875 = validateParameter(valid_600875, JString, required = false,
                                 default = nil)
  if valid_600875 != nil:
    section.add "X-Amz-Algorithm", valid_600875
  var valid_600876 = header.getOrDefault("X-Amz-Signature")
  valid_600876 = validateParameter(valid_600876, JString, required = false,
                                 default = nil)
  if valid_600876 != nil:
    section.add "X-Amz-Signature", valid_600876
  var valid_600877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600877 = validateParameter(valid_600877, JString, required = false,
                                 default = nil)
  if valid_600877 != nil:
    section.add "X-Amz-SignedHeaders", valid_600877
  var valid_600878 = header.getOrDefault("X-Amz-Credential")
  valid_600878 = validateParameter(valid_600878, JString, required = false,
                                 default = nil)
  if valid_600878 != nil:
    section.add "X-Amz-Credential", valid_600878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600879: Call_GetDescribeLoadBalancerTargetGroups_600864;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_600879.validator(path, query, header, formData, body)
  let scheme = call_600879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600879.url(scheme.get, call_600879.host, call_600879.base,
                         call_600879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600879, url, valid)

proc call*(call_600880: Call_GetDescribeLoadBalancerTargetGroups_600864;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600881 = newJObject()
  add(query_600881, "MaxRecords", newJInt(MaxRecords))
  add(query_600881, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600881, "NextToken", newJString(NextToken))
  add(query_600881, "Action", newJString(Action))
  add(query_600881, "Version", newJString(Version))
  result = call_600880.call(nil, query_600881, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_600864(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_600865, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_600866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_600919 = ref object of OpenApiRestCall_599368
proc url_PostDescribeLoadBalancers_600921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancers_600920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600922 = query.getOrDefault("Action")
  valid_600922 = validateParameter(valid_600922, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_600922 != nil:
    section.add "Action", valid_600922
  var valid_600923 = query.getOrDefault("Version")
  valid_600923 = validateParameter(valid_600923, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600923 != nil:
    section.add "Version", valid_600923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600924 = header.getOrDefault("X-Amz-Date")
  valid_600924 = validateParameter(valid_600924, JString, required = false,
                                 default = nil)
  if valid_600924 != nil:
    section.add "X-Amz-Date", valid_600924
  var valid_600925 = header.getOrDefault("X-Amz-Security-Token")
  valid_600925 = validateParameter(valid_600925, JString, required = false,
                                 default = nil)
  if valid_600925 != nil:
    section.add "X-Amz-Security-Token", valid_600925
  var valid_600926 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600926 = validateParameter(valid_600926, JString, required = false,
                                 default = nil)
  if valid_600926 != nil:
    section.add "X-Amz-Content-Sha256", valid_600926
  var valid_600927 = header.getOrDefault("X-Amz-Algorithm")
  valid_600927 = validateParameter(valid_600927, JString, required = false,
                                 default = nil)
  if valid_600927 != nil:
    section.add "X-Amz-Algorithm", valid_600927
  var valid_600928 = header.getOrDefault("X-Amz-Signature")
  valid_600928 = validateParameter(valid_600928, JString, required = false,
                                 default = nil)
  if valid_600928 != nil:
    section.add "X-Amz-Signature", valid_600928
  var valid_600929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600929 = validateParameter(valid_600929, JString, required = false,
                                 default = nil)
  if valid_600929 != nil:
    section.add "X-Amz-SignedHeaders", valid_600929
  var valid_600930 = header.getOrDefault("X-Amz-Credential")
  valid_600930 = validateParameter(valid_600930, JString, required = false,
                                 default = nil)
  if valid_600930 != nil:
    section.add "X-Amz-Credential", valid_600930
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600931 = formData.getOrDefault("AutoScalingGroupName")
  valid_600931 = validateParameter(valid_600931, JString, required = true,
                                 default = nil)
  if valid_600931 != nil:
    section.add "AutoScalingGroupName", valid_600931
  var valid_600932 = formData.getOrDefault("NextToken")
  valid_600932 = validateParameter(valid_600932, JString, required = false,
                                 default = nil)
  if valid_600932 != nil:
    section.add "NextToken", valid_600932
  var valid_600933 = formData.getOrDefault("MaxRecords")
  valid_600933 = validateParameter(valid_600933, JInt, required = false, default = nil)
  if valid_600933 != nil:
    section.add "MaxRecords", valid_600933
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600934: Call_PostDescribeLoadBalancers_600919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_600934.validator(path, query, header, formData, body)
  let scheme = call_600934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600934.url(scheme.get, call_600934.host, call_600934.base,
                         call_600934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600934, url, valid)

proc call*(call_600935: Call_PostDescribeLoadBalancers_600919;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_600936 = newJObject()
  var formData_600937 = newJObject()
  add(formData_600937, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_600937, "NextToken", newJString(NextToken))
  add(query_600936, "Action", newJString(Action))
  add(formData_600937, "MaxRecords", newJInt(MaxRecords))
  add(query_600936, "Version", newJString(Version))
  result = call_600935.call(nil, query_600936, nil, formData_600937, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_600919(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_600920, base: "/",
    url: url_PostDescribeLoadBalancers_600921,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_600901 = ref object of OpenApiRestCall_599368
proc url_GetDescribeLoadBalancers_600903(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancers_600902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_600904 = query.getOrDefault("MaxRecords")
  valid_600904 = validateParameter(valid_600904, JInt, required = false, default = nil)
  if valid_600904 != nil:
    section.add "MaxRecords", valid_600904
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_600905 = query.getOrDefault("AutoScalingGroupName")
  valid_600905 = validateParameter(valid_600905, JString, required = true,
                                 default = nil)
  if valid_600905 != nil:
    section.add "AutoScalingGroupName", valid_600905
  var valid_600906 = query.getOrDefault("NextToken")
  valid_600906 = validateParameter(valid_600906, JString, required = false,
                                 default = nil)
  if valid_600906 != nil:
    section.add "NextToken", valid_600906
  var valid_600907 = query.getOrDefault("Action")
  valid_600907 = validateParameter(valid_600907, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_600907 != nil:
    section.add "Action", valid_600907
  var valid_600908 = query.getOrDefault("Version")
  valid_600908 = validateParameter(valid_600908, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600908 != nil:
    section.add "Version", valid_600908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600909 = header.getOrDefault("X-Amz-Date")
  valid_600909 = validateParameter(valid_600909, JString, required = false,
                                 default = nil)
  if valid_600909 != nil:
    section.add "X-Amz-Date", valid_600909
  var valid_600910 = header.getOrDefault("X-Amz-Security-Token")
  valid_600910 = validateParameter(valid_600910, JString, required = false,
                                 default = nil)
  if valid_600910 != nil:
    section.add "X-Amz-Security-Token", valid_600910
  var valid_600911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600911 = validateParameter(valid_600911, JString, required = false,
                                 default = nil)
  if valid_600911 != nil:
    section.add "X-Amz-Content-Sha256", valid_600911
  var valid_600912 = header.getOrDefault("X-Amz-Algorithm")
  valid_600912 = validateParameter(valid_600912, JString, required = false,
                                 default = nil)
  if valid_600912 != nil:
    section.add "X-Amz-Algorithm", valid_600912
  var valid_600913 = header.getOrDefault("X-Amz-Signature")
  valid_600913 = validateParameter(valid_600913, JString, required = false,
                                 default = nil)
  if valid_600913 != nil:
    section.add "X-Amz-Signature", valid_600913
  var valid_600914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600914 = validateParameter(valid_600914, JString, required = false,
                                 default = nil)
  if valid_600914 != nil:
    section.add "X-Amz-SignedHeaders", valid_600914
  var valid_600915 = header.getOrDefault("X-Amz-Credential")
  valid_600915 = validateParameter(valid_600915, JString, required = false,
                                 default = nil)
  if valid_600915 != nil:
    section.add "X-Amz-Credential", valid_600915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600916: Call_GetDescribeLoadBalancers_600901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_600916.validator(path, query, header, formData, body)
  let scheme = call_600916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600916.url(scheme.get, call_600916.host, call_600916.base,
                         call_600916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600916, url, valid)

proc call*(call_600917: Call_GetDescribeLoadBalancers_600901;
          AutoScalingGroupName: string; MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600918 = newJObject()
  add(query_600918, "MaxRecords", newJInt(MaxRecords))
  add(query_600918, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_600918, "NextToken", newJString(NextToken))
  add(query_600918, "Action", newJString(Action))
  add(query_600918, "Version", newJString(Version))
  result = call_600917.call(nil, query_600918, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_600901(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_600902, base: "/",
    url: url_GetDescribeLoadBalancers_600903, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_600953 = ref object of OpenApiRestCall_599368
proc url_PostDescribeMetricCollectionTypes_600955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_600954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600956 = query.getOrDefault("Action")
  valid_600956 = validateParameter(valid_600956, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_600956 != nil:
    section.add "Action", valid_600956
  var valid_600957 = query.getOrDefault("Version")
  valid_600957 = validateParameter(valid_600957, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600957 != nil:
    section.add "Version", valid_600957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600958 = header.getOrDefault("X-Amz-Date")
  valid_600958 = validateParameter(valid_600958, JString, required = false,
                                 default = nil)
  if valid_600958 != nil:
    section.add "X-Amz-Date", valid_600958
  var valid_600959 = header.getOrDefault("X-Amz-Security-Token")
  valid_600959 = validateParameter(valid_600959, JString, required = false,
                                 default = nil)
  if valid_600959 != nil:
    section.add "X-Amz-Security-Token", valid_600959
  var valid_600960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600960 = validateParameter(valid_600960, JString, required = false,
                                 default = nil)
  if valid_600960 != nil:
    section.add "X-Amz-Content-Sha256", valid_600960
  var valid_600961 = header.getOrDefault("X-Amz-Algorithm")
  valid_600961 = validateParameter(valid_600961, JString, required = false,
                                 default = nil)
  if valid_600961 != nil:
    section.add "X-Amz-Algorithm", valid_600961
  var valid_600962 = header.getOrDefault("X-Amz-Signature")
  valid_600962 = validateParameter(valid_600962, JString, required = false,
                                 default = nil)
  if valid_600962 != nil:
    section.add "X-Amz-Signature", valid_600962
  var valid_600963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600963 = validateParameter(valid_600963, JString, required = false,
                                 default = nil)
  if valid_600963 != nil:
    section.add "X-Amz-SignedHeaders", valid_600963
  var valid_600964 = header.getOrDefault("X-Amz-Credential")
  valid_600964 = validateParameter(valid_600964, JString, required = false,
                                 default = nil)
  if valid_600964 != nil:
    section.add "X-Amz-Credential", valid_600964
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600965: Call_PostDescribeMetricCollectionTypes_600953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_600965.validator(path, query, header, formData, body)
  let scheme = call_600965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600965.url(scheme.get, call_600965.host, call_600965.base,
                         call_600965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600965, url, valid)

proc call*(call_600966: Call_PostDescribeMetricCollectionTypes_600953;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600967 = newJObject()
  add(query_600967, "Action", newJString(Action))
  add(query_600967, "Version", newJString(Version))
  result = call_600966.call(nil, query_600967, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_600953(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_600954, base: "/",
    url: url_PostDescribeMetricCollectionTypes_600955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_600938 = ref object of OpenApiRestCall_599368
proc url_GetDescribeMetricCollectionTypes_600940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_600939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600941 = query.getOrDefault("Action")
  valid_600941 = validateParameter(valid_600941, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_600941 != nil:
    section.add "Action", valid_600941
  var valid_600942 = query.getOrDefault("Version")
  valid_600942 = validateParameter(valid_600942, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600942 != nil:
    section.add "Version", valid_600942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600943 = header.getOrDefault("X-Amz-Date")
  valid_600943 = validateParameter(valid_600943, JString, required = false,
                                 default = nil)
  if valid_600943 != nil:
    section.add "X-Amz-Date", valid_600943
  var valid_600944 = header.getOrDefault("X-Amz-Security-Token")
  valid_600944 = validateParameter(valid_600944, JString, required = false,
                                 default = nil)
  if valid_600944 != nil:
    section.add "X-Amz-Security-Token", valid_600944
  var valid_600945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600945 = validateParameter(valid_600945, JString, required = false,
                                 default = nil)
  if valid_600945 != nil:
    section.add "X-Amz-Content-Sha256", valid_600945
  var valid_600946 = header.getOrDefault("X-Amz-Algorithm")
  valid_600946 = validateParameter(valid_600946, JString, required = false,
                                 default = nil)
  if valid_600946 != nil:
    section.add "X-Amz-Algorithm", valid_600946
  var valid_600947 = header.getOrDefault("X-Amz-Signature")
  valid_600947 = validateParameter(valid_600947, JString, required = false,
                                 default = nil)
  if valid_600947 != nil:
    section.add "X-Amz-Signature", valid_600947
  var valid_600948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600948 = validateParameter(valid_600948, JString, required = false,
                                 default = nil)
  if valid_600948 != nil:
    section.add "X-Amz-SignedHeaders", valid_600948
  var valid_600949 = header.getOrDefault("X-Amz-Credential")
  valid_600949 = validateParameter(valid_600949, JString, required = false,
                                 default = nil)
  if valid_600949 != nil:
    section.add "X-Amz-Credential", valid_600949
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600950: Call_GetDescribeMetricCollectionTypes_600938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_600950.validator(path, query, header, formData, body)
  let scheme = call_600950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600950.url(scheme.get, call_600950.host, call_600950.base,
                         call_600950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600950, url, valid)

proc call*(call_600951: Call_GetDescribeMetricCollectionTypes_600938;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_600952 = newJObject()
  add(query_600952, "Action", newJString(Action))
  add(query_600952, "Version", newJString(Version))
  result = call_600951.call(nil, query_600952, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_600938(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_600939, base: "/",
    url: url_GetDescribeMetricCollectionTypes_600940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_600986 = ref object of OpenApiRestCall_599368
proc url_PostDescribeNotificationConfigurations_600988(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeNotificationConfigurations_600987(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600989 = query.getOrDefault("Action")
  valid_600989 = validateParameter(valid_600989, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_600989 != nil:
    section.add "Action", valid_600989
  var valid_600990 = query.getOrDefault("Version")
  valid_600990 = validateParameter(valid_600990, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600990 != nil:
    section.add "Version", valid_600990
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600991 = header.getOrDefault("X-Amz-Date")
  valid_600991 = validateParameter(valid_600991, JString, required = false,
                                 default = nil)
  if valid_600991 != nil:
    section.add "X-Amz-Date", valid_600991
  var valid_600992 = header.getOrDefault("X-Amz-Security-Token")
  valid_600992 = validateParameter(valid_600992, JString, required = false,
                                 default = nil)
  if valid_600992 != nil:
    section.add "X-Amz-Security-Token", valid_600992
  var valid_600993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600993 = validateParameter(valid_600993, JString, required = false,
                                 default = nil)
  if valid_600993 != nil:
    section.add "X-Amz-Content-Sha256", valid_600993
  var valid_600994 = header.getOrDefault("X-Amz-Algorithm")
  valid_600994 = validateParameter(valid_600994, JString, required = false,
                                 default = nil)
  if valid_600994 != nil:
    section.add "X-Amz-Algorithm", valid_600994
  var valid_600995 = header.getOrDefault("X-Amz-Signature")
  valid_600995 = validateParameter(valid_600995, JString, required = false,
                                 default = nil)
  if valid_600995 != nil:
    section.add "X-Amz-Signature", valid_600995
  var valid_600996 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600996 = validateParameter(valid_600996, JString, required = false,
                                 default = nil)
  if valid_600996 != nil:
    section.add "X-Amz-SignedHeaders", valid_600996
  var valid_600997 = header.getOrDefault("X-Amz-Credential")
  valid_600997 = validateParameter(valid_600997, JString, required = false,
                                 default = nil)
  if valid_600997 != nil:
    section.add "X-Amz-Credential", valid_600997
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_600998 = formData.getOrDefault("NextToken")
  valid_600998 = validateParameter(valid_600998, JString, required = false,
                                 default = nil)
  if valid_600998 != nil:
    section.add "NextToken", valid_600998
  var valid_600999 = formData.getOrDefault("MaxRecords")
  valid_600999 = validateParameter(valid_600999, JInt, required = false, default = nil)
  if valid_600999 != nil:
    section.add "MaxRecords", valid_600999
  var valid_601000 = formData.getOrDefault("AutoScalingGroupNames")
  valid_601000 = validateParameter(valid_601000, JArray, required = false,
                                 default = nil)
  if valid_601000 != nil:
    section.add "AutoScalingGroupNames", valid_601000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601001: Call_PostDescribeNotificationConfigurations_600986;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_601001.validator(path, query, header, formData, body)
  let scheme = call_601001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601001.url(scheme.get, call_601001.host, call_601001.base,
                         call_601001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601001, url, valid)

proc call*(call_601002: Call_PostDescribeNotificationConfigurations_600986;
          NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          MaxRecords: int = 0; Version: string = "2011-01-01";
          AutoScalingGroupNames: JsonNode = nil): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  var query_601003 = newJObject()
  var formData_601004 = newJObject()
  add(formData_601004, "NextToken", newJString(NextToken))
  add(query_601003, "Action", newJString(Action))
  add(formData_601004, "MaxRecords", newJInt(MaxRecords))
  add(query_601003, "Version", newJString(Version))
  if AutoScalingGroupNames != nil:
    formData_601004.add "AutoScalingGroupNames", AutoScalingGroupNames
  result = call_601002.call(nil, query_601003, nil, formData_601004, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_600986(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_600987, base: "/",
    url: url_PostDescribeNotificationConfigurations_600988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_600968 = ref object of OpenApiRestCall_599368
proc url_GetDescribeNotificationConfigurations_600970(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeNotificationConfigurations_600969(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_600971 = query.getOrDefault("MaxRecords")
  valid_600971 = validateParameter(valid_600971, JInt, required = false, default = nil)
  if valid_600971 != nil:
    section.add "MaxRecords", valid_600971
  var valid_600972 = query.getOrDefault("NextToken")
  valid_600972 = validateParameter(valid_600972, JString, required = false,
                                 default = nil)
  if valid_600972 != nil:
    section.add "NextToken", valid_600972
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_600973 = query.getOrDefault("Action")
  valid_600973 = validateParameter(valid_600973, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_600973 != nil:
    section.add "Action", valid_600973
  var valid_600974 = query.getOrDefault("AutoScalingGroupNames")
  valid_600974 = validateParameter(valid_600974, JArray, required = false,
                                 default = nil)
  if valid_600974 != nil:
    section.add "AutoScalingGroupNames", valid_600974
  var valid_600975 = query.getOrDefault("Version")
  valid_600975 = validateParameter(valid_600975, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_600975 != nil:
    section.add "Version", valid_600975
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600976 = header.getOrDefault("X-Amz-Date")
  valid_600976 = validateParameter(valid_600976, JString, required = false,
                                 default = nil)
  if valid_600976 != nil:
    section.add "X-Amz-Date", valid_600976
  var valid_600977 = header.getOrDefault("X-Amz-Security-Token")
  valid_600977 = validateParameter(valid_600977, JString, required = false,
                                 default = nil)
  if valid_600977 != nil:
    section.add "X-Amz-Security-Token", valid_600977
  var valid_600978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600978 = validateParameter(valid_600978, JString, required = false,
                                 default = nil)
  if valid_600978 != nil:
    section.add "X-Amz-Content-Sha256", valid_600978
  var valid_600979 = header.getOrDefault("X-Amz-Algorithm")
  valid_600979 = validateParameter(valid_600979, JString, required = false,
                                 default = nil)
  if valid_600979 != nil:
    section.add "X-Amz-Algorithm", valid_600979
  var valid_600980 = header.getOrDefault("X-Amz-Signature")
  valid_600980 = validateParameter(valid_600980, JString, required = false,
                                 default = nil)
  if valid_600980 != nil:
    section.add "X-Amz-Signature", valid_600980
  var valid_600981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600981 = validateParameter(valid_600981, JString, required = false,
                                 default = nil)
  if valid_600981 != nil:
    section.add "X-Amz-SignedHeaders", valid_600981
  var valid_600982 = header.getOrDefault("X-Amz-Credential")
  valid_600982 = validateParameter(valid_600982, JString, required = false,
                                 default = nil)
  if valid_600982 != nil:
    section.add "X-Amz-Credential", valid_600982
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600983: Call_GetDescribeNotificationConfigurations_600968;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_600983.validator(path, query, header, formData, body)
  let scheme = call_600983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600983.url(scheme.get, call_600983.host, call_600983.base,
                         call_600983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_600983, url, valid)

proc call*(call_600984: Call_GetDescribeNotificationConfigurations_600968;
          MaxRecords: int = 0; NextToken: string = "";
          Action: string = "DescribeNotificationConfigurations";
          AutoScalingGroupNames: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Version: string (required)
  var query_600985 = newJObject()
  add(query_600985, "MaxRecords", newJInt(MaxRecords))
  add(query_600985, "NextToken", newJString(NextToken))
  add(query_600985, "Action", newJString(Action))
  if AutoScalingGroupNames != nil:
    query_600985.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_600985, "Version", newJString(Version))
  result = call_600984.call(nil, query_600985, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_600968(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_600969, base: "/",
    url: url_GetDescribeNotificationConfigurations_600970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_601025 = ref object of OpenApiRestCall_599368
proc url_PostDescribePolicies_601027(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePolicies_601026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601028 = query.getOrDefault("Action")
  valid_601028 = validateParameter(valid_601028, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_601028 != nil:
    section.add "Action", valid_601028
  var valid_601029 = query.getOrDefault("Version")
  valid_601029 = validateParameter(valid_601029, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601029 != nil:
    section.add "Version", valid_601029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601030 = header.getOrDefault("X-Amz-Date")
  valid_601030 = validateParameter(valid_601030, JString, required = false,
                                 default = nil)
  if valid_601030 != nil:
    section.add "X-Amz-Date", valid_601030
  var valid_601031 = header.getOrDefault("X-Amz-Security-Token")
  valid_601031 = validateParameter(valid_601031, JString, required = false,
                                 default = nil)
  if valid_601031 != nil:
    section.add "X-Amz-Security-Token", valid_601031
  var valid_601032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601032 = validateParameter(valid_601032, JString, required = false,
                                 default = nil)
  if valid_601032 != nil:
    section.add "X-Amz-Content-Sha256", valid_601032
  var valid_601033 = header.getOrDefault("X-Amz-Algorithm")
  valid_601033 = validateParameter(valid_601033, JString, required = false,
                                 default = nil)
  if valid_601033 != nil:
    section.add "X-Amz-Algorithm", valid_601033
  var valid_601034 = header.getOrDefault("X-Amz-Signature")
  valid_601034 = validateParameter(valid_601034, JString, required = false,
                                 default = nil)
  if valid_601034 != nil:
    section.add "X-Amz-Signature", valid_601034
  var valid_601035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601035 = validateParameter(valid_601035, JString, required = false,
                                 default = nil)
  if valid_601035 != nil:
    section.add "X-Amz-SignedHeaders", valid_601035
  var valid_601036 = header.getOrDefault("X-Amz-Credential")
  valid_601036 = validateParameter(valid_601036, JString, required = false,
                                 default = nil)
  if valid_601036 != nil:
    section.add "X-Amz-Credential", valid_601036
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_601037 = formData.getOrDefault("AutoScalingGroupName")
  valid_601037 = validateParameter(valid_601037, JString, required = false,
                                 default = nil)
  if valid_601037 != nil:
    section.add "AutoScalingGroupName", valid_601037
  var valid_601038 = formData.getOrDefault("NextToken")
  valid_601038 = validateParameter(valid_601038, JString, required = false,
                                 default = nil)
  if valid_601038 != nil:
    section.add "NextToken", valid_601038
  var valid_601039 = formData.getOrDefault("PolicyNames")
  valid_601039 = validateParameter(valid_601039, JArray, required = false,
                                 default = nil)
  if valid_601039 != nil:
    section.add "PolicyNames", valid_601039
  var valid_601040 = formData.getOrDefault("PolicyTypes")
  valid_601040 = validateParameter(valid_601040, JArray, required = false,
                                 default = nil)
  if valid_601040 != nil:
    section.add "PolicyTypes", valid_601040
  var valid_601041 = formData.getOrDefault("MaxRecords")
  valid_601041 = validateParameter(valid_601041, JInt, required = false, default = nil)
  if valid_601041 != nil:
    section.add "MaxRecords", valid_601041
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601042: Call_PostDescribePolicies_601025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_601042.validator(path, query, header, formData, body)
  let scheme = call_601042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601042.url(scheme.get, call_601042.host, call_601042.base,
                         call_601042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601042, url, valid)

proc call*(call_601043: Call_PostDescribePolicies_601025;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          PolicyNames: JsonNode = nil; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_601044 = newJObject()
  var formData_601045 = newJObject()
  add(formData_601045, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601045, "NextToken", newJString(NextToken))
  if PolicyNames != nil:
    formData_601045.add "PolicyNames", PolicyNames
  add(query_601044, "Action", newJString(Action))
  if PolicyTypes != nil:
    formData_601045.add "PolicyTypes", PolicyTypes
  add(formData_601045, "MaxRecords", newJInt(MaxRecords))
  add(query_601044, "Version", newJString(Version))
  result = call_601043.call(nil, query_601044, nil, formData_601045, nil)

var postDescribePolicies* = Call_PostDescribePolicies_601025(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_601026, base: "/",
    url: url_PostDescribePolicies_601027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_601005 = ref object of OpenApiRestCall_599368
proc url_GetDescribePolicies_601007(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePolicies_601006(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  section = newJObject()
  var valid_601008 = query.getOrDefault("MaxRecords")
  valid_601008 = validateParameter(valid_601008, JInt, required = false, default = nil)
  if valid_601008 != nil:
    section.add "MaxRecords", valid_601008
  var valid_601009 = query.getOrDefault("AutoScalingGroupName")
  valid_601009 = validateParameter(valid_601009, JString, required = false,
                                 default = nil)
  if valid_601009 != nil:
    section.add "AutoScalingGroupName", valid_601009
  var valid_601010 = query.getOrDefault("NextToken")
  valid_601010 = validateParameter(valid_601010, JString, required = false,
                                 default = nil)
  if valid_601010 != nil:
    section.add "NextToken", valid_601010
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601011 = query.getOrDefault("Action")
  valid_601011 = validateParameter(valid_601011, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_601011 != nil:
    section.add "Action", valid_601011
  var valid_601012 = query.getOrDefault("PolicyNames")
  valid_601012 = validateParameter(valid_601012, JArray, required = false,
                                 default = nil)
  if valid_601012 != nil:
    section.add "PolicyNames", valid_601012
  var valid_601013 = query.getOrDefault("Version")
  valid_601013 = validateParameter(valid_601013, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601013 != nil:
    section.add "Version", valid_601013
  var valid_601014 = query.getOrDefault("PolicyTypes")
  valid_601014 = validateParameter(valid_601014, JArray, required = false,
                                 default = nil)
  if valid_601014 != nil:
    section.add "PolicyTypes", valid_601014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601015 = header.getOrDefault("X-Amz-Date")
  valid_601015 = validateParameter(valid_601015, JString, required = false,
                                 default = nil)
  if valid_601015 != nil:
    section.add "X-Amz-Date", valid_601015
  var valid_601016 = header.getOrDefault("X-Amz-Security-Token")
  valid_601016 = validateParameter(valid_601016, JString, required = false,
                                 default = nil)
  if valid_601016 != nil:
    section.add "X-Amz-Security-Token", valid_601016
  var valid_601017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601017 = validateParameter(valid_601017, JString, required = false,
                                 default = nil)
  if valid_601017 != nil:
    section.add "X-Amz-Content-Sha256", valid_601017
  var valid_601018 = header.getOrDefault("X-Amz-Algorithm")
  valid_601018 = validateParameter(valid_601018, JString, required = false,
                                 default = nil)
  if valid_601018 != nil:
    section.add "X-Amz-Algorithm", valid_601018
  var valid_601019 = header.getOrDefault("X-Amz-Signature")
  valid_601019 = validateParameter(valid_601019, JString, required = false,
                                 default = nil)
  if valid_601019 != nil:
    section.add "X-Amz-Signature", valid_601019
  var valid_601020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601020 = validateParameter(valid_601020, JString, required = false,
                                 default = nil)
  if valid_601020 != nil:
    section.add "X-Amz-SignedHeaders", valid_601020
  var valid_601021 = header.getOrDefault("X-Amz-Credential")
  valid_601021 = validateParameter(valid_601021, JString, required = false,
                                 default = nil)
  if valid_601021 != nil:
    section.add "X-Amz-Credential", valid_601021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601022: Call_GetDescribePolicies_601005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_601022.validator(path, query, header, formData, body)
  let scheme = call_601022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601022.url(scheme.get, call_601022.host, call_601022.base,
                         call_601022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601022, url, valid)

proc call*(call_601023: Call_GetDescribePolicies_601005; MaxRecords: int = 0;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          Action: string = "DescribePolicies"; PolicyNames: JsonNode = nil;
          Version: string = "2011-01-01"; PolicyTypes: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Version: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  var query_601024 = newJObject()
  add(query_601024, "MaxRecords", newJInt(MaxRecords))
  add(query_601024, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601024, "NextToken", newJString(NextToken))
  add(query_601024, "Action", newJString(Action))
  if PolicyNames != nil:
    query_601024.add "PolicyNames", PolicyNames
  add(query_601024, "Version", newJString(Version))
  if PolicyTypes != nil:
    query_601024.add "PolicyTypes", PolicyTypes
  result = call_601023.call(nil, query_601024, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_601005(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_601006, base: "/",
    url: url_GetDescribePolicies_601007, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_601065 = ref object of OpenApiRestCall_599368
proc url_PostDescribeScalingActivities_601067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingActivities_601066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601068 = query.getOrDefault("Action")
  valid_601068 = validateParameter(valid_601068, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_601068 != nil:
    section.add "Action", valid_601068
  var valid_601069 = query.getOrDefault("Version")
  valid_601069 = validateParameter(valid_601069, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601069 != nil:
    section.add "Version", valid_601069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601070 = header.getOrDefault("X-Amz-Date")
  valid_601070 = validateParameter(valid_601070, JString, required = false,
                                 default = nil)
  if valid_601070 != nil:
    section.add "X-Amz-Date", valid_601070
  var valid_601071 = header.getOrDefault("X-Amz-Security-Token")
  valid_601071 = validateParameter(valid_601071, JString, required = false,
                                 default = nil)
  if valid_601071 != nil:
    section.add "X-Amz-Security-Token", valid_601071
  var valid_601072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601072 = validateParameter(valid_601072, JString, required = false,
                                 default = nil)
  if valid_601072 != nil:
    section.add "X-Amz-Content-Sha256", valid_601072
  var valid_601073 = header.getOrDefault("X-Amz-Algorithm")
  valid_601073 = validateParameter(valid_601073, JString, required = false,
                                 default = nil)
  if valid_601073 != nil:
    section.add "X-Amz-Algorithm", valid_601073
  var valid_601074 = header.getOrDefault("X-Amz-Signature")
  valid_601074 = validateParameter(valid_601074, JString, required = false,
                                 default = nil)
  if valid_601074 != nil:
    section.add "X-Amz-Signature", valid_601074
  var valid_601075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601075 = validateParameter(valid_601075, JString, required = false,
                                 default = nil)
  if valid_601075 != nil:
    section.add "X-Amz-SignedHeaders", valid_601075
  var valid_601076 = header.getOrDefault("X-Amz-Credential")
  valid_601076 = validateParameter(valid_601076, JString, required = false,
                                 default = nil)
  if valid_601076 != nil:
    section.add "X-Amz-Credential", valid_601076
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_601077 = formData.getOrDefault("AutoScalingGroupName")
  valid_601077 = validateParameter(valid_601077, JString, required = false,
                                 default = nil)
  if valid_601077 != nil:
    section.add "AutoScalingGroupName", valid_601077
  var valid_601078 = formData.getOrDefault("NextToken")
  valid_601078 = validateParameter(valid_601078, JString, required = false,
                                 default = nil)
  if valid_601078 != nil:
    section.add "NextToken", valid_601078
  var valid_601079 = formData.getOrDefault("ActivityIds")
  valid_601079 = validateParameter(valid_601079, JArray, required = false,
                                 default = nil)
  if valid_601079 != nil:
    section.add "ActivityIds", valid_601079
  var valid_601080 = formData.getOrDefault("MaxRecords")
  valid_601080 = validateParameter(valid_601080, JInt, required = false, default = nil)
  if valid_601080 != nil:
    section.add "MaxRecords", valid_601080
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601081: Call_PostDescribeScalingActivities_601065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_601081.validator(path, query, header, formData, body)
  let scheme = call_601081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601081.url(scheme.get, call_601081.host, call_601081.base,
                         call_601081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601081, url, valid)

proc call*(call_601082: Call_PostDescribeScalingActivities_601065;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          ActivityIds: JsonNode = nil; Action: string = "DescribeScalingActivities";
          MaxRecords: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_601083 = newJObject()
  var formData_601084 = newJObject()
  add(formData_601084, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601084, "NextToken", newJString(NextToken))
  if ActivityIds != nil:
    formData_601084.add "ActivityIds", ActivityIds
  add(query_601083, "Action", newJString(Action))
  add(formData_601084, "MaxRecords", newJInt(MaxRecords))
  add(query_601083, "Version", newJString(Version))
  result = call_601082.call(nil, query_601083, nil, formData_601084, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_601065(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_601066, base: "/",
    url: url_PostDescribeScalingActivities_601067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_601046 = ref object of OpenApiRestCall_599368
proc url_GetDescribeScalingActivities_601048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingActivities_601047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601049 = query.getOrDefault("MaxRecords")
  valid_601049 = validateParameter(valid_601049, JInt, required = false, default = nil)
  if valid_601049 != nil:
    section.add "MaxRecords", valid_601049
  var valid_601050 = query.getOrDefault("AutoScalingGroupName")
  valid_601050 = validateParameter(valid_601050, JString, required = false,
                                 default = nil)
  if valid_601050 != nil:
    section.add "AutoScalingGroupName", valid_601050
  var valid_601051 = query.getOrDefault("NextToken")
  valid_601051 = validateParameter(valid_601051, JString, required = false,
                                 default = nil)
  if valid_601051 != nil:
    section.add "NextToken", valid_601051
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601052 = query.getOrDefault("Action")
  valid_601052 = validateParameter(valid_601052, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_601052 != nil:
    section.add "Action", valid_601052
  var valid_601053 = query.getOrDefault("ActivityIds")
  valid_601053 = validateParameter(valid_601053, JArray, required = false,
                                 default = nil)
  if valid_601053 != nil:
    section.add "ActivityIds", valid_601053
  var valid_601054 = query.getOrDefault("Version")
  valid_601054 = validateParameter(valid_601054, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601054 != nil:
    section.add "Version", valid_601054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601055 = header.getOrDefault("X-Amz-Date")
  valid_601055 = validateParameter(valid_601055, JString, required = false,
                                 default = nil)
  if valid_601055 != nil:
    section.add "X-Amz-Date", valid_601055
  var valid_601056 = header.getOrDefault("X-Amz-Security-Token")
  valid_601056 = validateParameter(valid_601056, JString, required = false,
                                 default = nil)
  if valid_601056 != nil:
    section.add "X-Amz-Security-Token", valid_601056
  var valid_601057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601057 = validateParameter(valid_601057, JString, required = false,
                                 default = nil)
  if valid_601057 != nil:
    section.add "X-Amz-Content-Sha256", valid_601057
  var valid_601058 = header.getOrDefault("X-Amz-Algorithm")
  valid_601058 = validateParameter(valid_601058, JString, required = false,
                                 default = nil)
  if valid_601058 != nil:
    section.add "X-Amz-Algorithm", valid_601058
  var valid_601059 = header.getOrDefault("X-Amz-Signature")
  valid_601059 = validateParameter(valid_601059, JString, required = false,
                                 default = nil)
  if valid_601059 != nil:
    section.add "X-Amz-Signature", valid_601059
  var valid_601060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601060 = validateParameter(valid_601060, JString, required = false,
                                 default = nil)
  if valid_601060 != nil:
    section.add "X-Amz-SignedHeaders", valid_601060
  var valid_601061 = header.getOrDefault("X-Amz-Credential")
  valid_601061 = validateParameter(valid_601061, JString, required = false,
                                 default = nil)
  if valid_601061 != nil:
    section.add "X-Amz-Credential", valid_601061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601062: Call_GetDescribeScalingActivities_601046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_601062.validator(path, query, header, formData, body)
  let scheme = call_601062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601062.url(scheme.get, call_601062.host, call_601062.base,
                         call_601062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601062, url, valid)

proc call*(call_601063: Call_GetDescribeScalingActivities_601046;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          NextToken: string = ""; Action: string = "DescribeScalingActivities";
          ActivityIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   Version: string (required)
  var query_601064 = newJObject()
  add(query_601064, "MaxRecords", newJInt(MaxRecords))
  add(query_601064, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601064, "NextToken", newJString(NextToken))
  add(query_601064, "Action", newJString(Action))
  if ActivityIds != nil:
    query_601064.add "ActivityIds", ActivityIds
  add(query_601064, "Version", newJString(Version))
  result = call_601063.call(nil, query_601064, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_601046(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_601047, base: "/",
    url: url_GetDescribeScalingActivities_601048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_601100 = ref object of OpenApiRestCall_599368
proc url_PostDescribeScalingProcessTypes_601102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingProcessTypes_601101(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601103 = query.getOrDefault("Action")
  valid_601103 = validateParameter(valid_601103, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_601103 != nil:
    section.add "Action", valid_601103
  var valid_601104 = query.getOrDefault("Version")
  valid_601104 = validateParameter(valid_601104, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601104 != nil:
    section.add "Version", valid_601104
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601105 = header.getOrDefault("X-Amz-Date")
  valid_601105 = validateParameter(valid_601105, JString, required = false,
                                 default = nil)
  if valid_601105 != nil:
    section.add "X-Amz-Date", valid_601105
  var valid_601106 = header.getOrDefault("X-Amz-Security-Token")
  valid_601106 = validateParameter(valid_601106, JString, required = false,
                                 default = nil)
  if valid_601106 != nil:
    section.add "X-Amz-Security-Token", valid_601106
  var valid_601107 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601107 = validateParameter(valid_601107, JString, required = false,
                                 default = nil)
  if valid_601107 != nil:
    section.add "X-Amz-Content-Sha256", valid_601107
  var valid_601108 = header.getOrDefault("X-Amz-Algorithm")
  valid_601108 = validateParameter(valid_601108, JString, required = false,
                                 default = nil)
  if valid_601108 != nil:
    section.add "X-Amz-Algorithm", valid_601108
  var valid_601109 = header.getOrDefault("X-Amz-Signature")
  valid_601109 = validateParameter(valid_601109, JString, required = false,
                                 default = nil)
  if valid_601109 != nil:
    section.add "X-Amz-Signature", valid_601109
  var valid_601110 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601110 = validateParameter(valid_601110, JString, required = false,
                                 default = nil)
  if valid_601110 != nil:
    section.add "X-Amz-SignedHeaders", valid_601110
  var valid_601111 = header.getOrDefault("X-Amz-Credential")
  valid_601111 = validateParameter(valid_601111, JString, required = false,
                                 default = nil)
  if valid_601111 != nil:
    section.add "X-Amz-Credential", valid_601111
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601112: Call_PostDescribeScalingProcessTypes_601100;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_601112.validator(path, query, header, formData, body)
  let scheme = call_601112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601112.url(scheme.get, call_601112.host, call_601112.base,
                         call_601112.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601112, url, valid)

proc call*(call_601113: Call_PostDescribeScalingProcessTypes_601100;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601114 = newJObject()
  add(query_601114, "Action", newJString(Action))
  add(query_601114, "Version", newJString(Version))
  result = call_601113.call(nil, query_601114, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_601100(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_601101, base: "/",
    url: url_PostDescribeScalingProcessTypes_601102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_601085 = ref object of OpenApiRestCall_599368
proc url_GetDescribeScalingProcessTypes_601087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingProcessTypes_601086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601088 = query.getOrDefault("Action")
  valid_601088 = validateParameter(valid_601088, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_601088 != nil:
    section.add "Action", valid_601088
  var valid_601089 = query.getOrDefault("Version")
  valid_601089 = validateParameter(valid_601089, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601089 != nil:
    section.add "Version", valid_601089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601090 = header.getOrDefault("X-Amz-Date")
  valid_601090 = validateParameter(valid_601090, JString, required = false,
                                 default = nil)
  if valid_601090 != nil:
    section.add "X-Amz-Date", valid_601090
  var valid_601091 = header.getOrDefault("X-Amz-Security-Token")
  valid_601091 = validateParameter(valid_601091, JString, required = false,
                                 default = nil)
  if valid_601091 != nil:
    section.add "X-Amz-Security-Token", valid_601091
  var valid_601092 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601092 = validateParameter(valid_601092, JString, required = false,
                                 default = nil)
  if valid_601092 != nil:
    section.add "X-Amz-Content-Sha256", valid_601092
  var valid_601093 = header.getOrDefault("X-Amz-Algorithm")
  valid_601093 = validateParameter(valid_601093, JString, required = false,
                                 default = nil)
  if valid_601093 != nil:
    section.add "X-Amz-Algorithm", valid_601093
  var valid_601094 = header.getOrDefault("X-Amz-Signature")
  valid_601094 = validateParameter(valid_601094, JString, required = false,
                                 default = nil)
  if valid_601094 != nil:
    section.add "X-Amz-Signature", valid_601094
  var valid_601095 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601095 = validateParameter(valid_601095, JString, required = false,
                                 default = nil)
  if valid_601095 != nil:
    section.add "X-Amz-SignedHeaders", valid_601095
  var valid_601096 = header.getOrDefault("X-Amz-Credential")
  valid_601096 = validateParameter(valid_601096, JString, required = false,
                                 default = nil)
  if valid_601096 != nil:
    section.add "X-Amz-Credential", valid_601096
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601097: Call_GetDescribeScalingProcessTypes_601085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_601097.validator(path, query, header, formData, body)
  let scheme = call_601097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601097.url(scheme.get, call_601097.host, call_601097.base,
                         call_601097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601097, url, valid)

proc call*(call_601098: Call_GetDescribeScalingProcessTypes_601085;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601099 = newJObject()
  add(query_601099, "Action", newJString(Action))
  add(query_601099, "Version", newJString(Version))
  result = call_601098.call(nil, query_601099, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_601085(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_601086, base: "/",
    url: url_GetDescribeScalingProcessTypes_601087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_601136 = ref object of OpenApiRestCall_599368
proc url_PostDescribeScheduledActions_601138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScheduledActions_601137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601139 = query.getOrDefault("Action")
  valid_601139 = validateParameter(valid_601139, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_601139 != nil:
    section.add "Action", valid_601139
  var valid_601140 = query.getOrDefault("Version")
  valid_601140 = validateParameter(valid_601140, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601140 != nil:
    section.add "Version", valid_601140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601141 = header.getOrDefault("X-Amz-Date")
  valid_601141 = validateParameter(valid_601141, JString, required = false,
                                 default = nil)
  if valid_601141 != nil:
    section.add "X-Amz-Date", valid_601141
  var valid_601142 = header.getOrDefault("X-Amz-Security-Token")
  valid_601142 = validateParameter(valid_601142, JString, required = false,
                                 default = nil)
  if valid_601142 != nil:
    section.add "X-Amz-Security-Token", valid_601142
  var valid_601143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601143 = validateParameter(valid_601143, JString, required = false,
                                 default = nil)
  if valid_601143 != nil:
    section.add "X-Amz-Content-Sha256", valid_601143
  var valid_601144 = header.getOrDefault("X-Amz-Algorithm")
  valid_601144 = validateParameter(valid_601144, JString, required = false,
                                 default = nil)
  if valid_601144 != nil:
    section.add "X-Amz-Algorithm", valid_601144
  var valid_601145 = header.getOrDefault("X-Amz-Signature")
  valid_601145 = validateParameter(valid_601145, JString, required = false,
                                 default = nil)
  if valid_601145 != nil:
    section.add "X-Amz-Signature", valid_601145
  var valid_601146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601146 = validateParameter(valid_601146, JString, required = false,
                                 default = nil)
  if valid_601146 != nil:
    section.add "X-Amz-SignedHeaders", valid_601146
  var valid_601147 = header.getOrDefault("X-Amz-Credential")
  valid_601147 = validateParameter(valid_601147, JString, required = false,
                                 default = nil)
  if valid_601147 != nil:
    section.add "X-Amz-Credential", valid_601147
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_601148 = formData.getOrDefault("AutoScalingGroupName")
  valid_601148 = validateParameter(valid_601148, JString, required = false,
                                 default = nil)
  if valid_601148 != nil:
    section.add "AutoScalingGroupName", valid_601148
  var valid_601149 = formData.getOrDefault("NextToken")
  valid_601149 = validateParameter(valid_601149, JString, required = false,
                                 default = nil)
  if valid_601149 != nil:
    section.add "NextToken", valid_601149
  var valid_601150 = formData.getOrDefault("StartTime")
  valid_601150 = validateParameter(valid_601150, JString, required = false,
                                 default = nil)
  if valid_601150 != nil:
    section.add "StartTime", valid_601150
  var valid_601151 = formData.getOrDefault("EndTime")
  valid_601151 = validateParameter(valid_601151, JString, required = false,
                                 default = nil)
  if valid_601151 != nil:
    section.add "EndTime", valid_601151
  var valid_601152 = formData.getOrDefault("MaxRecords")
  valid_601152 = validateParameter(valid_601152, JInt, required = false, default = nil)
  if valid_601152 != nil:
    section.add "MaxRecords", valid_601152
  var valid_601153 = formData.getOrDefault("ScheduledActionNames")
  valid_601153 = validateParameter(valid_601153, JArray, required = false,
                                 default = nil)
  if valid_601153 != nil:
    section.add "ScheduledActionNames", valid_601153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601154: Call_PostDescribeScheduledActions_601136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_601154.validator(path, query, header, formData, body)
  let scheme = call_601154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601154.url(scheme.get, call_601154.host, call_601154.base,
                         call_601154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601154, url, valid)

proc call*(call_601155: Call_PostDescribeScheduledActions_601136;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          StartTime: string = ""; Action: string = "DescribeScheduledActions";
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2011-01-01";
          ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_601156 = newJObject()
  var formData_601157 = newJObject()
  add(formData_601157, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601157, "NextToken", newJString(NextToken))
  add(formData_601157, "StartTime", newJString(StartTime))
  add(query_601156, "Action", newJString(Action))
  add(formData_601157, "EndTime", newJString(EndTime))
  add(formData_601157, "MaxRecords", newJInt(MaxRecords))
  add(query_601156, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_601157.add "ScheduledActionNames", ScheduledActionNames
  result = call_601155.call(nil, query_601156, nil, formData_601157, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_601136(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_601137, base: "/",
    url: url_PostDescribeScheduledActions_601138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_601115 = ref object of OpenApiRestCall_599368
proc url_GetDescribeScheduledActions_601117(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScheduledActions_601116(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601118 = query.getOrDefault("MaxRecords")
  valid_601118 = validateParameter(valid_601118, JInt, required = false, default = nil)
  if valid_601118 != nil:
    section.add "MaxRecords", valid_601118
  var valid_601119 = query.getOrDefault("AutoScalingGroupName")
  valid_601119 = validateParameter(valid_601119, JString, required = false,
                                 default = nil)
  if valid_601119 != nil:
    section.add "AutoScalingGroupName", valid_601119
  var valid_601120 = query.getOrDefault("StartTime")
  valid_601120 = validateParameter(valid_601120, JString, required = false,
                                 default = nil)
  if valid_601120 != nil:
    section.add "StartTime", valid_601120
  var valid_601121 = query.getOrDefault("NextToken")
  valid_601121 = validateParameter(valid_601121, JString, required = false,
                                 default = nil)
  if valid_601121 != nil:
    section.add "NextToken", valid_601121
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601122 = query.getOrDefault("Action")
  valid_601122 = validateParameter(valid_601122, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_601122 != nil:
    section.add "Action", valid_601122
  var valid_601123 = query.getOrDefault("ScheduledActionNames")
  valid_601123 = validateParameter(valid_601123, JArray, required = false,
                                 default = nil)
  if valid_601123 != nil:
    section.add "ScheduledActionNames", valid_601123
  var valid_601124 = query.getOrDefault("EndTime")
  valid_601124 = validateParameter(valid_601124, JString, required = false,
                                 default = nil)
  if valid_601124 != nil:
    section.add "EndTime", valid_601124
  var valid_601125 = query.getOrDefault("Version")
  valid_601125 = validateParameter(valid_601125, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601125 != nil:
    section.add "Version", valid_601125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601126 = header.getOrDefault("X-Amz-Date")
  valid_601126 = validateParameter(valid_601126, JString, required = false,
                                 default = nil)
  if valid_601126 != nil:
    section.add "X-Amz-Date", valid_601126
  var valid_601127 = header.getOrDefault("X-Amz-Security-Token")
  valid_601127 = validateParameter(valid_601127, JString, required = false,
                                 default = nil)
  if valid_601127 != nil:
    section.add "X-Amz-Security-Token", valid_601127
  var valid_601128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601128 = validateParameter(valid_601128, JString, required = false,
                                 default = nil)
  if valid_601128 != nil:
    section.add "X-Amz-Content-Sha256", valid_601128
  var valid_601129 = header.getOrDefault("X-Amz-Algorithm")
  valid_601129 = validateParameter(valid_601129, JString, required = false,
                                 default = nil)
  if valid_601129 != nil:
    section.add "X-Amz-Algorithm", valid_601129
  var valid_601130 = header.getOrDefault("X-Amz-Signature")
  valid_601130 = validateParameter(valid_601130, JString, required = false,
                                 default = nil)
  if valid_601130 != nil:
    section.add "X-Amz-Signature", valid_601130
  var valid_601131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601131 = validateParameter(valid_601131, JString, required = false,
                                 default = nil)
  if valid_601131 != nil:
    section.add "X-Amz-SignedHeaders", valid_601131
  var valid_601132 = header.getOrDefault("X-Amz-Credential")
  valid_601132 = validateParameter(valid_601132, JString, required = false,
                                 default = nil)
  if valid_601132 != nil:
    section.add "X-Amz-Credential", valid_601132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601133: Call_GetDescribeScheduledActions_601115; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_601133.validator(path, query, header, formData, body)
  let scheme = call_601133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601133.url(scheme.get, call_601133.host, call_601133.base,
                         call_601133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601133, url, valid)

proc call*(call_601134: Call_GetDescribeScheduledActions_601115;
          MaxRecords: int = 0; AutoScalingGroupName: string = "";
          StartTime: string = ""; NextToken: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  var query_601135 = newJObject()
  add(query_601135, "MaxRecords", newJInt(MaxRecords))
  add(query_601135, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601135, "StartTime", newJString(StartTime))
  add(query_601135, "NextToken", newJString(NextToken))
  add(query_601135, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_601135.add "ScheduledActionNames", ScheduledActionNames
  add(query_601135, "EndTime", newJString(EndTime))
  add(query_601135, "Version", newJString(Version))
  result = call_601134.call(nil, query_601135, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_601115(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_601116, base: "/",
    url: url_GetDescribeScheduledActions_601117,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_601176 = ref object of OpenApiRestCall_599368
proc url_PostDescribeTags_601178(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTags_601177(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601179 = query.getOrDefault("Action")
  valid_601179 = validateParameter(valid_601179, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_601179 != nil:
    section.add "Action", valid_601179
  var valid_601180 = query.getOrDefault("Version")
  valid_601180 = validateParameter(valid_601180, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601180 != nil:
    section.add "Version", valid_601180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601181 = header.getOrDefault("X-Amz-Date")
  valid_601181 = validateParameter(valid_601181, JString, required = false,
                                 default = nil)
  if valid_601181 != nil:
    section.add "X-Amz-Date", valid_601181
  var valid_601182 = header.getOrDefault("X-Amz-Security-Token")
  valid_601182 = validateParameter(valid_601182, JString, required = false,
                                 default = nil)
  if valid_601182 != nil:
    section.add "X-Amz-Security-Token", valid_601182
  var valid_601183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601183 = validateParameter(valid_601183, JString, required = false,
                                 default = nil)
  if valid_601183 != nil:
    section.add "X-Amz-Content-Sha256", valid_601183
  var valid_601184 = header.getOrDefault("X-Amz-Algorithm")
  valid_601184 = validateParameter(valid_601184, JString, required = false,
                                 default = nil)
  if valid_601184 != nil:
    section.add "X-Amz-Algorithm", valid_601184
  var valid_601185 = header.getOrDefault("X-Amz-Signature")
  valid_601185 = validateParameter(valid_601185, JString, required = false,
                                 default = nil)
  if valid_601185 != nil:
    section.add "X-Amz-Signature", valid_601185
  var valid_601186 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601186 = validateParameter(valid_601186, JString, required = false,
                                 default = nil)
  if valid_601186 != nil:
    section.add "X-Amz-SignedHeaders", valid_601186
  var valid_601187 = header.getOrDefault("X-Amz-Credential")
  valid_601187 = validateParameter(valid_601187, JString, required = false,
                                 default = nil)
  if valid_601187 != nil:
    section.add "X-Amz-Credential", valid_601187
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_601188 = formData.getOrDefault("NextToken")
  valid_601188 = validateParameter(valid_601188, JString, required = false,
                                 default = nil)
  if valid_601188 != nil:
    section.add "NextToken", valid_601188
  var valid_601189 = formData.getOrDefault("Filters")
  valid_601189 = validateParameter(valid_601189, JArray, required = false,
                                 default = nil)
  if valid_601189 != nil:
    section.add "Filters", valid_601189
  var valid_601190 = formData.getOrDefault("MaxRecords")
  valid_601190 = validateParameter(valid_601190, JInt, required = false, default = nil)
  if valid_601190 != nil:
    section.add "MaxRecords", valid_601190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601191: Call_PostDescribeTags_601176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_601191.validator(path, query, header, formData, body)
  let scheme = call_601191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601191.url(scheme.get, call_601191.host, call_601191.base,
                         call_601191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601191, url, valid)

proc call*(call_601192: Call_PostDescribeTags_601176; NextToken: string = "";
          Action: string = "DescribeTags"; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Version: string (required)
  var query_601193 = newJObject()
  var formData_601194 = newJObject()
  add(formData_601194, "NextToken", newJString(NextToken))
  add(query_601193, "Action", newJString(Action))
  if Filters != nil:
    formData_601194.add "Filters", Filters
  add(formData_601194, "MaxRecords", newJInt(MaxRecords))
  add(query_601193, "Version", newJString(Version))
  result = call_601192.call(nil, query_601193, nil, formData_601194, nil)

var postDescribeTags* = Call_PostDescribeTags_601176(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_601177,
    base: "/", url: url_PostDescribeTags_601178,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_601158 = ref object of OpenApiRestCall_599368
proc url_GetDescribeTags_601160(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTags_601159(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_601161 = query.getOrDefault("MaxRecords")
  valid_601161 = validateParameter(valid_601161, JInt, required = false, default = nil)
  if valid_601161 != nil:
    section.add "MaxRecords", valid_601161
  var valid_601162 = query.getOrDefault("Filters")
  valid_601162 = validateParameter(valid_601162, JArray, required = false,
                                 default = nil)
  if valid_601162 != nil:
    section.add "Filters", valid_601162
  var valid_601163 = query.getOrDefault("NextToken")
  valid_601163 = validateParameter(valid_601163, JString, required = false,
                                 default = nil)
  if valid_601163 != nil:
    section.add "NextToken", valid_601163
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601164 = query.getOrDefault("Action")
  valid_601164 = validateParameter(valid_601164, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_601164 != nil:
    section.add "Action", valid_601164
  var valid_601165 = query.getOrDefault("Version")
  valid_601165 = validateParameter(valid_601165, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601165 != nil:
    section.add "Version", valid_601165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601166 = header.getOrDefault("X-Amz-Date")
  valid_601166 = validateParameter(valid_601166, JString, required = false,
                                 default = nil)
  if valid_601166 != nil:
    section.add "X-Amz-Date", valid_601166
  var valid_601167 = header.getOrDefault("X-Amz-Security-Token")
  valid_601167 = validateParameter(valid_601167, JString, required = false,
                                 default = nil)
  if valid_601167 != nil:
    section.add "X-Amz-Security-Token", valid_601167
  var valid_601168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601168 = validateParameter(valid_601168, JString, required = false,
                                 default = nil)
  if valid_601168 != nil:
    section.add "X-Amz-Content-Sha256", valid_601168
  var valid_601169 = header.getOrDefault("X-Amz-Algorithm")
  valid_601169 = validateParameter(valid_601169, JString, required = false,
                                 default = nil)
  if valid_601169 != nil:
    section.add "X-Amz-Algorithm", valid_601169
  var valid_601170 = header.getOrDefault("X-Amz-Signature")
  valid_601170 = validateParameter(valid_601170, JString, required = false,
                                 default = nil)
  if valid_601170 != nil:
    section.add "X-Amz-Signature", valid_601170
  var valid_601171 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601171 = validateParameter(valid_601171, JString, required = false,
                                 default = nil)
  if valid_601171 != nil:
    section.add "X-Amz-SignedHeaders", valid_601171
  var valid_601172 = header.getOrDefault("X-Amz-Credential")
  valid_601172 = validateParameter(valid_601172, JString, required = false,
                                 default = nil)
  if valid_601172 != nil:
    section.add "X-Amz-Credential", valid_601172
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601173: Call_GetDescribeTags_601158; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_601173.validator(path, query, header, formData, body)
  let scheme = call_601173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601173.url(scheme.get, call_601173.host, call_601173.base,
                         call_601173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601173, url, valid)

proc call*(call_601174: Call_GetDescribeTags_601158; MaxRecords: int = 0;
          Filters: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601175 = newJObject()
  add(query_601175, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_601175.add "Filters", Filters
  add(query_601175, "NextToken", newJString(NextToken))
  add(query_601175, "Action", newJString(Action))
  add(query_601175, "Version", newJString(Version))
  result = call_601174.call(nil, query_601175, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_601158(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_601159,
    base: "/", url: url_GetDescribeTags_601160, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_601210 = ref object of OpenApiRestCall_599368
proc url_PostDescribeTerminationPolicyTypes_601212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_601211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601213 = query.getOrDefault("Action")
  valid_601213 = validateParameter(valid_601213, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_601213 != nil:
    section.add "Action", valid_601213
  var valid_601214 = query.getOrDefault("Version")
  valid_601214 = validateParameter(valid_601214, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601214 != nil:
    section.add "Version", valid_601214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601215 = header.getOrDefault("X-Amz-Date")
  valid_601215 = validateParameter(valid_601215, JString, required = false,
                                 default = nil)
  if valid_601215 != nil:
    section.add "X-Amz-Date", valid_601215
  var valid_601216 = header.getOrDefault("X-Amz-Security-Token")
  valid_601216 = validateParameter(valid_601216, JString, required = false,
                                 default = nil)
  if valid_601216 != nil:
    section.add "X-Amz-Security-Token", valid_601216
  var valid_601217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601217 = validateParameter(valid_601217, JString, required = false,
                                 default = nil)
  if valid_601217 != nil:
    section.add "X-Amz-Content-Sha256", valid_601217
  var valid_601218 = header.getOrDefault("X-Amz-Algorithm")
  valid_601218 = validateParameter(valid_601218, JString, required = false,
                                 default = nil)
  if valid_601218 != nil:
    section.add "X-Amz-Algorithm", valid_601218
  var valid_601219 = header.getOrDefault("X-Amz-Signature")
  valid_601219 = validateParameter(valid_601219, JString, required = false,
                                 default = nil)
  if valid_601219 != nil:
    section.add "X-Amz-Signature", valid_601219
  var valid_601220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601220 = validateParameter(valid_601220, JString, required = false,
                                 default = nil)
  if valid_601220 != nil:
    section.add "X-Amz-SignedHeaders", valid_601220
  var valid_601221 = header.getOrDefault("X-Amz-Credential")
  valid_601221 = validateParameter(valid_601221, JString, required = false,
                                 default = nil)
  if valid_601221 != nil:
    section.add "X-Amz-Credential", valid_601221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601222: Call_PostDescribeTerminationPolicyTypes_601210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601222.validator(path, query, header, formData, body)
  let scheme = call_601222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601222.url(scheme.get, call_601222.host, call_601222.base,
                         call_601222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601222, url, valid)

proc call*(call_601223: Call_PostDescribeTerminationPolicyTypes_601210;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601224 = newJObject()
  add(query_601224, "Action", newJString(Action))
  add(query_601224, "Version", newJString(Version))
  result = call_601223.call(nil, query_601224, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_601210(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_601211, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_601212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_601195 = ref object of OpenApiRestCall_599368
proc url_GetDescribeTerminationPolicyTypes_601197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_601196(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601198 = query.getOrDefault("Action")
  valid_601198 = validateParameter(valid_601198, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_601198 != nil:
    section.add "Action", valid_601198
  var valid_601199 = query.getOrDefault("Version")
  valid_601199 = validateParameter(valid_601199, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601199 != nil:
    section.add "Version", valid_601199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601200 = header.getOrDefault("X-Amz-Date")
  valid_601200 = validateParameter(valid_601200, JString, required = false,
                                 default = nil)
  if valid_601200 != nil:
    section.add "X-Amz-Date", valid_601200
  var valid_601201 = header.getOrDefault("X-Amz-Security-Token")
  valid_601201 = validateParameter(valid_601201, JString, required = false,
                                 default = nil)
  if valid_601201 != nil:
    section.add "X-Amz-Security-Token", valid_601201
  var valid_601202 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601202 = validateParameter(valid_601202, JString, required = false,
                                 default = nil)
  if valid_601202 != nil:
    section.add "X-Amz-Content-Sha256", valid_601202
  var valid_601203 = header.getOrDefault("X-Amz-Algorithm")
  valid_601203 = validateParameter(valid_601203, JString, required = false,
                                 default = nil)
  if valid_601203 != nil:
    section.add "X-Amz-Algorithm", valid_601203
  var valid_601204 = header.getOrDefault("X-Amz-Signature")
  valid_601204 = validateParameter(valid_601204, JString, required = false,
                                 default = nil)
  if valid_601204 != nil:
    section.add "X-Amz-Signature", valid_601204
  var valid_601205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601205 = validateParameter(valid_601205, JString, required = false,
                                 default = nil)
  if valid_601205 != nil:
    section.add "X-Amz-SignedHeaders", valid_601205
  var valid_601206 = header.getOrDefault("X-Amz-Credential")
  valid_601206 = validateParameter(valid_601206, JString, required = false,
                                 default = nil)
  if valid_601206 != nil:
    section.add "X-Amz-Credential", valid_601206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601207: Call_GetDescribeTerminationPolicyTypes_601195;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601207.validator(path, query, header, formData, body)
  let scheme = call_601207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601207.url(scheme.get, call_601207.host, call_601207.base,
                         call_601207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601207, url, valid)

proc call*(call_601208: Call_GetDescribeTerminationPolicyTypes_601195;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601209 = newJObject()
  add(query_601209, "Action", newJString(Action))
  add(query_601209, "Version", newJString(Version))
  result = call_601208.call(nil, query_601209, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_601195(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_601196, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_601197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_601243 = ref object of OpenApiRestCall_599368
proc url_PostDetachInstances_601245(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachInstances_601244(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601246 = query.getOrDefault("Action")
  valid_601246 = validateParameter(valid_601246, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_601246 != nil:
    section.add "Action", valid_601246
  var valid_601247 = query.getOrDefault("Version")
  valid_601247 = validateParameter(valid_601247, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601247 != nil:
    section.add "Version", valid_601247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601248 = header.getOrDefault("X-Amz-Date")
  valid_601248 = validateParameter(valid_601248, JString, required = false,
                                 default = nil)
  if valid_601248 != nil:
    section.add "X-Amz-Date", valid_601248
  var valid_601249 = header.getOrDefault("X-Amz-Security-Token")
  valid_601249 = validateParameter(valid_601249, JString, required = false,
                                 default = nil)
  if valid_601249 != nil:
    section.add "X-Amz-Security-Token", valid_601249
  var valid_601250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601250 = validateParameter(valid_601250, JString, required = false,
                                 default = nil)
  if valid_601250 != nil:
    section.add "X-Amz-Content-Sha256", valid_601250
  var valid_601251 = header.getOrDefault("X-Amz-Algorithm")
  valid_601251 = validateParameter(valid_601251, JString, required = false,
                                 default = nil)
  if valid_601251 != nil:
    section.add "X-Amz-Algorithm", valid_601251
  var valid_601252 = header.getOrDefault("X-Amz-Signature")
  valid_601252 = validateParameter(valid_601252, JString, required = false,
                                 default = nil)
  if valid_601252 != nil:
    section.add "X-Amz-Signature", valid_601252
  var valid_601253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601253 = validateParameter(valid_601253, JString, required = false,
                                 default = nil)
  if valid_601253 != nil:
    section.add "X-Amz-SignedHeaders", valid_601253
  var valid_601254 = header.getOrDefault("X-Amz-Credential")
  valid_601254 = validateParameter(valid_601254, JString, required = false,
                                 default = nil)
  if valid_601254 != nil:
    section.add "X-Amz-Credential", valid_601254
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601255 = formData.getOrDefault("AutoScalingGroupName")
  valid_601255 = validateParameter(valid_601255, JString, required = true,
                                 default = nil)
  if valid_601255 != nil:
    section.add "AutoScalingGroupName", valid_601255
  var valid_601256 = formData.getOrDefault("InstanceIds")
  valid_601256 = validateParameter(valid_601256, JArray, required = false,
                                 default = nil)
  if valid_601256 != nil:
    section.add "InstanceIds", valid_601256
  var valid_601257 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_601257 = validateParameter(valid_601257, JBool, required = true, default = nil)
  if valid_601257 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_601257
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601258: Call_PostDetachInstances_601243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601258.validator(path, query, header, formData, body)
  let scheme = call_601258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601258.url(scheme.get, call_601258.host, call_601258.base,
                         call_601258.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601258, url, valid)

proc call*(call_601259: Call_PostDetachInstances_601243;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601260 = newJObject()
  var formData_601261 = newJObject()
  add(formData_601261, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_601261.add "InstanceIds", InstanceIds
  add(formData_601261, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_601260, "Action", newJString(Action))
  add(query_601260, "Version", newJString(Version))
  result = call_601259.call(nil, query_601260, nil, formData_601261, nil)

var postDetachInstances* = Call_PostDetachInstances_601243(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_601244, base: "/",
    url: url_PostDetachInstances_601245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_601225 = ref object of OpenApiRestCall_599368
proc url_GetDetachInstances_601227(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachInstances_601226(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601228 = query.getOrDefault("AutoScalingGroupName")
  valid_601228 = validateParameter(valid_601228, JString, required = true,
                                 default = nil)
  if valid_601228 != nil:
    section.add "AutoScalingGroupName", valid_601228
  var valid_601229 = query.getOrDefault("Action")
  valid_601229 = validateParameter(valid_601229, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_601229 != nil:
    section.add "Action", valid_601229
  var valid_601230 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_601230 = validateParameter(valid_601230, JBool, required = true, default = nil)
  if valid_601230 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_601230
  var valid_601231 = query.getOrDefault("InstanceIds")
  valid_601231 = validateParameter(valid_601231, JArray, required = false,
                                 default = nil)
  if valid_601231 != nil:
    section.add "InstanceIds", valid_601231
  var valid_601232 = query.getOrDefault("Version")
  valid_601232 = validateParameter(valid_601232, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601232 != nil:
    section.add "Version", valid_601232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601233 = header.getOrDefault("X-Amz-Date")
  valid_601233 = validateParameter(valid_601233, JString, required = false,
                                 default = nil)
  if valid_601233 != nil:
    section.add "X-Amz-Date", valid_601233
  var valid_601234 = header.getOrDefault("X-Amz-Security-Token")
  valid_601234 = validateParameter(valid_601234, JString, required = false,
                                 default = nil)
  if valid_601234 != nil:
    section.add "X-Amz-Security-Token", valid_601234
  var valid_601235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601235 = validateParameter(valid_601235, JString, required = false,
                                 default = nil)
  if valid_601235 != nil:
    section.add "X-Amz-Content-Sha256", valid_601235
  var valid_601236 = header.getOrDefault("X-Amz-Algorithm")
  valid_601236 = validateParameter(valid_601236, JString, required = false,
                                 default = nil)
  if valid_601236 != nil:
    section.add "X-Amz-Algorithm", valid_601236
  var valid_601237 = header.getOrDefault("X-Amz-Signature")
  valid_601237 = validateParameter(valid_601237, JString, required = false,
                                 default = nil)
  if valid_601237 != nil:
    section.add "X-Amz-Signature", valid_601237
  var valid_601238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601238 = validateParameter(valid_601238, JString, required = false,
                                 default = nil)
  if valid_601238 != nil:
    section.add "X-Amz-SignedHeaders", valid_601238
  var valid_601239 = header.getOrDefault("X-Amz-Credential")
  valid_601239 = validateParameter(valid_601239, JString, required = false,
                                 default = nil)
  if valid_601239 != nil:
    section.add "X-Amz-Credential", valid_601239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601240: Call_GetDetachInstances_601225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601240.validator(path, query, header, formData, body)
  let scheme = call_601240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601240.url(scheme.get, call_601240.host, call_601240.base,
                         call_601240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601240, url, valid)

proc call*(call_601241: Call_GetDetachInstances_601225;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          Action: string = "DetachInstances"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_601242 = newJObject()
  add(query_601242, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601242, "Action", newJString(Action))
  add(query_601242, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_601242.add "InstanceIds", InstanceIds
  add(query_601242, "Version", newJString(Version))
  result = call_601241.call(nil, query_601242, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_601225(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_601226, base: "/",
    url: url_GetDetachInstances_601227, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_601279 = ref object of OpenApiRestCall_599368
proc url_PostDetachLoadBalancerTargetGroups_601281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_601280(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601282 = query.getOrDefault("Action")
  valid_601282 = validateParameter(valid_601282, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_601282 != nil:
    section.add "Action", valid_601282
  var valid_601283 = query.getOrDefault("Version")
  valid_601283 = validateParameter(valid_601283, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601283 != nil:
    section.add "Version", valid_601283
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601284 = header.getOrDefault("X-Amz-Date")
  valid_601284 = validateParameter(valid_601284, JString, required = false,
                                 default = nil)
  if valid_601284 != nil:
    section.add "X-Amz-Date", valid_601284
  var valid_601285 = header.getOrDefault("X-Amz-Security-Token")
  valid_601285 = validateParameter(valid_601285, JString, required = false,
                                 default = nil)
  if valid_601285 != nil:
    section.add "X-Amz-Security-Token", valid_601285
  var valid_601286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601286 = validateParameter(valid_601286, JString, required = false,
                                 default = nil)
  if valid_601286 != nil:
    section.add "X-Amz-Content-Sha256", valid_601286
  var valid_601287 = header.getOrDefault("X-Amz-Algorithm")
  valid_601287 = validateParameter(valid_601287, JString, required = false,
                                 default = nil)
  if valid_601287 != nil:
    section.add "X-Amz-Algorithm", valid_601287
  var valid_601288 = header.getOrDefault("X-Amz-Signature")
  valid_601288 = validateParameter(valid_601288, JString, required = false,
                                 default = nil)
  if valid_601288 != nil:
    section.add "X-Amz-Signature", valid_601288
  var valid_601289 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601289 = validateParameter(valid_601289, JString, required = false,
                                 default = nil)
  if valid_601289 != nil:
    section.add "X-Amz-SignedHeaders", valid_601289
  var valid_601290 = header.getOrDefault("X-Amz-Credential")
  valid_601290 = validateParameter(valid_601290, JString, required = false,
                                 default = nil)
  if valid_601290 != nil:
    section.add "X-Amz-Credential", valid_601290
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601291 = formData.getOrDefault("AutoScalingGroupName")
  valid_601291 = validateParameter(valid_601291, JString, required = true,
                                 default = nil)
  if valid_601291 != nil:
    section.add "AutoScalingGroupName", valid_601291
  var valid_601292 = formData.getOrDefault("TargetGroupARNs")
  valid_601292 = validateParameter(valid_601292, JArray, required = true, default = nil)
  if valid_601292 != nil:
    section.add "TargetGroupARNs", valid_601292
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601293: Call_PostDetachLoadBalancerTargetGroups_601279;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_601293.validator(path, query, header, formData, body)
  let scheme = call_601293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601293.url(scheme.get, call_601293.host, call_601293.base,
                         call_601293.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601293, url, valid)

proc call*(call_601294: Call_PostDetachLoadBalancerTargetGroups_601279;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601295 = newJObject()
  var formData_601296 = newJObject()
  add(formData_601296, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_601296.add "TargetGroupARNs", TargetGroupARNs
  add(query_601295, "Action", newJString(Action))
  add(query_601295, "Version", newJString(Version))
  result = call_601294.call(nil, query_601295, nil, formData_601296, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_601279(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_601280, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_601281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_601262 = ref object of OpenApiRestCall_599368
proc url_GetDetachLoadBalancerTargetGroups_601264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_601263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601265 = query.getOrDefault("AutoScalingGroupName")
  valid_601265 = validateParameter(valid_601265, JString, required = true,
                                 default = nil)
  if valid_601265 != nil:
    section.add "AutoScalingGroupName", valid_601265
  var valid_601266 = query.getOrDefault("Action")
  valid_601266 = validateParameter(valid_601266, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_601266 != nil:
    section.add "Action", valid_601266
  var valid_601267 = query.getOrDefault("TargetGroupARNs")
  valid_601267 = validateParameter(valid_601267, JArray, required = true, default = nil)
  if valid_601267 != nil:
    section.add "TargetGroupARNs", valid_601267
  var valid_601268 = query.getOrDefault("Version")
  valid_601268 = validateParameter(valid_601268, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601268 != nil:
    section.add "Version", valid_601268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601269 = header.getOrDefault("X-Amz-Date")
  valid_601269 = validateParameter(valid_601269, JString, required = false,
                                 default = nil)
  if valid_601269 != nil:
    section.add "X-Amz-Date", valid_601269
  var valid_601270 = header.getOrDefault("X-Amz-Security-Token")
  valid_601270 = validateParameter(valid_601270, JString, required = false,
                                 default = nil)
  if valid_601270 != nil:
    section.add "X-Amz-Security-Token", valid_601270
  var valid_601271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601271 = validateParameter(valid_601271, JString, required = false,
                                 default = nil)
  if valid_601271 != nil:
    section.add "X-Amz-Content-Sha256", valid_601271
  var valid_601272 = header.getOrDefault("X-Amz-Algorithm")
  valid_601272 = validateParameter(valid_601272, JString, required = false,
                                 default = nil)
  if valid_601272 != nil:
    section.add "X-Amz-Algorithm", valid_601272
  var valid_601273 = header.getOrDefault("X-Amz-Signature")
  valid_601273 = validateParameter(valid_601273, JString, required = false,
                                 default = nil)
  if valid_601273 != nil:
    section.add "X-Amz-Signature", valid_601273
  var valid_601274 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601274 = validateParameter(valid_601274, JString, required = false,
                                 default = nil)
  if valid_601274 != nil:
    section.add "X-Amz-SignedHeaders", valid_601274
  var valid_601275 = header.getOrDefault("X-Amz-Credential")
  valid_601275 = validateParameter(valid_601275, JString, required = false,
                                 default = nil)
  if valid_601275 != nil:
    section.add "X-Amz-Credential", valid_601275
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601276: Call_GetDetachLoadBalancerTargetGroups_601262;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_601276.validator(path, query, header, formData, body)
  let scheme = call_601276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601276.url(scheme.get, call_601276.host, call_601276.base,
                         call_601276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601276, url, valid)

proc call*(call_601277: Call_GetDetachLoadBalancerTargetGroups_601262;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Version: string (required)
  var query_601278 = newJObject()
  add(query_601278, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601278, "Action", newJString(Action))
  if TargetGroupARNs != nil:
    query_601278.add "TargetGroupARNs", TargetGroupARNs
  add(query_601278, "Version", newJString(Version))
  result = call_601277.call(nil, query_601278, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_601262(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_601263, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_601264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_601314 = ref object of OpenApiRestCall_599368
proc url_PostDetachLoadBalancers_601316(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancers_601315(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601317 = query.getOrDefault("Action")
  valid_601317 = validateParameter(valid_601317, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_601317 != nil:
    section.add "Action", valid_601317
  var valid_601318 = query.getOrDefault("Version")
  valid_601318 = validateParameter(valid_601318, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601318 != nil:
    section.add "Version", valid_601318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601319 = header.getOrDefault("X-Amz-Date")
  valid_601319 = validateParameter(valid_601319, JString, required = false,
                                 default = nil)
  if valid_601319 != nil:
    section.add "X-Amz-Date", valid_601319
  var valid_601320 = header.getOrDefault("X-Amz-Security-Token")
  valid_601320 = validateParameter(valid_601320, JString, required = false,
                                 default = nil)
  if valid_601320 != nil:
    section.add "X-Amz-Security-Token", valid_601320
  var valid_601321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601321 = validateParameter(valid_601321, JString, required = false,
                                 default = nil)
  if valid_601321 != nil:
    section.add "X-Amz-Content-Sha256", valid_601321
  var valid_601322 = header.getOrDefault("X-Amz-Algorithm")
  valid_601322 = validateParameter(valid_601322, JString, required = false,
                                 default = nil)
  if valid_601322 != nil:
    section.add "X-Amz-Algorithm", valid_601322
  var valid_601323 = header.getOrDefault("X-Amz-Signature")
  valid_601323 = validateParameter(valid_601323, JString, required = false,
                                 default = nil)
  if valid_601323 != nil:
    section.add "X-Amz-Signature", valid_601323
  var valid_601324 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601324 = validateParameter(valid_601324, JString, required = false,
                                 default = nil)
  if valid_601324 != nil:
    section.add "X-Amz-SignedHeaders", valid_601324
  var valid_601325 = header.getOrDefault("X-Amz-Credential")
  valid_601325 = validateParameter(valid_601325, JString, required = false,
                                 default = nil)
  if valid_601325 != nil:
    section.add "X-Amz-Credential", valid_601325
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601326 = formData.getOrDefault("AutoScalingGroupName")
  valid_601326 = validateParameter(valid_601326, JString, required = true,
                                 default = nil)
  if valid_601326 != nil:
    section.add "AutoScalingGroupName", valid_601326
  var valid_601327 = formData.getOrDefault("LoadBalancerNames")
  valid_601327 = validateParameter(valid_601327, JArray, required = true, default = nil)
  if valid_601327 != nil:
    section.add "LoadBalancerNames", valid_601327
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601328: Call_PostDetachLoadBalancers_601314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_601328.validator(path, query, header, formData, body)
  let scheme = call_601328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601328.url(scheme.get, call_601328.host, call_601328.base,
                         call_601328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601328, url, valid)

proc call*(call_601329: Call_PostDetachLoadBalancers_601314;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_601330 = newJObject()
  var formData_601331 = newJObject()
  add(formData_601331, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601330, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    formData_601331.add "LoadBalancerNames", LoadBalancerNames
  add(query_601330, "Version", newJString(Version))
  result = call_601329.call(nil, query_601330, nil, formData_601331, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_601314(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_601315, base: "/",
    url: url_PostDetachLoadBalancers_601316, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_601297 = ref object of OpenApiRestCall_599368
proc url_GetDetachLoadBalancers_601299(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancers_601298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601300 = query.getOrDefault("AutoScalingGroupName")
  valid_601300 = validateParameter(valid_601300, JString, required = true,
                                 default = nil)
  if valid_601300 != nil:
    section.add "AutoScalingGroupName", valid_601300
  var valid_601301 = query.getOrDefault("Action")
  valid_601301 = validateParameter(valid_601301, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_601301 != nil:
    section.add "Action", valid_601301
  var valid_601302 = query.getOrDefault("LoadBalancerNames")
  valid_601302 = validateParameter(valid_601302, JArray, required = true, default = nil)
  if valid_601302 != nil:
    section.add "LoadBalancerNames", valid_601302
  var valid_601303 = query.getOrDefault("Version")
  valid_601303 = validateParameter(valid_601303, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601303 != nil:
    section.add "Version", valid_601303
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601304 = header.getOrDefault("X-Amz-Date")
  valid_601304 = validateParameter(valid_601304, JString, required = false,
                                 default = nil)
  if valid_601304 != nil:
    section.add "X-Amz-Date", valid_601304
  var valid_601305 = header.getOrDefault("X-Amz-Security-Token")
  valid_601305 = validateParameter(valid_601305, JString, required = false,
                                 default = nil)
  if valid_601305 != nil:
    section.add "X-Amz-Security-Token", valid_601305
  var valid_601306 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601306 = validateParameter(valid_601306, JString, required = false,
                                 default = nil)
  if valid_601306 != nil:
    section.add "X-Amz-Content-Sha256", valid_601306
  var valid_601307 = header.getOrDefault("X-Amz-Algorithm")
  valid_601307 = validateParameter(valid_601307, JString, required = false,
                                 default = nil)
  if valid_601307 != nil:
    section.add "X-Amz-Algorithm", valid_601307
  var valid_601308 = header.getOrDefault("X-Amz-Signature")
  valid_601308 = validateParameter(valid_601308, JString, required = false,
                                 default = nil)
  if valid_601308 != nil:
    section.add "X-Amz-Signature", valid_601308
  var valid_601309 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601309 = validateParameter(valid_601309, JString, required = false,
                                 default = nil)
  if valid_601309 != nil:
    section.add "X-Amz-SignedHeaders", valid_601309
  var valid_601310 = header.getOrDefault("X-Amz-Credential")
  valid_601310 = validateParameter(valid_601310, JString, required = false,
                                 default = nil)
  if valid_601310 != nil:
    section.add "X-Amz-Credential", valid_601310
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601311: Call_GetDetachLoadBalancers_601297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_601311.validator(path, query, header, formData, body)
  let scheme = call_601311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601311.url(scheme.get, call_601311.host, call_601311.base,
                         call_601311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601311, url, valid)

proc call*(call_601312: Call_GetDetachLoadBalancers_601297;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Version: string (required)
  var query_601313 = newJObject()
  add(query_601313, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601313, "Action", newJString(Action))
  if LoadBalancerNames != nil:
    query_601313.add "LoadBalancerNames", LoadBalancerNames
  add(query_601313, "Version", newJString(Version))
  result = call_601312.call(nil, query_601313, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_601297(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_601298, base: "/",
    url: url_GetDetachLoadBalancers_601299, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_601349 = ref object of OpenApiRestCall_599368
proc url_PostDisableMetricsCollection_601351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableMetricsCollection_601350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601352 = query.getOrDefault("Action")
  valid_601352 = validateParameter(valid_601352, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_601352 != nil:
    section.add "Action", valid_601352
  var valid_601353 = query.getOrDefault("Version")
  valid_601353 = validateParameter(valid_601353, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601353 != nil:
    section.add "Version", valid_601353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601354 = header.getOrDefault("X-Amz-Date")
  valid_601354 = validateParameter(valid_601354, JString, required = false,
                                 default = nil)
  if valid_601354 != nil:
    section.add "X-Amz-Date", valid_601354
  var valid_601355 = header.getOrDefault("X-Amz-Security-Token")
  valid_601355 = validateParameter(valid_601355, JString, required = false,
                                 default = nil)
  if valid_601355 != nil:
    section.add "X-Amz-Security-Token", valid_601355
  var valid_601356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601356 = validateParameter(valid_601356, JString, required = false,
                                 default = nil)
  if valid_601356 != nil:
    section.add "X-Amz-Content-Sha256", valid_601356
  var valid_601357 = header.getOrDefault("X-Amz-Algorithm")
  valid_601357 = validateParameter(valid_601357, JString, required = false,
                                 default = nil)
  if valid_601357 != nil:
    section.add "X-Amz-Algorithm", valid_601357
  var valid_601358 = header.getOrDefault("X-Amz-Signature")
  valid_601358 = validateParameter(valid_601358, JString, required = false,
                                 default = nil)
  if valid_601358 != nil:
    section.add "X-Amz-Signature", valid_601358
  var valid_601359 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601359 = validateParameter(valid_601359, JString, required = false,
                                 default = nil)
  if valid_601359 != nil:
    section.add "X-Amz-SignedHeaders", valid_601359
  var valid_601360 = header.getOrDefault("X-Amz-Credential")
  valid_601360 = validateParameter(valid_601360, JString, required = false,
                                 default = nil)
  if valid_601360 != nil:
    section.add "X-Amz-Credential", valid_601360
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601361 = formData.getOrDefault("AutoScalingGroupName")
  valid_601361 = validateParameter(valid_601361, JString, required = true,
                                 default = nil)
  if valid_601361 != nil:
    section.add "AutoScalingGroupName", valid_601361
  var valid_601362 = formData.getOrDefault("Metrics")
  valid_601362 = validateParameter(valid_601362, JArray, required = false,
                                 default = nil)
  if valid_601362 != nil:
    section.add "Metrics", valid_601362
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601363: Call_PostDisableMetricsCollection_601349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_601363.validator(path, query, header, formData, body)
  let scheme = call_601363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601363.url(scheme.get, call_601363.host, call_601363.base,
                         call_601363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601363, url, valid)

proc call*(call_601364: Call_PostDisableMetricsCollection_601349;
          AutoScalingGroupName: string; Metrics: JsonNode = nil;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601365 = newJObject()
  var formData_601366 = newJObject()
  add(formData_601366, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_601366.add "Metrics", Metrics
  add(query_601365, "Action", newJString(Action))
  add(query_601365, "Version", newJString(Version))
  result = call_601364.call(nil, query_601365, nil, formData_601366, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_601349(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_601350, base: "/",
    url: url_PostDisableMetricsCollection_601351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_601332 = ref object of OpenApiRestCall_599368
proc url_GetDisableMetricsCollection_601334(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableMetricsCollection_601333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601335 = query.getOrDefault("AutoScalingGroupName")
  valid_601335 = validateParameter(valid_601335, JString, required = true,
                                 default = nil)
  if valid_601335 != nil:
    section.add "AutoScalingGroupName", valid_601335
  var valid_601336 = query.getOrDefault("Action")
  valid_601336 = validateParameter(valid_601336, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_601336 != nil:
    section.add "Action", valid_601336
  var valid_601337 = query.getOrDefault("Metrics")
  valid_601337 = validateParameter(valid_601337, JArray, required = false,
                                 default = nil)
  if valid_601337 != nil:
    section.add "Metrics", valid_601337
  var valid_601338 = query.getOrDefault("Version")
  valid_601338 = validateParameter(valid_601338, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601338 != nil:
    section.add "Version", valid_601338
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601339 = header.getOrDefault("X-Amz-Date")
  valid_601339 = validateParameter(valid_601339, JString, required = false,
                                 default = nil)
  if valid_601339 != nil:
    section.add "X-Amz-Date", valid_601339
  var valid_601340 = header.getOrDefault("X-Amz-Security-Token")
  valid_601340 = validateParameter(valid_601340, JString, required = false,
                                 default = nil)
  if valid_601340 != nil:
    section.add "X-Amz-Security-Token", valid_601340
  var valid_601341 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601341 = validateParameter(valid_601341, JString, required = false,
                                 default = nil)
  if valid_601341 != nil:
    section.add "X-Amz-Content-Sha256", valid_601341
  var valid_601342 = header.getOrDefault("X-Amz-Algorithm")
  valid_601342 = validateParameter(valid_601342, JString, required = false,
                                 default = nil)
  if valid_601342 != nil:
    section.add "X-Amz-Algorithm", valid_601342
  var valid_601343 = header.getOrDefault("X-Amz-Signature")
  valid_601343 = validateParameter(valid_601343, JString, required = false,
                                 default = nil)
  if valid_601343 != nil:
    section.add "X-Amz-Signature", valid_601343
  var valid_601344 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601344 = validateParameter(valid_601344, JString, required = false,
                                 default = nil)
  if valid_601344 != nil:
    section.add "X-Amz-SignedHeaders", valid_601344
  var valid_601345 = header.getOrDefault("X-Amz-Credential")
  valid_601345 = validateParameter(valid_601345, JString, required = false,
                                 default = nil)
  if valid_601345 != nil:
    section.add "X-Amz-Credential", valid_601345
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601346: Call_GetDisableMetricsCollection_601332; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_601346.validator(path, query, header, formData, body)
  let scheme = call_601346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601346.url(scheme.get, call_601346.host, call_601346.base,
                         call_601346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601346, url, valid)

proc call*(call_601347: Call_GetDisableMetricsCollection_601332;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_601348 = newJObject()
  add(query_601348, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601348, "Action", newJString(Action))
  if Metrics != nil:
    query_601348.add "Metrics", Metrics
  add(query_601348, "Version", newJString(Version))
  result = call_601347.call(nil, query_601348, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_601332(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_601333, base: "/",
    url: url_GetDisableMetricsCollection_601334,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_601385 = ref object of OpenApiRestCall_599368
proc url_PostEnableMetricsCollection_601387(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMetricsCollection_601386(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601388 = query.getOrDefault("Action")
  valid_601388 = validateParameter(valid_601388, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_601388 != nil:
    section.add "Action", valid_601388
  var valid_601389 = query.getOrDefault("Version")
  valid_601389 = validateParameter(valid_601389, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601389 != nil:
    section.add "Version", valid_601389
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601390 = header.getOrDefault("X-Amz-Date")
  valid_601390 = validateParameter(valid_601390, JString, required = false,
                                 default = nil)
  if valid_601390 != nil:
    section.add "X-Amz-Date", valid_601390
  var valid_601391 = header.getOrDefault("X-Amz-Security-Token")
  valid_601391 = validateParameter(valid_601391, JString, required = false,
                                 default = nil)
  if valid_601391 != nil:
    section.add "X-Amz-Security-Token", valid_601391
  var valid_601392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601392 = validateParameter(valid_601392, JString, required = false,
                                 default = nil)
  if valid_601392 != nil:
    section.add "X-Amz-Content-Sha256", valid_601392
  var valid_601393 = header.getOrDefault("X-Amz-Algorithm")
  valid_601393 = validateParameter(valid_601393, JString, required = false,
                                 default = nil)
  if valid_601393 != nil:
    section.add "X-Amz-Algorithm", valid_601393
  var valid_601394 = header.getOrDefault("X-Amz-Signature")
  valid_601394 = validateParameter(valid_601394, JString, required = false,
                                 default = nil)
  if valid_601394 != nil:
    section.add "X-Amz-Signature", valid_601394
  var valid_601395 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601395 = validateParameter(valid_601395, JString, required = false,
                                 default = nil)
  if valid_601395 != nil:
    section.add "X-Amz-SignedHeaders", valid_601395
  var valid_601396 = header.getOrDefault("X-Amz-Credential")
  valid_601396 = validateParameter(valid_601396, JString, required = false,
                                 default = nil)
  if valid_601396 != nil:
    section.add "X-Amz-Credential", valid_601396
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601397 = formData.getOrDefault("AutoScalingGroupName")
  valid_601397 = validateParameter(valid_601397, JString, required = true,
                                 default = nil)
  if valid_601397 != nil:
    section.add "AutoScalingGroupName", valid_601397
  var valid_601398 = formData.getOrDefault("Metrics")
  valid_601398 = validateParameter(valid_601398, JArray, required = false,
                                 default = nil)
  if valid_601398 != nil:
    section.add "Metrics", valid_601398
  var valid_601399 = formData.getOrDefault("Granularity")
  valid_601399 = validateParameter(valid_601399, JString, required = true,
                                 default = nil)
  if valid_601399 != nil:
    section.add "Granularity", valid_601399
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601400: Call_PostEnableMetricsCollection_601385; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_601400.validator(path, query, header, formData, body)
  let scheme = call_601400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601400.url(scheme.get, call_601400.host, call_601400.base,
                         call_601400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601400, url, valid)

proc call*(call_601401: Call_PostEnableMetricsCollection_601385;
          AutoScalingGroupName: string; Granularity: string;
          Metrics: JsonNode = nil; Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601402 = newJObject()
  var formData_601403 = newJObject()
  add(formData_601403, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if Metrics != nil:
    formData_601403.add "Metrics", Metrics
  add(formData_601403, "Granularity", newJString(Granularity))
  add(query_601402, "Action", newJString(Action))
  add(query_601402, "Version", newJString(Version))
  result = call_601401.call(nil, query_601402, nil, formData_601403, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_601385(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_601386, base: "/",
    url: url_PostEnableMetricsCollection_601387,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_601367 = ref object of OpenApiRestCall_599368
proc url_GetEnableMetricsCollection_601369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMetricsCollection_601368(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Granularity` field"
  var valid_601370 = query.getOrDefault("Granularity")
  valid_601370 = validateParameter(valid_601370, JString, required = true,
                                 default = nil)
  if valid_601370 != nil:
    section.add "Granularity", valid_601370
  var valid_601371 = query.getOrDefault("AutoScalingGroupName")
  valid_601371 = validateParameter(valid_601371, JString, required = true,
                                 default = nil)
  if valid_601371 != nil:
    section.add "AutoScalingGroupName", valid_601371
  var valid_601372 = query.getOrDefault("Action")
  valid_601372 = validateParameter(valid_601372, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_601372 != nil:
    section.add "Action", valid_601372
  var valid_601373 = query.getOrDefault("Metrics")
  valid_601373 = validateParameter(valid_601373, JArray, required = false,
                                 default = nil)
  if valid_601373 != nil:
    section.add "Metrics", valid_601373
  var valid_601374 = query.getOrDefault("Version")
  valid_601374 = validateParameter(valid_601374, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601374 != nil:
    section.add "Version", valid_601374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601375 = header.getOrDefault("X-Amz-Date")
  valid_601375 = validateParameter(valid_601375, JString, required = false,
                                 default = nil)
  if valid_601375 != nil:
    section.add "X-Amz-Date", valid_601375
  var valid_601376 = header.getOrDefault("X-Amz-Security-Token")
  valid_601376 = validateParameter(valid_601376, JString, required = false,
                                 default = nil)
  if valid_601376 != nil:
    section.add "X-Amz-Security-Token", valid_601376
  var valid_601377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601377 = validateParameter(valid_601377, JString, required = false,
                                 default = nil)
  if valid_601377 != nil:
    section.add "X-Amz-Content-Sha256", valid_601377
  var valid_601378 = header.getOrDefault("X-Amz-Algorithm")
  valid_601378 = validateParameter(valid_601378, JString, required = false,
                                 default = nil)
  if valid_601378 != nil:
    section.add "X-Amz-Algorithm", valid_601378
  var valid_601379 = header.getOrDefault("X-Amz-Signature")
  valid_601379 = validateParameter(valid_601379, JString, required = false,
                                 default = nil)
  if valid_601379 != nil:
    section.add "X-Amz-Signature", valid_601379
  var valid_601380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601380 = validateParameter(valid_601380, JString, required = false,
                                 default = nil)
  if valid_601380 != nil:
    section.add "X-Amz-SignedHeaders", valid_601380
  var valid_601381 = header.getOrDefault("X-Amz-Credential")
  valid_601381 = validateParameter(valid_601381, JString, required = false,
                                 default = nil)
  if valid_601381 != nil:
    section.add "X-Amz-Credential", valid_601381
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601382: Call_GetEnableMetricsCollection_601367; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_601382.validator(path, query, header, formData, body)
  let scheme = call_601382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601382.url(scheme.get, call_601382.host, call_601382.base,
                         call_601382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601382, url, valid)

proc call*(call_601383: Call_GetEnableMetricsCollection_601367;
          Granularity: string; AutoScalingGroupName: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_601384 = newJObject()
  add(query_601384, "Granularity", newJString(Granularity))
  add(query_601384, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601384, "Action", newJString(Action))
  if Metrics != nil:
    query_601384.add "Metrics", Metrics
  add(query_601384, "Version", newJString(Version))
  result = call_601383.call(nil, query_601384, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_601367(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_601368, base: "/",
    url: url_GetEnableMetricsCollection_601369,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_601422 = ref object of OpenApiRestCall_599368
proc url_PostEnterStandby_601424(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnterStandby_601423(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601425 = query.getOrDefault("Action")
  valid_601425 = validateParameter(valid_601425, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_601425 != nil:
    section.add "Action", valid_601425
  var valid_601426 = query.getOrDefault("Version")
  valid_601426 = validateParameter(valid_601426, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601426 != nil:
    section.add "Version", valid_601426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601427 = header.getOrDefault("X-Amz-Date")
  valid_601427 = validateParameter(valid_601427, JString, required = false,
                                 default = nil)
  if valid_601427 != nil:
    section.add "X-Amz-Date", valid_601427
  var valid_601428 = header.getOrDefault("X-Amz-Security-Token")
  valid_601428 = validateParameter(valid_601428, JString, required = false,
                                 default = nil)
  if valid_601428 != nil:
    section.add "X-Amz-Security-Token", valid_601428
  var valid_601429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601429 = validateParameter(valid_601429, JString, required = false,
                                 default = nil)
  if valid_601429 != nil:
    section.add "X-Amz-Content-Sha256", valid_601429
  var valid_601430 = header.getOrDefault("X-Amz-Algorithm")
  valid_601430 = validateParameter(valid_601430, JString, required = false,
                                 default = nil)
  if valid_601430 != nil:
    section.add "X-Amz-Algorithm", valid_601430
  var valid_601431 = header.getOrDefault("X-Amz-Signature")
  valid_601431 = validateParameter(valid_601431, JString, required = false,
                                 default = nil)
  if valid_601431 != nil:
    section.add "X-Amz-Signature", valid_601431
  var valid_601432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601432 = validateParameter(valid_601432, JString, required = false,
                                 default = nil)
  if valid_601432 != nil:
    section.add "X-Amz-SignedHeaders", valid_601432
  var valid_601433 = header.getOrDefault("X-Amz-Credential")
  valid_601433 = validateParameter(valid_601433, JString, required = false,
                                 default = nil)
  if valid_601433 != nil:
    section.add "X-Amz-Credential", valid_601433
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601434 = formData.getOrDefault("AutoScalingGroupName")
  valid_601434 = validateParameter(valid_601434, JString, required = true,
                                 default = nil)
  if valid_601434 != nil:
    section.add "AutoScalingGroupName", valid_601434
  var valid_601435 = formData.getOrDefault("InstanceIds")
  valid_601435 = validateParameter(valid_601435, JArray, required = false,
                                 default = nil)
  if valid_601435 != nil:
    section.add "InstanceIds", valid_601435
  var valid_601436 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_601436 = validateParameter(valid_601436, JBool, required = true, default = nil)
  if valid_601436 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_601436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601437: Call_PostEnterStandby_601422; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601437.validator(path, query, header, formData, body)
  let scheme = call_601437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601437.url(scheme.get, call_601437.host, call_601437.base,
                         call_601437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601437, url, valid)

proc call*(call_601438: Call_PostEnterStandby_601422; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601439 = newJObject()
  var formData_601440 = newJObject()
  add(formData_601440, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_601440.add "InstanceIds", InstanceIds
  add(formData_601440, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_601439, "Action", newJString(Action))
  add(query_601439, "Version", newJString(Version))
  result = call_601438.call(nil, query_601439, nil, formData_601440, nil)

var postEnterStandby* = Call_PostEnterStandby_601422(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_601423,
    base: "/", url: url_PostEnterStandby_601424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_601404 = ref object of OpenApiRestCall_599368
proc url_GetEnterStandby_601406(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnterStandby_601405(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601407 = query.getOrDefault("AutoScalingGroupName")
  valid_601407 = validateParameter(valid_601407, JString, required = true,
                                 default = nil)
  if valid_601407 != nil:
    section.add "AutoScalingGroupName", valid_601407
  var valid_601408 = query.getOrDefault("Action")
  valid_601408 = validateParameter(valid_601408, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_601408 != nil:
    section.add "Action", valid_601408
  var valid_601409 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_601409 = validateParameter(valid_601409, JBool, required = true, default = nil)
  if valid_601409 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_601409
  var valid_601410 = query.getOrDefault("InstanceIds")
  valid_601410 = validateParameter(valid_601410, JArray, required = false,
                                 default = nil)
  if valid_601410 != nil:
    section.add "InstanceIds", valid_601410
  var valid_601411 = query.getOrDefault("Version")
  valid_601411 = validateParameter(valid_601411, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601411 != nil:
    section.add "Version", valid_601411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601412 = header.getOrDefault("X-Amz-Date")
  valid_601412 = validateParameter(valid_601412, JString, required = false,
                                 default = nil)
  if valid_601412 != nil:
    section.add "X-Amz-Date", valid_601412
  var valid_601413 = header.getOrDefault("X-Amz-Security-Token")
  valid_601413 = validateParameter(valid_601413, JString, required = false,
                                 default = nil)
  if valid_601413 != nil:
    section.add "X-Amz-Security-Token", valid_601413
  var valid_601414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601414 = validateParameter(valid_601414, JString, required = false,
                                 default = nil)
  if valid_601414 != nil:
    section.add "X-Amz-Content-Sha256", valid_601414
  var valid_601415 = header.getOrDefault("X-Amz-Algorithm")
  valid_601415 = validateParameter(valid_601415, JString, required = false,
                                 default = nil)
  if valid_601415 != nil:
    section.add "X-Amz-Algorithm", valid_601415
  var valid_601416 = header.getOrDefault("X-Amz-Signature")
  valid_601416 = validateParameter(valid_601416, JString, required = false,
                                 default = nil)
  if valid_601416 != nil:
    section.add "X-Amz-Signature", valid_601416
  var valid_601417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601417 = validateParameter(valid_601417, JString, required = false,
                                 default = nil)
  if valid_601417 != nil:
    section.add "X-Amz-SignedHeaders", valid_601417
  var valid_601418 = header.getOrDefault("X-Amz-Credential")
  valid_601418 = validateParameter(valid_601418, JString, required = false,
                                 default = nil)
  if valid_601418 != nil:
    section.add "X-Amz-Credential", valid_601418
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601419: Call_GetEnterStandby_601404; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601419.validator(path, query, header, formData, body)
  let scheme = call_601419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601419.url(scheme.get, call_601419.host, call_601419.base,
                         call_601419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601419, url, valid)

proc call*(call_601420: Call_GetEnterStandby_601404; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; Action: string = "EnterStandby";
          InstanceIds: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_601421 = newJObject()
  add(query_601421, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601421, "Action", newJString(Action))
  add(query_601421, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  if InstanceIds != nil:
    query_601421.add "InstanceIds", InstanceIds
  add(query_601421, "Version", newJString(Version))
  result = call_601420.call(nil, query_601421, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_601404(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_601405,
    base: "/", url: url_GetEnterStandby_601406, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_601461 = ref object of OpenApiRestCall_599368
proc url_PostExecutePolicy_601463(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExecutePolicy_601462(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601464 = query.getOrDefault("Action")
  valid_601464 = validateParameter(valid_601464, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_601464 != nil:
    section.add "Action", valid_601464
  var valid_601465 = query.getOrDefault("Version")
  valid_601465 = validateParameter(valid_601465, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601465 != nil:
    section.add "Version", valid_601465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601466 = header.getOrDefault("X-Amz-Date")
  valid_601466 = validateParameter(valid_601466, JString, required = false,
                                 default = nil)
  if valid_601466 != nil:
    section.add "X-Amz-Date", valid_601466
  var valid_601467 = header.getOrDefault("X-Amz-Security-Token")
  valid_601467 = validateParameter(valid_601467, JString, required = false,
                                 default = nil)
  if valid_601467 != nil:
    section.add "X-Amz-Security-Token", valid_601467
  var valid_601468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601468 = validateParameter(valid_601468, JString, required = false,
                                 default = nil)
  if valid_601468 != nil:
    section.add "X-Amz-Content-Sha256", valid_601468
  var valid_601469 = header.getOrDefault("X-Amz-Algorithm")
  valid_601469 = validateParameter(valid_601469, JString, required = false,
                                 default = nil)
  if valid_601469 != nil:
    section.add "X-Amz-Algorithm", valid_601469
  var valid_601470 = header.getOrDefault("X-Amz-Signature")
  valid_601470 = validateParameter(valid_601470, JString, required = false,
                                 default = nil)
  if valid_601470 != nil:
    section.add "X-Amz-Signature", valid_601470
  var valid_601471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601471 = validateParameter(valid_601471, JString, required = false,
                                 default = nil)
  if valid_601471 != nil:
    section.add "X-Amz-SignedHeaders", valid_601471
  var valid_601472 = header.getOrDefault("X-Amz-Credential")
  valid_601472 = validateParameter(valid_601472, JString, required = false,
                                 default = nil)
  if valid_601472 != nil:
    section.add "X-Amz-Credential", valid_601472
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  section = newJObject()
  var valid_601473 = formData.getOrDefault("AutoScalingGroupName")
  valid_601473 = validateParameter(valid_601473, JString, required = false,
                                 default = nil)
  if valid_601473 != nil:
    section.add "AutoScalingGroupName", valid_601473
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_601474 = formData.getOrDefault("PolicyName")
  valid_601474 = validateParameter(valid_601474, JString, required = true,
                                 default = nil)
  if valid_601474 != nil:
    section.add "PolicyName", valid_601474
  var valid_601475 = formData.getOrDefault("MetricValue")
  valid_601475 = validateParameter(valid_601475, JFloat, required = false,
                                 default = nil)
  if valid_601475 != nil:
    section.add "MetricValue", valid_601475
  var valid_601476 = formData.getOrDefault("HonorCooldown")
  valid_601476 = validateParameter(valid_601476, JBool, required = false, default = nil)
  if valid_601476 != nil:
    section.add "HonorCooldown", valid_601476
  var valid_601477 = formData.getOrDefault("BreachThreshold")
  valid_601477 = validateParameter(valid_601477, JFloat, required = false,
                                 default = nil)
  if valid_601477 != nil:
    section.add "BreachThreshold", valid_601477
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601478: Call_PostExecutePolicy_601461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_601478.validator(path, query, header, formData, body)
  let scheme = call_601478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601478.url(scheme.get, call_601478.host, call_601478.base,
                         call_601478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601478, url, valid)

proc call*(call_601479: Call_PostExecutePolicy_601461; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          HonorCooldown: bool = false; BreachThreshold: float = 0.0;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601480 = newJObject()
  var formData_601481 = newJObject()
  add(formData_601481, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601481, "PolicyName", newJString(PolicyName))
  add(formData_601481, "MetricValue", newJFloat(MetricValue))
  add(formData_601481, "HonorCooldown", newJBool(HonorCooldown))
  add(formData_601481, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_601480, "Action", newJString(Action))
  add(query_601480, "Version", newJString(Version))
  result = call_601479.call(nil, query_601480, nil, formData_601481, nil)

var postExecutePolicy* = Call_PostExecutePolicy_601461(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_601462,
    base: "/", url: url_PostExecutePolicy_601463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_601441 = ref object of OpenApiRestCall_599368
proc url_GetExecutePolicy_601443(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExecutePolicy_601442(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_601444 = query.getOrDefault("AutoScalingGroupName")
  valid_601444 = validateParameter(valid_601444, JString, required = false,
                                 default = nil)
  if valid_601444 != nil:
    section.add "AutoScalingGroupName", valid_601444
  var valid_601445 = query.getOrDefault("MetricValue")
  valid_601445 = validateParameter(valid_601445, JFloat, required = false,
                                 default = nil)
  if valid_601445 != nil:
    section.add "MetricValue", valid_601445
  var valid_601446 = query.getOrDefault("BreachThreshold")
  valid_601446 = validateParameter(valid_601446, JFloat, required = false,
                                 default = nil)
  if valid_601446 != nil:
    section.add "BreachThreshold", valid_601446
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601447 = query.getOrDefault("Action")
  valid_601447 = validateParameter(valid_601447, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_601447 != nil:
    section.add "Action", valid_601447
  var valid_601448 = query.getOrDefault("HonorCooldown")
  valid_601448 = validateParameter(valid_601448, JBool, required = false, default = nil)
  if valid_601448 != nil:
    section.add "HonorCooldown", valid_601448
  var valid_601449 = query.getOrDefault("Version")
  valid_601449 = validateParameter(valid_601449, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601449 != nil:
    section.add "Version", valid_601449
  var valid_601450 = query.getOrDefault("PolicyName")
  valid_601450 = validateParameter(valid_601450, JString, required = true,
                                 default = nil)
  if valid_601450 != nil:
    section.add "PolicyName", valid_601450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601451 = header.getOrDefault("X-Amz-Date")
  valid_601451 = validateParameter(valid_601451, JString, required = false,
                                 default = nil)
  if valid_601451 != nil:
    section.add "X-Amz-Date", valid_601451
  var valid_601452 = header.getOrDefault("X-Amz-Security-Token")
  valid_601452 = validateParameter(valid_601452, JString, required = false,
                                 default = nil)
  if valid_601452 != nil:
    section.add "X-Amz-Security-Token", valid_601452
  var valid_601453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601453 = validateParameter(valid_601453, JString, required = false,
                                 default = nil)
  if valid_601453 != nil:
    section.add "X-Amz-Content-Sha256", valid_601453
  var valid_601454 = header.getOrDefault("X-Amz-Algorithm")
  valid_601454 = validateParameter(valid_601454, JString, required = false,
                                 default = nil)
  if valid_601454 != nil:
    section.add "X-Amz-Algorithm", valid_601454
  var valid_601455 = header.getOrDefault("X-Amz-Signature")
  valid_601455 = validateParameter(valid_601455, JString, required = false,
                                 default = nil)
  if valid_601455 != nil:
    section.add "X-Amz-Signature", valid_601455
  var valid_601456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601456 = validateParameter(valid_601456, JString, required = false,
                                 default = nil)
  if valid_601456 != nil:
    section.add "X-Amz-SignedHeaders", valid_601456
  var valid_601457 = header.getOrDefault("X-Amz-Credential")
  valid_601457 = validateParameter(valid_601457, JString, required = false,
                                 default = nil)
  if valid_601457 != nil:
    section.add "X-Amz-Credential", valid_601457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601458: Call_GetExecutePolicy_601441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_601458.validator(path, query, header, formData, body)
  let scheme = call_601458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601458.url(scheme.get, call_601458.host, call_601458.base,
                         call_601458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601458, url, valid)

proc call*(call_601459: Call_GetExecutePolicy_601441; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_601460 = newJObject()
  add(query_601460, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601460, "MetricValue", newJFloat(MetricValue))
  add(query_601460, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_601460, "Action", newJString(Action))
  add(query_601460, "HonorCooldown", newJBool(HonorCooldown))
  add(query_601460, "Version", newJString(Version))
  add(query_601460, "PolicyName", newJString(PolicyName))
  result = call_601459.call(nil, query_601460, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_601441(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_601442,
    base: "/", url: url_GetExecutePolicy_601443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_601499 = ref object of OpenApiRestCall_599368
proc url_PostExitStandby_601501(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExitStandby_601500(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601502 = query.getOrDefault("Action")
  valid_601502 = validateParameter(valid_601502, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_601502 != nil:
    section.add "Action", valid_601502
  var valid_601503 = query.getOrDefault("Version")
  valid_601503 = validateParameter(valid_601503, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601503 != nil:
    section.add "Version", valid_601503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601504 = header.getOrDefault("X-Amz-Date")
  valid_601504 = validateParameter(valid_601504, JString, required = false,
                                 default = nil)
  if valid_601504 != nil:
    section.add "X-Amz-Date", valid_601504
  var valid_601505 = header.getOrDefault("X-Amz-Security-Token")
  valid_601505 = validateParameter(valid_601505, JString, required = false,
                                 default = nil)
  if valid_601505 != nil:
    section.add "X-Amz-Security-Token", valid_601505
  var valid_601506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601506 = validateParameter(valid_601506, JString, required = false,
                                 default = nil)
  if valid_601506 != nil:
    section.add "X-Amz-Content-Sha256", valid_601506
  var valid_601507 = header.getOrDefault("X-Amz-Algorithm")
  valid_601507 = validateParameter(valid_601507, JString, required = false,
                                 default = nil)
  if valid_601507 != nil:
    section.add "X-Amz-Algorithm", valid_601507
  var valid_601508 = header.getOrDefault("X-Amz-Signature")
  valid_601508 = validateParameter(valid_601508, JString, required = false,
                                 default = nil)
  if valid_601508 != nil:
    section.add "X-Amz-Signature", valid_601508
  var valid_601509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601509 = validateParameter(valid_601509, JString, required = false,
                                 default = nil)
  if valid_601509 != nil:
    section.add "X-Amz-SignedHeaders", valid_601509
  var valid_601510 = header.getOrDefault("X-Amz-Credential")
  valid_601510 = validateParameter(valid_601510, JString, required = false,
                                 default = nil)
  if valid_601510 != nil:
    section.add "X-Amz-Credential", valid_601510
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601511 = formData.getOrDefault("AutoScalingGroupName")
  valid_601511 = validateParameter(valid_601511, JString, required = true,
                                 default = nil)
  if valid_601511 != nil:
    section.add "AutoScalingGroupName", valid_601511
  var valid_601512 = formData.getOrDefault("InstanceIds")
  valid_601512 = validateParameter(valid_601512, JArray, required = false,
                                 default = nil)
  if valid_601512 != nil:
    section.add "InstanceIds", valid_601512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601513: Call_PostExitStandby_601499; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601513.validator(path, query, header, formData, body)
  let scheme = call_601513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601513.url(scheme.get, call_601513.host, call_601513.base,
                         call_601513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601513, url, valid)

proc call*(call_601514: Call_PostExitStandby_601499; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601515 = newJObject()
  var formData_601516 = newJObject()
  add(formData_601516, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_601516.add "InstanceIds", InstanceIds
  add(query_601515, "Action", newJString(Action))
  add(query_601515, "Version", newJString(Version))
  result = call_601514.call(nil, query_601515, nil, formData_601516, nil)

var postExitStandby* = Call_PostExitStandby_601499(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_601500,
    base: "/", url: url_PostExitStandby_601501, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_601482 = ref object of OpenApiRestCall_599368
proc url_GetExitStandby_601484(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExitStandby_601483(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601485 = query.getOrDefault("AutoScalingGroupName")
  valid_601485 = validateParameter(valid_601485, JString, required = true,
                                 default = nil)
  if valid_601485 != nil:
    section.add "AutoScalingGroupName", valid_601485
  var valid_601486 = query.getOrDefault("Action")
  valid_601486 = validateParameter(valid_601486, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_601486 != nil:
    section.add "Action", valid_601486
  var valid_601487 = query.getOrDefault("InstanceIds")
  valid_601487 = validateParameter(valid_601487, JArray, required = false,
                                 default = nil)
  if valid_601487 != nil:
    section.add "InstanceIds", valid_601487
  var valid_601488 = query.getOrDefault("Version")
  valid_601488 = validateParameter(valid_601488, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601488 != nil:
    section.add "Version", valid_601488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601489 = header.getOrDefault("X-Amz-Date")
  valid_601489 = validateParameter(valid_601489, JString, required = false,
                                 default = nil)
  if valid_601489 != nil:
    section.add "X-Amz-Date", valid_601489
  var valid_601490 = header.getOrDefault("X-Amz-Security-Token")
  valid_601490 = validateParameter(valid_601490, JString, required = false,
                                 default = nil)
  if valid_601490 != nil:
    section.add "X-Amz-Security-Token", valid_601490
  var valid_601491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601491 = validateParameter(valid_601491, JString, required = false,
                                 default = nil)
  if valid_601491 != nil:
    section.add "X-Amz-Content-Sha256", valid_601491
  var valid_601492 = header.getOrDefault("X-Amz-Algorithm")
  valid_601492 = validateParameter(valid_601492, JString, required = false,
                                 default = nil)
  if valid_601492 != nil:
    section.add "X-Amz-Algorithm", valid_601492
  var valid_601493 = header.getOrDefault("X-Amz-Signature")
  valid_601493 = validateParameter(valid_601493, JString, required = false,
                                 default = nil)
  if valid_601493 != nil:
    section.add "X-Amz-Signature", valid_601493
  var valid_601494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601494 = validateParameter(valid_601494, JString, required = false,
                                 default = nil)
  if valid_601494 != nil:
    section.add "X-Amz-SignedHeaders", valid_601494
  var valid_601495 = header.getOrDefault("X-Amz-Credential")
  valid_601495 = validateParameter(valid_601495, JString, required = false,
                                 default = nil)
  if valid_601495 != nil:
    section.add "X-Amz-Credential", valid_601495
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601496: Call_GetExitStandby_601482; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601496.validator(path, query, header, formData, body)
  let scheme = call_601496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601496.url(scheme.get, call_601496.host, call_601496.base,
                         call_601496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601496, url, valid)

proc call*(call_601497: Call_GetExitStandby_601482; AutoScalingGroupName: string;
          Action: string = "ExitStandby"; InstanceIds: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Version: string (required)
  var query_601498 = newJObject()
  add(query_601498, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601498, "Action", newJString(Action))
  if InstanceIds != nil:
    query_601498.add "InstanceIds", InstanceIds
  add(query_601498, "Version", newJString(Version))
  result = call_601497.call(nil, query_601498, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_601482(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_601483,
    base: "/", url: url_GetExitStandby_601484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_601540 = ref object of OpenApiRestCall_599368
proc url_PostPutLifecycleHook_601542(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutLifecycleHook_601541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601543 = query.getOrDefault("Action")
  valid_601543 = validateParameter(valid_601543, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_601543 != nil:
    section.add "Action", valid_601543
  var valid_601544 = query.getOrDefault("Version")
  valid_601544 = validateParameter(valid_601544, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601544 != nil:
    section.add "Version", valid_601544
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601545 = header.getOrDefault("X-Amz-Date")
  valid_601545 = validateParameter(valid_601545, JString, required = false,
                                 default = nil)
  if valid_601545 != nil:
    section.add "X-Amz-Date", valid_601545
  var valid_601546 = header.getOrDefault("X-Amz-Security-Token")
  valid_601546 = validateParameter(valid_601546, JString, required = false,
                                 default = nil)
  if valid_601546 != nil:
    section.add "X-Amz-Security-Token", valid_601546
  var valid_601547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601547 = validateParameter(valid_601547, JString, required = false,
                                 default = nil)
  if valid_601547 != nil:
    section.add "X-Amz-Content-Sha256", valid_601547
  var valid_601548 = header.getOrDefault("X-Amz-Algorithm")
  valid_601548 = validateParameter(valid_601548, JString, required = false,
                                 default = nil)
  if valid_601548 != nil:
    section.add "X-Amz-Algorithm", valid_601548
  var valid_601549 = header.getOrDefault("X-Amz-Signature")
  valid_601549 = validateParameter(valid_601549, JString, required = false,
                                 default = nil)
  if valid_601549 != nil:
    section.add "X-Amz-Signature", valid_601549
  var valid_601550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601550 = validateParameter(valid_601550, JString, required = false,
                                 default = nil)
  if valid_601550 != nil:
    section.add "X-Amz-SignedHeaders", valid_601550
  var valid_601551 = header.getOrDefault("X-Amz-Credential")
  valid_601551 = validateParameter(valid_601551, JString, required = false,
                                 default = nil)
  if valid_601551 != nil:
    section.add "X-Amz-Credential", valid_601551
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601552 = formData.getOrDefault("AutoScalingGroupName")
  valid_601552 = validateParameter(valid_601552, JString, required = true,
                                 default = nil)
  if valid_601552 != nil:
    section.add "AutoScalingGroupName", valid_601552
  var valid_601553 = formData.getOrDefault("LifecycleTransition")
  valid_601553 = validateParameter(valid_601553, JString, required = false,
                                 default = nil)
  if valid_601553 != nil:
    section.add "LifecycleTransition", valid_601553
  var valid_601554 = formData.getOrDefault("DefaultResult")
  valid_601554 = validateParameter(valid_601554, JString, required = false,
                                 default = nil)
  if valid_601554 != nil:
    section.add "DefaultResult", valid_601554
  var valid_601555 = formData.getOrDefault("NotificationTargetARN")
  valid_601555 = validateParameter(valid_601555, JString, required = false,
                                 default = nil)
  if valid_601555 != nil:
    section.add "NotificationTargetARN", valid_601555
  var valid_601556 = formData.getOrDefault("LifecycleHookName")
  valid_601556 = validateParameter(valid_601556, JString, required = true,
                                 default = nil)
  if valid_601556 != nil:
    section.add "LifecycleHookName", valid_601556
  var valid_601557 = formData.getOrDefault("NotificationMetadata")
  valid_601557 = validateParameter(valid_601557, JString, required = false,
                                 default = nil)
  if valid_601557 != nil:
    section.add "NotificationMetadata", valid_601557
  var valid_601558 = formData.getOrDefault("HeartbeatTimeout")
  valid_601558 = validateParameter(valid_601558, JInt, required = false, default = nil)
  if valid_601558 != nil:
    section.add "HeartbeatTimeout", valid_601558
  var valid_601559 = formData.getOrDefault("RoleARN")
  valid_601559 = validateParameter(valid_601559, JString, required = false,
                                 default = nil)
  if valid_601559 != nil:
    section.add "RoleARN", valid_601559
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601560: Call_PostPutLifecycleHook_601540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_601560.validator(path, query, header, formData, body)
  let scheme = call_601560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601560.url(scheme.get, call_601560.host, call_601560.base,
                         call_601560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601560, url, valid)

proc call*(call_601561: Call_PostPutLifecycleHook_601540;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleTransition: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationTargetARN: string = "";
          NotificationMetadata: string = ""; HeartbeatTimeout: int = 0;
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_601562 = newJObject()
  var formData_601563 = newJObject()
  add(formData_601563, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601563, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_601563, "DefaultResult", newJString(DefaultResult))
  add(query_601562, "Action", newJString(Action))
  add(formData_601563, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_601563, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_601563, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_601563, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_601562, "Version", newJString(Version))
  add(formData_601563, "RoleARN", newJString(RoleARN))
  result = call_601561.call(nil, query_601562, nil, formData_601563, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_601540(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_601541, base: "/",
    url: url_PostPutLifecycleHook_601542, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_601517 = ref object of OpenApiRestCall_599368
proc url_GetPutLifecycleHook_601519(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutLifecycleHook_601518(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601520 = query.getOrDefault("AutoScalingGroupName")
  valid_601520 = validateParameter(valid_601520, JString, required = true,
                                 default = nil)
  if valid_601520 != nil:
    section.add "AutoScalingGroupName", valid_601520
  var valid_601521 = query.getOrDefault("NotificationTargetARN")
  valid_601521 = validateParameter(valid_601521, JString, required = false,
                                 default = nil)
  if valid_601521 != nil:
    section.add "NotificationTargetARN", valid_601521
  var valid_601522 = query.getOrDefault("DefaultResult")
  valid_601522 = validateParameter(valid_601522, JString, required = false,
                                 default = nil)
  if valid_601522 != nil:
    section.add "DefaultResult", valid_601522
  var valid_601523 = query.getOrDefault("Action")
  valid_601523 = validateParameter(valid_601523, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_601523 != nil:
    section.add "Action", valid_601523
  var valid_601524 = query.getOrDefault("RoleARN")
  valid_601524 = validateParameter(valid_601524, JString, required = false,
                                 default = nil)
  if valid_601524 != nil:
    section.add "RoleARN", valid_601524
  var valid_601525 = query.getOrDefault("LifecycleTransition")
  valid_601525 = validateParameter(valid_601525, JString, required = false,
                                 default = nil)
  if valid_601525 != nil:
    section.add "LifecycleTransition", valid_601525
  var valid_601526 = query.getOrDefault("NotificationMetadata")
  valid_601526 = validateParameter(valid_601526, JString, required = false,
                                 default = nil)
  if valid_601526 != nil:
    section.add "NotificationMetadata", valid_601526
  var valid_601527 = query.getOrDefault("HeartbeatTimeout")
  valid_601527 = validateParameter(valid_601527, JInt, required = false, default = nil)
  if valid_601527 != nil:
    section.add "HeartbeatTimeout", valid_601527
  var valid_601528 = query.getOrDefault("LifecycleHookName")
  valid_601528 = validateParameter(valid_601528, JString, required = true,
                                 default = nil)
  if valid_601528 != nil:
    section.add "LifecycleHookName", valid_601528
  var valid_601529 = query.getOrDefault("Version")
  valid_601529 = validateParameter(valid_601529, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601529 != nil:
    section.add "Version", valid_601529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601530 = header.getOrDefault("X-Amz-Date")
  valid_601530 = validateParameter(valid_601530, JString, required = false,
                                 default = nil)
  if valid_601530 != nil:
    section.add "X-Amz-Date", valid_601530
  var valid_601531 = header.getOrDefault("X-Amz-Security-Token")
  valid_601531 = validateParameter(valid_601531, JString, required = false,
                                 default = nil)
  if valid_601531 != nil:
    section.add "X-Amz-Security-Token", valid_601531
  var valid_601532 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601532 = validateParameter(valid_601532, JString, required = false,
                                 default = nil)
  if valid_601532 != nil:
    section.add "X-Amz-Content-Sha256", valid_601532
  var valid_601533 = header.getOrDefault("X-Amz-Algorithm")
  valid_601533 = validateParameter(valid_601533, JString, required = false,
                                 default = nil)
  if valid_601533 != nil:
    section.add "X-Amz-Algorithm", valid_601533
  var valid_601534 = header.getOrDefault("X-Amz-Signature")
  valid_601534 = validateParameter(valid_601534, JString, required = false,
                                 default = nil)
  if valid_601534 != nil:
    section.add "X-Amz-Signature", valid_601534
  var valid_601535 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601535 = validateParameter(valid_601535, JString, required = false,
                                 default = nil)
  if valid_601535 != nil:
    section.add "X-Amz-SignedHeaders", valid_601535
  var valid_601536 = header.getOrDefault("X-Amz-Credential")
  valid_601536 = validateParameter(valid_601536, JString, required = false,
                                 default = nil)
  if valid_601536 != nil:
    section.add "X-Amz-Credential", valid_601536
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601537: Call_GetPutLifecycleHook_601517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_601537.validator(path, query, header, formData, body)
  let scheme = call_601537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601537.url(scheme.get, call_601537.host, call_601537.base,
                         call_601537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601537, url, valid)

proc call*(call_601538: Call_GetPutLifecycleHook_601517;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; RoleARN: string = "";
          LifecycleTransition: string = ""; NotificationMetadata: string = "";
          HeartbeatTimeout: int = 0; Version: string = "2011-01-01"): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   Action: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  var query_601539 = newJObject()
  add(query_601539, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601539, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_601539, "DefaultResult", newJString(DefaultResult))
  add(query_601539, "Action", newJString(Action))
  add(query_601539, "RoleARN", newJString(RoleARN))
  add(query_601539, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_601539, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_601539, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_601539, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_601539, "Version", newJString(Version))
  result = call_601538.call(nil, query_601539, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_601517(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_601518, base: "/",
    url: url_GetPutLifecycleHook_601519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_601582 = ref object of OpenApiRestCall_599368
proc url_PostPutNotificationConfiguration_601584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutNotificationConfiguration_601583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601585 = query.getOrDefault("Action")
  valid_601585 = validateParameter(valid_601585, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_601585 != nil:
    section.add "Action", valid_601585
  var valid_601586 = query.getOrDefault("Version")
  valid_601586 = validateParameter(valid_601586, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601586 != nil:
    section.add "Version", valid_601586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601587 = header.getOrDefault("X-Amz-Date")
  valid_601587 = validateParameter(valid_601587, JString, required = false,
                                 default = nil)
  if valid_601587 != nil:
    section.add "X-Amz-Date", valid_601587
  var valid_601588 = header.getOrDefault("X-Amz-Security-Token")
  valid_601588 = validateParameter(valid_601588, JString, required = false,
                                 default = nil)
  if valid_601588 != nil:
    section.add "X-Amz-Security-Token", valid_601588
  var valid_601589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601589 = validateParameter(valid_601589, JString, required = false,
                                 default = nil)
  if valid_601589 != nil:
    section.add "X-Amz-Content-Sha256", valid_601589
  var valid_601590 = header.getOrDefault("X-Amz-Algorithm")
  valid_601590 = validateParameter(valid_601590, JString, required = false,
                                 default = nil)
  if valid_601590 != nil:
    section.add "X-Amz-Algorithm", valid_601590
  var valid_601591 = header.getOrDefault("X-Amz-Signature")
  valid_601591 = validateParameter(valid_601591, JString, required = false,
                                 default = nil)
  if valid_601591 != nil:
    section.add "X-Amz-Signature", valid_601591
  var valid_601592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601592 = validateParameter(valid_601592, JString, required = false,
                                 default = nil)
  if valid_601592 != nil:
    section.add "X-Amz-SignedHeaders", valid_601592
  var valid_601593 = header.getOrDefault("X-Amz-Credential")
  valid_601593 = validateParameter(valid_601593, JString, required = false,
                                 default = nil)
  if valid_601593 != nil:
    section.add "X-Amz-Credential", valid_601593
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601594 = formData.getOrDefault("AutoScalingGroupName")
  valid_601594 = validateParameter(valid_601594, JString, required = true,
                                 default = nil)
  if valid_601594 != nil:
    section.add "AutoScalingGroupName", valid_601594
  var valid_601595 = formData.getOrDefault("TopicARN")
  valid_601595 = validateParameter(valid_601595, JString, required = true,
                                 default = nil)
  if valid_601595 != nil:
    section.add "TopicARN", valid_601595
  var valid_601596 = formData.getOrDefault("NotificationTypes")
  valid_601596 = validateParameter(valid_601596, JArray, required = true, default = nil)
  if valid_601596 != nil:
    section.add "NotificationTypes", valid_601596
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601597: Call_PostPutNotificationConfiguration_601582;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601597.validator(path, query, header, formData, body)
  let scheme = call_601597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601597.url(scheme.get, call_601597.host, call_601597.base,
                         call_601597.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601597, url, valid)

proc call*(call_601598: Call_PostPutNotificationConfiguration_601582;
          AutoScalingGroupName: string; TopicARN: string;
          NotificationTypes: JsonNode;
          Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Version: string (required)
  var query_601599 = newJObject()
  var formData_601600 = newJObject()
  add(formData_601600, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601600, "TopicARN", newJString(TopicARN))
  add(query_601599, "Action", newJString(Action))
  if NotificationTypes != nil:
    formData_601600.add "NotificationTypes", NotificationTypes
  add(query_601599, "Version", newJString(Version))
  result = call_601598.call(nil, query_601599, nil, formData_601600, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_601582(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_601583, base: "/",
    url: url_PostPutNotificationConfiguration_601584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_601564 = ref object of OpenApiRestCall_599368
proc url_GetPutNotificationConfiguration_601566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutNotificationConfiguration_601565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601567 = query.getOrDefault("AutoScalingGroupName")
  valid_601567 = validateParameter(valid_601567, JString, required = true,
                                 default = nil)
  if valid_601567 != nil:
    section.add "AutoScalingGroupName", valid_601567
  var valid_601568 = query.getOrDefault("Action")
  valid_601568 = validateParameter(valid_601568, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_601568 != nil:
    section.add "Action", valid_601568
  var valid_601569 = query.getOrDefault("NotificationTypes")
  valid_601569 = validateParameter(valid_601569, JArray, required = true, default = nil)
  if valid_601569 != nil:
    section.add "NotificationTypes", valid_601569
  var valid_601570 = query.getOrDefault("TopicARN")
  valid_601570 = validateParameter(valid_601570, JString, required = true,
                                 default = nil)
  if valid_601570 != nil:
    section.add "TopicARN", valid_601570
  var valid_601571 = query.getOrDefault("Version")
  valid_601571 = validateParameter(valid_601571, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601571 != nil:
    section.add "Version", valid_601571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601572 = header.getOrDefault("X-Amz-Date")
  valid_601572 = validateParameter(valid_601572, JString, required = false,
                                 default = nil)
  if valid_601572 != nil:
    section.add "X-Amz-Date", valid_601572
  var valid_601573 = header.getOrDefault("X-Amz-Security-Token")
  valid_601573 = validateParameter(valid_601573, JString, required = false,
                                 default = nil)
  if valid_601573 != nil:
    section.add "X-Amz-Security-Token", valid_601573
  var valid_601574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601574 = validateParameter(valid_601574, JString, required = false,
                                 default = nil)
  if valid_601574 != nil:
    section.add "X-Amz-Content-Sha256", valid_601574
  var valid_601575 = header.getOrDefault("X-Amz-Algorithm")
  valid_601575 = validateParameter(valid_601575, JString, required = false,
                                 default = nil)
  if valid_601575 != nil:
    section.add "X-Amz-Algorithm", valid_601575
  var valid_601576 = header.getOrDefault("X-Amz-Signature")
  valid_601576 = validateParameter(valid_601576, JString, required = false,
                                 default = nil)
  if valid_601576 != nil:
    section.add "X-Amz-Signature", valid_601576
  var valid_601577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601577 = validateParameter(valid_601577, JString, required = false,
                                 default = nil)
  if valid_601577 != nil:
    section.add "X-Amz-SignedHeaders", valid_601577
  var valid_601578 = header.getOrDefault("X-Amz-Credential")
  valid_601578 = validateParameter(valid_601578, JString, required = false,
                                 default = nil)
  if valid_601578 != nil:
    section.add "X-Amz-Credential", valid_601578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601579: Call_GetPutNotificationConfiguration_601564;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601579.validator(path, query, header, formData, body)
  let scheme = call_601579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601579.url(scheme.get, call_601579.host, call_601579.base,
                         call_601579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601579, url, valid)

proc call*(call_601580: Call_GetPutNotificationConfiguration_601564;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_601581 = newJObject()
  add(query_601581, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601581, "Action", newJString(Action))
  if NotificationTypes != nil:
    query_601581.add "NotificationTypes", NotificationTypes
  add(query_601581, "TopicARN", newJString(TopicARN))
  add(query_601581, "Version", newJString(Version))
  result = call_601580.call(nil, query_601581, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_601564(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_601565, base: "/",
    url: url_GetPutNotificationConfiguration_601566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_601631 = ref object of OpenApiRestCall_599368
proc url_PostPutScalingPolicy_601633(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScalingPolicy_601632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601634 = query.getOrDefault("Action")
  valid_601634 = validateParameter(valid_601634, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_601634 != nil:
    section.add "Action", valid_601634
  var valid_601635 = query.getOrDefault("Version")
  valid_601635 = validateParameter(valid_601635, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601635 != nil:
    section.add "Version", valid_601635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601636 = header.getOrDefault("X-Amz-Date")
  valid_601636 = validateParameter(valid_601636, JString, required = false,
                                 default = nil)
  if valid_601636 != nil:
    section.add "X-Amz-Date", valid_601636
  var valid_601637 = header.getOrDefault("X-Amz-Security-Token")
  valid_601637 = validateParameter(valid_601637, JString, required = false,
                                 default = nil)
  if valid_601637 != nil:
    section.add "X-Amz-Security-Token", valid_601637
  var valid_601638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601638 = validateParameter(valid_601638, JString, required = false,
                                 default = nil)
  if valid_601638 != nil:
    section.add "X-Amz-Content-Sha256", valid_601638
  var valid_601639 = header.getOrDefault("X-Amz-Algorithm")
  valid_601639 = validateParameter(valid_601639, JString, required = false,
                                 default = nil)
  if valid_601639 != nil:
    section.add "X-Amz-Algorithm", valid_601639
  var valid_601640 = header.getOrDefault("X-Amz-Signature")
  valid_601640 = validateParameter(valid_601640, JString, required = false,
                                 default = nil)
  if valid_601640 != nil:
    section.add "X-Amz-Signature", valid_601640
  var valid_601641 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601641 = validateParameter(valid_601641, JString, required = false,
                                 default = nil)
  if valid_601641 != nil:
    section.add "X-Amz-SignedHeaders", valid_601641
  var valid_601642 = header.getOrDefault("X-Amz-Credential")
  valid_601642 = validateParameter(valid_601642, JString, required = false,
                                 default = nil)
  if valid_601642 != nil:
    section.add "X-Amz-Credential", valid_601642
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601643 = formData.getOrDefault("AutoScalingGroupName")
  valid_601643 = validateParameter(valid_601643, JString, required = true,
                                 default = nil)
  if valid_601643 != nil:
    section.add "AutoScalingGroupName", valid_601643
  var valid_601644 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_601644 = validateParameter(valid_601644, JString, required = false,
                                 default = nil)
  if valid_601644 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_601644
  var valid_601645 = formData.getOrDefault("PolicyName")
  valid_601645 = validateParameter(valid_601645, JString, required = true,
                                 default = nil)
  if valid_601645 != nil:
    section.add "PolicyName", valid_601645
  var valid_601646 = formData.getOrDefault("StepAdjustments")
  valid_601646 = validateParameter(valid_601646, JArray, required = false,
                                 default = nil)
  if valid_601646 != nil:
    section.add "StepAdjustments", valid_601646
  var valid_601647 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_601647 = validateParameter(valid_601647, JString, required = false,
                                 default = nil)
  if valid_601647 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_601647
  var valid_601648 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_601648 = validateParameter(valid_601648, JString, required = false,
                                 default = nil)
  if valid_601648 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_601648
  var valid_601649 = formData.getOrDefault("ScalingAdjustment")
  valid_601649 = validateParameter(valid_601649, JInt, required = false, default = nil)
  if valid_601649 != nil:
    section.add "ScalingAdjustment", valid_601649
  var valid_601650 = formData.getOrDefault("MinAdjustmentStep")
  valid_601650 = validateParameter(valid_601650, JInt, required = false, default = nil)
  if valid_601650 != nil:
    section.add "MinAdjustmentStep", valid_601650
  var valid_601651 = formData.getOrDefault("Cooldown")
  valid_601651 = validateParameter(valid_601651, JInt, required = false, default = nil)
  if valid_601651 != nil:
    section.add "Cooldown", valid_601651
  var valid_601652 = formData.getOrDefault("MetricAggregationType")
  valid_601652 = validateParameter(valid_601652, JString, required = false,
                                 default = nil)
  if valid_601652 != nil:
    section.add "MetricAggregationType", valid_601652
  var valid_601653 = formData.getOrDefault("AdjustmentType")
  valid_601653 = validateParameter(valid_601653, JString, required = false,
                                 default = nil)
  if valid_601653 != nil:
    section.add "AdjustmentType", valid_601653
  var valid_601654 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_601654 = validateParameter(valid_601654, JInt, required = false, default = nil)
  if valid_601654 != nil:
    section.add "EstimatedInstanceWarmup", valid_601654
  var valid_601655 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_601655 = validateParameter(valid_601655, JInt, required = false, default = nil)
  if valid_601655 != nil:
    section.add "MinAdjustmentMagnitude", valid_601655
  var valid_601656 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_601656 = validateParameter(valid_601656, JString, required = false,
                                 default = nil)
  if valid_601656 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_601656
  var valid_601657 = formData.getOrDefault("PolicyType")
  valid_601657 = validateParameter(valid_601657, JString, required = false,
                                 default = nil)
  if valid_601657 != nil:
    section.add "PolicyType", valid_601657
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601658: Call_PostPutScalingPolicy_601631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601658.validator(path, query, header, formData, body)
  let scheme = call_601658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601658.url(scheme.get, call_601658.host, call_601658.base,
                         call_601658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601658, url, valid)

proc call*(call_601659: Call_PostPutScalingPolicy_601631;
          AutoScalingGroupName: string; PolicyName: string;
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          StepAdjustments: JsonNode = nil; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0; MinAdjustmentStep: int = 0; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MetricAggregationType: string = "";
          AdjustmentType: string = ""; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Version: string = "2011-01-01"; PolicyType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Version: string (required)
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  var query_601660 = newJObject()
  var formData_601661 = newJObject()
  add(formData_601661, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601661,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_601661, "PolicyName", newJString(PolicyName))
  if StepAdjustments != nil:
    formData_601661.add "StepAdjustments", StepAdjustments
  add(formData_601661,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_601661, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_601661, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_601661, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_601661, "Cooldown", newJInt(Cooldown))
  add(query_601660, "Action", newJString(Action))
  add(formData_601661, "MetricAggregationType", newJString(MetricAggregationType))
  add(formData_601661, "AdjustmentType", newJString(AdjustmentType))
  add(formData_601661, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_601661, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_601661, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_601660, "Version", newJString(Version))
  add(formData_601661, "PolicyType", newJString(PolicyType))
  result = call_601659.call(nil, query_601660, nil, formData_601661, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_601631(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_601632, base: "/",
    url: url_PostPutScalingPolicy_601633, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_601601 = ref object of OpenApiRestCall_599368
proc url_GetPutScalingPolicy_601603(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScalingPolicy_601602(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  section = newJObject()
  var valid_601604 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_601604 = validateParameter(valid_601604, JString, required = false,
                                 default = nil)
  if valid_601604 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_601604
  var valid_601605 = query.getOrDefault("AdjustmentType")
  valid_601605 = validateParameter(valid_601605, JString, required = false,
                                 default = nil)
  if valid_601605 != nil:
    section.add "AdjustmentType", valid_601605
  var valid_601606 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_601606 = validateParameter(valid_601606, JString, required = false,
                                 default = nil)
  if valid_601606 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_601606
  var valid_601607 = query.getOrDefault("MetricAggregationType")
  valid_601607 = validateParameter(valid_601607, JString, required = false,
                                 default = nil)
  if valid_601607 != nil:
    section.add "MetricAggregationType", valid_601607
  var valid_601608 = query.getOrDefault("MinAdjustmentStep")
  valid_601608 = validateParameter(valid_601608, JInt, required = false, default = nil)
  if valid_601608 != nil:
    section.add "MinAdjustmentStep", valid_601608
  var valid_601609 = query.getOrDefault("Cooldown")
  valid_601609 = validateParameter(valid_601609, JInt, required = false, default = nil)
  if valid_601609 != nil:
    section.add "Cooldown", valid_601609
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601610 = query.getOrDefault("AutoScalingGroupName")
  valid_601610 = validateParameter(valid_601610, JString, required = true,
                                 default = nil)
  if valid_601610 != nil:
    section.add "AutoScalingGroupName", valid_601610
  var valid_601611 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_601611 = validateParameter(valid_601611, JString, required = false,
                                 default = nil)
  if valid_601611 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_601611
  var valid_601612 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_601612 = validateParameter(valid_601612, JString, required = false,
                                 default = nil)
  if valid_601612 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_601612
  var valid_601613 = query.getOrDefault("Action")
  valid_601613 = validateParameter(valid_601613, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_601613 != nil:
    section.add "Action", valid_601613
  var valid_601614 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_601614 = validateParameter(valid_601614, JInt, required = false, default = nil)
  if valid_601614 != nil:
    section.add "EstimatedInstanceWarmup", valid_601614
  var valid_601615 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_601615 = validateParameter(valid_601615, JInt, required = false, default = nil)
  if valid_601615 != nil:
    section.add "MinAdjustmentMagnitude", valid_601615
  var valid_601616 = query.getOrDefault("StepAdjustments")
  valid_601616 = validateParameter(valid_601616, JArray, required = false,
                                 default = nil)
  if valid_601616 != nil:
    section.add "StepAdjustments", valid_601616
  var valid_601617 = query.getOrDefault("PolicyType")
  valid_601617 = validateParameter(valid_601617, JString, required = false,
                                 default = nil)
  if valid_601617 != nil:
    section.add "PolicyType", valid_601617
  var valid_601618 = query.getOrDefault("Version")
  valid_601618 = validateParameter(valid_601618, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601618 != nil:
    section.add "Version", valid_601618
  var valid_601619 = query.getOrDefault("PolicyName")
  valid_601619 = validateParameter(valid_601619, JString, required = true,
                                 default = nil)
  if valid_601619 != nil:
    section.add "PolicyName", valid_601619
  var valid_601620 = query.getOrDefault("ScalingAdjustment")
  valid_601620 = validateParameter(valid_601620, JInt, required = false, default = nil)
  if valid_601620 != nil:
    section.add "ScalingAdjustment", valid_601620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601621 = header.getOrDefault("X-Amz-Date")
  valid_601621 = validateParameter(valid_601621, JString, required = false,
                                 default = nil)
  if valid_601621 != nil:
    section.add "X-Amz-Date", valid_601621
  var valid_601622 = header.getOrDefault("X-Amz-Security-Token")
  valid_601622 = validateParameter(valid_601622, JString, required = false,
                                 default = nil)
  if valid_601622 != nil:
    section.add "X-Amz-Security-Token", valid_601622
  var valid_601623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601623 = validateParameter(valid_601623, JString, required = false,
                                 default = nil)
  if valid_601623 != nil:
    section.add "X-Amz-Content-Sha256", valid_601623
  var valid_601624 = header.getOrDefault("X-Amz-Algorithm")
  valid_601624 = validateParameter(valid_601624, JString, required = false,
                                 default = nil)
  if valid_601624 != nil:
    section.add "X-Amz-Algorithm", valid_601624
  var valid_601625 = header.getOrDefault("X-Amz-Signature")
  valid_601625 = validateParameter(valid_601625, JString, required = false,
                                 default = nil)
  if valid_601625 != nil:
    section.add "X-Amz-Signature", valid_601625
  var valid_601626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601626 = validateParameter(valid_601626, JString, required = false,
                                 default = nil)
  if valid_601626 != nil:
    section.add "X-Amz-SignedHeaders", valid_601626
  var valid_601627 = header.getOrDefault("X-Amz-Credential")
  valid_601627 = validateParameter(valid_601627, JString, required = false,
                                 default = nil)
  if valid_601627 != nil:
    section.add "X-Amz-Credential", valid_601627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601628: Call_GetPutScalingPolicy_601601; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601628.validator(path, query, header, formData, body)
  let scheme = call_601628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601628.url(scheme.get, call_601628.host, call_601628.base,
                         call_601628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601628, url, valid)

proc call*(call_601629: Call_GetPutScalingPolicy_601601;
          AutoScalingGroupName: string; PolicyName: string;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          AdjustmentType: string = ""; TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
          MetricAggregationType: string = ""; MinAdjustmentStep: int = 0;
          Cooldown: int = 0; TargetTrackingConfigurationTargetValue: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          PolicyType: string = ""; Version: string = "2011-01-01";
          ScalingAdjustment: int = 0): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  var query_601630 = newJObject()
  add(query_601630, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_601630, "AdjustmentType", newJString(AdjustmentType))
  add(query_601630, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(query_601630, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_601630, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_601630, "Cooldown", newJInt(Cooldown))
  add(query_601630, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601630, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_601630, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_601630, "Action", newJString(Action))
  add(query_601630, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_601630, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_601630.add "StepAdjustments", StepAdjustments
  add(query_601630, "PolicyType", newJString(PolicyType))
  add(query_601630, "Version", newJString(Version))
  add(query_601630, "PolicyName", newJString(PolicyName))
  add(query_601630, "ScalingAdjustment", newJInt(ScalingAdjustment))
  result = call_601629.call(nil, query_601630, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_601601(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_601602, base: "/",
    url: url_GetPutScalingPolicy_601603, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_601686 = ref object of OpenApiRestCall_599368
proc url_PostPutScheduledUpdateGroupAction_601688(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_601687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601689 = query.getOrDefault("Action")
  valid_601689 = validateParameter(valid_601689, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_601689 != nil:
    section.add "Action", valid_601689
  var valid_601690 = query.getOrDefault("Version")
  valid_601690 = validateParameter(valid_601690, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601690 != nil:
    section.add "Version", valid_601690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601691 = header.getOrDefault("X-Amz-Date")
  valid_601691 = validateParameter(valid_601691, JString, required = false,
                                 default = nil)
  if valid_601691 != nil:
    section.add "X-Amz-Date", valid_601691
  var valid_601692 = header.getOrDefault("X-Amz-Security-Token")
  valid_601692 = validateParameter(valid_601692, JString, required = false,
                                 default = nil)
  if valid_601692 != nil:
    section.add "X-Amz-Security-Token", valid_601692
  var valid_601693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601693 = validateParameter(valid_601693, JString, required = false,
                                 default = nil)
  if valid_601693 != nil:
    section.add "X-Amz-Content-Sha256", valid_601693
  var valid_601694 = header.getOrDefault("X-Amz-Algorithm")
  valid_601694 = validateParameter(valid_601694, JString, required = false,
                                 default = nil)
  if valid_601694 != nil:
    section.add "X-Amz-Algorithm", valid_601694
  var valid_601695 = header.getOrDefault("X-Amz-Signature")
  valid_601695 = validateParameter(valid_601695, JString, required = false,
                                 default = nil)
  if valid_601695 != nil:
    section.add "X-Amz-Signature", valid_601695
  var valid_601696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601696 = validateParameter(valid_601696, JString, required = false,
                                 default = nil)
  if valid_601696 != nil:
    section.add "X-Amz-SignedHeaders", valid_601696
  var valid_601697 = header.getOrDefault("X-Amz-Credential")
  valid_601697 = validateParameter(valid_601697, JString, required = false,
                                 default = nil)
  if valid_601697 != nil:
    section.add "X-Amz-Credential", valid_601697
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601698 = formData.getOrDefault("AutoScalingGroupName")
  valid_601698 = validateParameter(valid_601698, JString, required = true,
                                 default = nil)
  if valid_601698 != nil:
    section.add "AutoScalingGroupName", valid_601698
  var valid_601699 = formData.getOrDefault("Recurrence")
  valid_601699 = validateParameter(valid_601699, JString, required = false,
                                 default = nil)
  if valid_601699 != nil:
    section.add "Recurrence", valid_601699
  var valid_601700 = formData.getOrDefault("DesiredCapacity")
  valid_601700 = validateParameter(valid_601700, JInt, required = false, default = nil)
  if valid_601700 != nil:
    section.add "DesiredCapacity", valid_601700
  var valid_601701 = formData.getOrDefault("Time")
  valid_601701 = validateParameter(valid_601701, JString, required = false,
                                 default = nil)
  if valid_601701 != nil:
    section.add "Time", valid_601701
  var valid_601702 = formData.getOrDefault("StartTime")
  valid_601702 = validateParameter(valid_601702, JString, required = false,
                                 default = nil)
  if valid_601702 != nil:
    section.add "StartTime", valid_601702
  var valid_601703 = formData.getOrDefault("ScheduledActionName")
  valid_601703 = validateParameter(valid_601703, JString, required = true,
                                 default = nil)
  if valid_601703 != nil:
    section.add "ScheduledActionName", valid_601703
  var valid_601704 = formData.getOrDefault("MinSize")
  valid_601704 = validateParameter(valid_601704, JInt, required = false, default = nil)
  if valid_601704 != nil:
    section.add "MinSize", valid_601704
  var valid_601705 = formData.getOrDefault("MaxSize")
  valid_601705 = validateParameter(valid_601705, JInt, required = false, default = nil)
  if valid_601705 != nil:
    section.add "MaxSize", valid_601705
  var valid_601706 = formData.getOrDefault("EndTime")
  valid_601706 = validateParameter(valid_601706, JString, required = false,
                                 default = nil)
  if valid_601706 != nil:
    section.add "EndTime", valid_601706
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601707: Call_PostPutScheduledUpdateGroupAction_601686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601707.validator(path, query, header, formData, body)
  let scheme = call_601707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601707.url(scheme.get, call_601707.host, call_601707.base,
                         call_601707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601707, url, valid)

proc call*(call_601708: Call_PostPutScheduledUpdateGroupAction_601686;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Recurrence: string = ""; DesiredCapacity: int = 0; Time: string = "";
          StartTime: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MinSize: int = 0; MaxSize: int = 0; EndTime: string = "";
          Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: string (required)
  var query_601709 = newJObject()
  var formData_601710 = newJObject()
  add(formData_601710, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601710, "Recurrence", newJString(Recurrence))
  add(formData_601710, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_601710, "Time", newJString(Time))
  add(formData_601710, "StartTime", newJString(StartTime))
  add(query_601709, "Action", newJString(Action))
  add(formData_601710, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_601710, "MinSize", newJInt(MinSize))
  add(formData_601710, "MaxSize", newJInt(MaxSize))
  add(formData_601710, "EndTime", newJString(EndTime))
  add(query_601709, "Version", newJString(Version))
  result = call_601708.call(nil, query_601709, nil, formData_601710, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_601686(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_601687, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_601688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_601662 = ref object of OpenApiRestCall_599368
proc url_GetPutScheduledUpdateGroupAction_601664(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_601663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: JString (required)
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601665 = query.getOrDefault("DesiredCapacity")
  valid_601665 = validateParameter(valid_601665, JInt, required = false, default = nil)
  if valid_601665 != nil:
    section.add "DesiredCapacity", valid_601665
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_601666 = query.getOrDefault("ScheduledActionName")
  valid_601666 = validateParameter(valid_601666, JString, required = true,
                                 default = nil)
  if valid_601666 != nil:
    section.add "ScheduledActionName", valid_601666
  var valid_601667 = query.getOrDefault("AutoScalingGroupName")
  valid_601667 = validateParameter(valid_601667, JString, required = true,
                                 default = nil)
  if valid_601667 != nil:
    section.add "AutoScalingGroupName", valid_601667
  var valid_601668 = query.getOrDefault("Time")
  valid_601668 = validateParameter(valid_601668, JString, required = false,
                                 default = nil)
  if valid_601668 != nil:
    section.add "Time", valid_601668
  var valid_601669 = query.getOrDefault("StartTime")
  valid_601669 = validateParameter(valid_601669, JString, required = false,
                                 default = nil)
  if valid_601669 != nil:
    section.add "StartTime", valid_601669
  var valid_601670 = query.getOrDefault("Recurrence")
  valid_601670 = validateParameter(valid_601670, JString, required = false,
                                 default = nil)
  if valid_601670 != nil:
    section.add "Recurrence", valid_601670
  var valid_601671 = query.getOrDefault("Action")
  valid_601671 = validateParameter(valid_601671, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_601671 != nil:
    section.add "Action", valid_601671
  var valid_601672 = query.getOrDefault("MaxSize")
  valid_601672 = validateParameter(valid_601672, JInt, required = false, default = nil)
  if valid_601672 != nil:
    section.add "MaxSize", valid_601672
  var valid_601673 = query.getOrDefault("EndTime")
  valid_601673 = validateParameter(valid_601673, JString, required = false,
                                 default = nil)
  if valid_601673 != nil:
    section.add "EndTime", valid_601673
  var valid_601674 = query.getOrDefault("MinSize")
  valid_601674 = validateParameter(valid_601674, JInt, required = false, default = nil)
  if valid_601674 != nil:
    section.add "MinSize", valid_601674
  var valid_601675 = query.getOrDefault("Version")
  valid_601675 = validateParameter(valid_601675, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601675 != nil:
    section.add "Version", valid_601675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601676 = header.getOrDefault("X-Amz-Date")
  valid_601676 = validateParameter(valid_601676, JString, required = false,
                                 default = nil)
  if valid_601676 != nil:
    section.add "X-Amz-Date", valid_601676
  var valid_601677 = header.getOrDefault("X-Amz-Security-Token")
  valid_601677 = validateParameter(valid_601677, JString, required = false,
                                 default = nil)
  if valid_601677 != nil:
    section.add "X-Amz-Security-Token", valid_601677
  var valid_601678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601678 = validateParameter(valid_601678, JString, required = false,
                                 default = nil)
  if valid_601678 != nil:
    section.add "X-Amz-Content-Sha256", valid_601678
  var valid_601679 = header.getOrDefault("X-Amz-Algorithm")
  valid_601679 = validateParameter(valid_601679, JString, required = false,
                                 default = nil)
  if valid_601679 != nil:
    section.add "X-Amz-Algorithm", valid_601679
  var valid_601680 = header.getOrDefault("X-Amz-Signature")
  valid_601680 = validateParameter(valid_601680, JString, required = false,
                                 default = nil)
  if valid_601680 != nil:
    section.add "X-Amz-Signature", valid_601680
  var valid_601681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601681 = validateParameter(valid_601681, JString, required = false,
                                 default = nil)
  if valid_601681 != nil:
    section.add "X-Amz-SignedHeaders", valid_601681
  var valid_601682 = header.getOrDefault("X-Amz-Credential")
  valid_601682 = validateParameter(valid_601682, JString, required = false,
                                 default = nil)
  if valid_601682 != nil:
    section.add "X-Amz-Credential", valid_601682
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601683: Call_GetPutScheduledUpdateGroupAction_601662;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601683.validator(path, query, header, formData, body)
  let scheme = call_601683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601683.url(scheme.get, call_601683.host, call_601683.base,
                         call_601683.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601683, url, valid)

proc call*(call_601684: Call_GetPutScheduledUpdateGroupAction_601662;
          ScheduledActionName: string; AutoScalingGroupName: string;
          DesiredCapacity: int = 0; Time: string = ""; StartTime: string = "";
          Recurrence: string = ""; Action: string = "PutScheduledUpdateGroupAction";
          MaxSize: int = 0; EndTime: string = ""; MinSize: int = 0;
          Version: string = "2011-01-01"): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   Action: string (required)
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_601685 = newJObject()
  add(query_601685, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_601685, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_601685, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601685, "Time", newJString(Time))
  add(query_601685, "StartTime", newJString(StartTime))
  add(query_601685, "Recurrence", newJString(Recurrence))
  add(query_601685, "Action", newJString(Action))
  add(query_601685, "MaxSize", newJInt(MaxSize))
  add(query_601685, "EndTime", newJString(EndTime))
  add(query_601685, "MinSize", newJInt(MinSize))
  add(query_601685, "Version", newJString(Version))
  result = call_601684.call(nil, query_601685, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_601662(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_601663, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_601664,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_601730 = ref object of OpenApiRestCall_599368
proc url_PostRecordLifecycleActionHeartbeat_601732(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_601731(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601733 = query.getOrDefault("Action")
  valid_601733 = validateParameter(valid_601733, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_601733 != nil:
    section.add "Action", valid_601733
  var valid_601734 = query.getOrDefault("Version")
  valid_601734 = validateParameter(valid_601734, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601734 != nil:
    section.add "Version", valid_601734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601735 = header.getOrDefault("X-Amz-Date")
  valid_601735 = validateParameter(valid_601735, JString, required = false,
                                 default = nil)
  if valid_601735 != nil:
    section.add "X-Amz-Date", valid_601735
  var valid_601736 = header.getOrDefault("X-Amz-Security-Token")
  valid_601736 = validateParameter(valid_601736, JString, required = false,
                                 default = nil)
  if valid_601736 != nil:
    section.add "X-Amz-Security-Token", valid_601736
  var valid_601737 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601737 = validateParameter(valid_601737, JString, required = false,
                                 default = nil)
  if valid_601737 != nil:
    section.add "X-Amz-Content-Sha256", valid_601737
  var valid_601738 = header.getOrDefault("X-Amz-Algorithm")
  valid_601738 = validateParameter(valid_601738, JString, required = false,
                                 default = nil)
  if valid_601738 != nil:
    section.add "X-Amz-Algorithm", valid_601738
  var valid_601739 = header.getOrDefault("X-Amz-Signature")
  valid_601739 = validateParameter(valid_601739, JString, required = false,
                                 default = nil)
  if valid_601739 != nil:
    section.add "X-Amz-Signature", valid_601739
  var valid_601740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601740 = validateParameter(valid_601740, JString, required = false,
                                 default = nil)
  if valid_601740 != nil:
    section.add "X-Amz-SignedHeaders", valid_601740
  var valid_601741 = header.getOrDefault("X-Amz-Credential")
  valid_601741 = validateParameter(valid_601741, JString, required = false,
                                 default = nil)
  if valid_601741 != nil:
    section.add "X-Amz-Credential", valid_601741
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601742 = formData.getOrDefault("AutoScalingGroupName")
  valid_601742 = validateParameter(valid_601742, JString, required = true,
                                 default = nil)
  if valid_601742 != nil:
    section.add "AutoScalingGroupName", valid_601742
  var valid_601743 = formData.getOrDefault("InstanceId")
  valid_601743 = validateParameter(valid_601743, JString, required = false,
                                 default = nil)
  if valid_601743 != nil:
    section.add "InstanceId", valid_601743
  var valid_601744 = formData.getOrDefault("LifecycleHookName")
  valid_601744 = validateParameter(valid_601744, JString, required = true,
                                 default = nil)
  if valid_601744 != nil:
    section.add "LifecycleHookName", valid_601744
  var valid_601745 = formData.getOrDefault("LifecycleActionToken")
  valid_601745 = validateParameter(valid_601745, JString, required = false,
                                 default = nil)
  if valid_601745 != nil:
    section.add "LifecycleActionToken", valid_601745
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601746: Call_PostRecordLifecycleActionHeartbeat_601730;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601746.validator(path, query, header, formData, body)
  let scheme = call_601746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601746.url(scheme.get, call_601746.host, call_601746.base,
                         call_601746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601746, url, valid)

proc call*(call_601747: Call_PostRecordLifecycleActionHeartbeat_601730;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_601748 = newJObject()
  var formData_601749 = newJObject()
  add(formData_601749, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601748, "Action", newJString(Action))
  add(formData_601749, "InstanceId", newJString(InstanceId))
  add(formData_601749, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_601748, "Version", newJString(Version))
  add(formData_601749, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_601747.call(nil, query_601748, nil, formData_601749, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_601730(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_601731, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_601732,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_601711 = ref object of OpenApiRestCall_599368
proc url_GetRecordLifecycleActionHeartbeat_601713(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_601712(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   Version: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601714 = query.getOrDefault("AutoScalingGroupName")
  valid_601714 = validateParameter(valid_601714, JString, required = true,
                                 default = nil)
  if valid_601714 != nil:
    section.add "AutoScalingGroupName", valid_601714
  var valid_601715 = query.getOrDefault("Action")
  valid_601715 = validateParameter(valid_601715, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_601715 != nil:
    section.add "Action", valid_601715
  var valid_601716 = query.getOrDefault("LifecycleHookName")
  valid_601716 = validateParameter(valid_601716, JString, required = true,
                                 default = nil)
  if valid_601716 != nil:
    section.add "LifecycleHookName", valid_601716
  var valid_601717 = query.getOrDefault("InstanceId")
  valid_601717 = validateParameter(valid_601717, JString, required = false,
                                 default = nil)
  if valid_601717 != nil:
    section.add "InstanceId", valid_601717
  var valid_601718 = query.getOrDefault("Version")
  valid_601718 = validateParameter(valid_601718, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601718 != nil:
    section.add "Version", valid_601718
  var valid_601719 = query.getOrDefault("LifecycleActionToken")
  valid_601719 = validateParameter(valid_601719, JString, required = false,
                                 default = nil)
  if valid_601719 != nil:
    section.add "LifecycleActionToken", valid_601719
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601720 = header.getOrDefault("X-Amz-Date")
  valid_601720 = validateParameter(valid_601720, JString, required = false,
                                 default = nil)
  if valid_601720 != nil:
    section.add "X-Amz-Date", valid_601720
  var valid_601721 = header.getOrDefault("X-Amz-Security-Token")
  valid_601721 = validateParameter(valid_601721, JString, required = false,
                                 default = nil)
  if valid_601721 != nil:
    section.add "X-Amz-Security-Token", valid_601721
  var valid_601722 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601722 = validateParameter(valid_601722, JString, required = false,
                                 default = nil)
  if valid_601722 != nil:
    section.add "X-Amz-Content-Sha256", valid_601722
  var valid_601723 = header.getOrDefault("X-Amz-Algorithm")
  valid_601723 = validateParameter(valid_601723, JString, required = false,
                                 default = nil)
  if valid_601723 != nil:
    section.add "X-Amz-Algorithm", valid_601723
  var valid_601724 = header.getOrDefault("X-Amz-Signature")
  valid_601724 = validateParameter(valid_601724, JString, required = false,
                                 default = nil)
  if valid_601724 != nil:
    section.add "X-Amz-Signature", valid_601724
  var valid_601725 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601725 = validateParameter(valid_601725, JString, required = false,
                                 default = nil)
  if valid_601725 != nil:
    section.add "X-Amz-SignedHeaders", valid_601725
  var valid_601726 = header.getOrDefault("X-Amz-Credential")
  valid_601726 = validateParameter(valid_601726, JString, required = false,
                                 default = nil)
  if valid_601726 != nil:
    section.add "X-Amz-Credential", valid_601726
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601727: Call_GetRecordLifecycleActionHeartbeat_601711;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601727.validator(path, query, header, formData, body)
  let scheme = call_601727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601727.url(scheme.get, call_601727.host, call_601727.base,
                         call_601727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601727, url, valid)

proc call*(call_601728: Call_GetRecordLifecycleActionHeartbeat_601711;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "RecordLifecycleActionHeartbeat";
          InstanceId: string = ""; Version: string = "2011-01-01";
          LifecycleActionToken: string = ""): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Version: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  var query_601729 = newJObject()
  add(query_601729, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601729, "Action", newJString(Action))
  add(query_601729, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_601729, "InstanceId", newJString(InstanceId))
  add(query_601729, "Version", newJString(Version))
  add(query_601729, "LifecycleActionToken", newJString(LifecycleActionToken))
  result = call_601728.call(nil, query_601729, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_601711(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_601712, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_601713,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_601767 = ref object of OpenApiRestCall_599368
proc url_PostResumeProcesses_601769(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResumeProcesses_601768(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601770 = query.getOrDefault("Action")
  valid_601770 = validateParameter(valid_601770, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_601770 != nil:
    section.add "Action", valid_601770
  var valid_601771 = query.getOrDefault("Version")
  valid_601771 = validateParameter(valid_601771, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601771 != nil:
    section.add "Version", valid_601771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601772 = header.getOrDefault("X-Amz-Date")
  valid_601772 = validateParameter(valid_601772, JString, required = false,
                                 default = nil)
  if valid_601772 != nil:
    section.add "X-Amz-Date", valid_601772
  var valid_601773 = header.getOrDefault("X-Amz-Security-Token")
  valid_601773 = validateParameter(valid_601773, JString, required = false,
                                 default = nil)
  if valid_601773 != nil:
    section.add "X-Amz-Security-Token", valid_601773
  var valid_601774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601774 = validateParameter(valid_601774, JString, required = false,
                                 default = nil)
  if valid_601774 != nil:
    section.add "X-Amz-Content-Sha256", valid_601774
  var valid_601775 = header.getOrDefault("X-Amz-Algorithm")
  valid_601775 = validateParameter(valid_601775, JString, required = false,
                                 default = nil)
  if valid_601775 != nil:
    section.add "X-Amz-Algorithm", valid_601775
  var valid_601776 = header.getOrDefault("X-Amz-Signature")
  valid_601776 = validateParameter(valid_601776, JString, required = false,
                                 default = nil)
  if valid_601776 != nil:
    section.add "X-Amz-Signature", valid_601776
  var valid_601777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601777 = validateParameter(valid_601777, JString, required = false,
                                 default = nil)
  if valid_601777 != nil:
    section.add "X-Amz-SignedHeaders", valid_601777
  var valid_601778 = header.getOrDefault("X-Amz-Credential")
  valid_601778 = validateParameter(valid_601778, JString, required = false,
                                 default = nil)
  if valid_601778 != nil:
    section.add "X-Amz-Credential", valid_601778
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601779 = formData.getOrDefault("AutoScalingGroupName")
  valid_601779 = validateParameter(valid_601779, JString, required = true,
                                 default = nil)
  if valid_601779 != nil:
    section.add "AutoScalingGroupName", valid_601779
  var valid_601780 = formData.getOrDefault("ScalingProcesses")
  valid_601780 = validateParameter(valid_601780, JArray, required = false,
                                 default = nil)
  if valid_601780 != nil:
    section.add "ScalingProcesses", valid_601780
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601781: Call_PostResumeProcesses_601767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601781.validator(path, query, header, formData, body)
  let scheme = call_601781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601781.url(scheme.get, call_601781.host, call_601781.base,
                         call_601781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601781, url, valid)

proc call*(call_601782: Call_PostResumeProcesses_601767;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601783 = newJObject()
  var formData_601784 = newJObject()
  add(formData_601784, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_601784.add "ScalingProcesses", ScalingProcesses
  add(query_601783, "Action", newJString(Action))
  add(query_601783, "Version", newJString(Version))
  result = call_601782.call(nil, query_601783, nil, formData_601784, nil)

var postResumeProcesses* = Call_PostResumeProcesses_601767(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_601768, base: "/",
    url: url_PostResumeProcesses_601769, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_601750 = ref object of OpenApiRestCall_599368
proc url_GetResumeProcesses_601752(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResumeProcesses_601751(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_601753 = query.getOrDefault("ScalingProcesses")
  valid_601753 = validateParameter(valid_601753, JArray, required = false,
                                 default = nil)
  if valid_601753 != nil:
    section.add "ScalingProcesses", valid_601753
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601754 = query.getOrDefault("AutoScalingGroupName")
  valid_601754 = validateParameter(valid_601754, JString, required = true,
                                 default = nil)
  if valid_601754 != nil:
    section.add "AutoScalingGroupName", valid_601754
  var valid_601755 = query.getOrDefault("Action")
  valid_601755 = validateParameter(valid_601755, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_601755 != nil:
    section.add "Action", valid_601755
  var valid_601756 = query.getOrDefault("Version")
  valid_601756 = validateParameter(valid_601756, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601756 != nil:
    section.add "Version", valid_601756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601757 = header.getOrDefault("X-Amz-Date")
  valid_601757 = validateParameter(valid_601757, JString, required = false,
                                 default = nil)
  if valid_601757 != nil:
    section.add "X-Amz-Date", valid_601757
  var valid_601758 = header.getOrDefault("X-Amz-Security-Token")
  valid_601758 = validateParameter(valid_601758, JString, required = false,
                                 default = nil)
  if valid_601758 != nil:
    section.add "X-Amz-Security-Token", valid_601758
  var valid_601759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601759 = validateParameter(valid_601759, JString, required = false,
                                 default = nil)
  if valid_601759 != nil:
    section.add "X-Amz-Content-Sha256", valid_601759
  var valid_601760 = header.getOrDefault("X-Amz-Algorithm")
  valid_601760 = validateParameter(valid_601760, JString, required = false,
                                 default = nil)
  if valid_601760 != nil:
    section.add "X-Amz-Algorithm", valid_601760
  var valid_601761 = header.getOrDefault("X-Amz-Signature")
  valid_601761 = validateParameter(valid_601761, JString, required = false,
                                 default = nil)
  if valid_601761 != nil:
    section.add "X-Amz-Signature", valid_601761
  var valid_601762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601762 = validateParameter(valid_601762, JString, required = false,
                                 default = nil)
  if valid_601762 != nil:
    section.add "X-Amz-SignedHeaders", valid_601762
  var valid_601763 = header.getOrDefault("X-Amz-Credential")
  valid_601763 = validateParameter(valid_601763, JString, required = false,
                                 default = nil)
  if valid_601763 != nil:
    section.add "X-Amz-Credential", valid_601763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601764: Call_GetResumeProcesses_601750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601764.validator(path, query, header, formData, body)
  let scheme = call_601764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601764.url(scheme.get, call_601764.host, call_601764.base,
                         call_601764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601764, url, valid)

proc call*(call_601765: Call_GetResumeProcesses_601750;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601766 = newJObject()
  if ScalingProcesses != nil:
    query_601766.add "ScalingProcesses", ScalingProcesses
  add(query_601766, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601766, "Action", newJString(Action))
  add(query_601766, "Version", newJString(Version))
  result = call_601765.call(nil, query_601766, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_601750(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_601751, base: "/",
    url: url_GetResumeProcesses_601752, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_601803 = ref object of OpenApiRestCall_599368
proc url_PostSetDesiredCapacity_601805(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDesiredCapacity_601804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601806 = query.getOrDefault("Action")
  valid_601806 = validateParameter(valid_601806, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_601806 != nil:
    section.add "Action", valid_601806
  var valid_601807 = query.getOrDefault("Version")
  valid_601807 = validateParameter(valid_601807, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601807 != nil:
    section.add "Version", valid_601807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601808 = header.getOrDefault("X-Amz-Date")
  valid_601808 = validateParameter(valid_601808, JString, required = false,
                                 default = nil)
  if valid_601808 != nil:
    section.add "X-Amz-Date", valid_601808
  var valid_601809 = header.getOrDefault("X-Amz-Security-Token")
  valid_601809 = validateParameter(valid_601809, JString, required = false,
                                 default = nil)
  if valid_601809 != nil:
    section.add "X-Amz-Security-Token", valid_601809
  var valid_601810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601810 = validateParameter(valid_601810, JString, required = false,
                                 default = nil)
  if valid_601810 != nil:
    section.add "X-Amz-Content-Sha256", valid_601810
  var valid_601811 = header.getOrDefault("X-Amz-Algorithm")
  valid_601811 = validateParameter(valid_601811, JString, required = false,
                                 default = nil)
  if valid_601811 != nil:
    section.add "X-Amz-Algorithm", valid_601811
  var valid_601812 = header.getOrDefault("X-Amz-Signature")
  valid_601812 = validateParameter(valid_601812, JString, required = false,
                                 default = nil)
  if valid_601812 != nil:
    section.add "X-Amz-Signature", valid_601812
  var valid_601813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601813 = validateParameter(valid_601813, JString, required = false,
                                 default = nil)
  if valid_601813 != nil:
    section.add "X-Amz-SignedHeaders", valid_601813
  var valid_601814 = header.getOrDefault("X-Amz-Credential")
  valid_601814 = validateParameter(valid_601814, JString, required = false,
                                 default = nil)
  if valid_601814 != nil:
    section.add "X-Amz-Credential", valid_601814
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601815 = formData.getOrDefault("AutoScalingGroupName")
  valid_601815 = validateParameter(valid_601815, JString, required = true,
                                 default = nil)
  if valid_601815 != nil:
    section.add "AutoScalingGroupName", valid_601815
  var valid_601816 = formData.getOrDefault("DesiredCapacity")
  valid_601816 = validateParameter(valid_601816, JInt, required = true, default = nil)
  if valid_601816 != nil:
    section.add "DesiredCapacity", valid_601816
  var valid_601817 = formData.getOrDefault("HonorCooldown")
  valid_601817 = validateParameter(valid_601817, JBool, required = false, default = nil)
  if valid_601817 != nil:
    section.add "HonorCooldown", valid_601817
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601818: Call_PostSetDesiredCapacity_601803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601818.validator(path, query, header, formData, body)
  let scheme = call_601818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601818.url(scheme.get, call_601818.host, call_601818.base,
                         call_601818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601818, url, valid)

proc call*(call_601819: Call_PostSetDesiredCapacity_601803;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601820 = newJObject()
  var formData_601821 = newJObject()
  add(formData_601821, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_601821, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_601821, "HonorCooldown", newJBool(HonorCooldown))
  add(query_601820, "Action", newJString(Action))
  add(query_601820, "Version", newJString(Version))
  result = call_601819.call(nil, query_601820, nil, formData_601821, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_601803(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_601804, base: "/",
    url: url_PostSetDesiredCapacity_601805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_601785 = ref object of OpenApiRestCall_599368
proc url_GetSetDesiredCapacity_601787(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDesiredCapacity_601786(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_601788 = query.getOrDefault("DesiredCapacity")
  valid_601788 = validateParameter(valid_601788, JInt, required = true, default = nil)
  if valid_601788 != nil:
    section.add "DesiredCapacity", valid_601788
  var valid_601789 = query.getOrDefault("AutoScalingGroupName")
  valid_601789 = validateParameter(valid_601789, JString, required = true,
                                 default = nil)
  if valid_601789 != nil:
    section.add "AutoScalingGroupName", valid_601789
  var valid_601790 = query.getOrDefault("Action")
  valid_601790 = validateParameter(valid_601790, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_601790 != nil:
    section.add "Action", valid_601790
  var valid_601791 = query.getOrDefault("HonorCooldown")
  valid_601791 = validateParameter(valid_601791, JBool, required = false, default = nil)
  if valid_601791 != nil:
    section.add "HonorCooldown", valid_601791
  var valid_601792 = query.getOrDefault("Version")
  valid_601792 = validateParameter(valid_601792, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601792 != nil:
    section.add "Version", valid_601792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601793 = header.getOrDefault("X-Amz-Date")
  valid_601793 = validateParameter(valid_601793, JString, required = false,
                                 default = nil)
  if valid_601793 != nil:
    section.add "X-Amz-Date", valid_601793
  var valid_601794 = header.getOrDefault("X-Amz-Security-Token")
  valid_601794 = validateParameter(valid_601794, JString, required = false,
                                 default = nil)
  if valid_601794 != nil:
    section.add "X-Amz-Security-Token", valid_601794
  var valid_601795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601795 = validateParameter(valid_601795, JString, required = false,
                                 default = nil)
  if valid_601795 != nil:
    section.add "X-Amz-Content-Sha256", valid_601795
  var valid_601796 = header.getOrDefault("X-Amz-Algorithm")
  valid_601796 = validateParameter(valid_601796, JString, required = false,
                                 default = nil)
  if valid_601796 != nil:
    section.add "X-Amz-Algorithm", valid_601796
  var valid_601797 = header.getOrDefault("X-Amz-Signature")
  valid_601797 = validateParameter(valid_601797, JString, required = false,
                                 default = nil)
  if valid_601797 != nil:
    section.add "X-Amz-Signature", valid_601797
  var valid_601798 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601798 = validateParameter(valid_601798, JString, required = false,
                                 default = nil)
  if valid_601798 != nil:
    section.add "X-Amz-SignedHeaders", valid_601798
  var valid_601799 = header.getOrDefault("X-Amz-Credential")
  valid_601799 = validateParameter(valid_601799, JString, required = false,
                                 default = nil)
  if valid_601799 != nil:
    section.add "X-Amz-Credential", valid_601799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601800: Call_GetSetDesiredCapacity_601785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601800.validator(path, query, header, formData, body)
  let scheme = call_601800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601800.url(scheme.get, call_601800.host, call_601800.base,
                         call_601800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601800, url, valid)

proc call*(call_601801: Call_GetSetDesiredCapacity_601785; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_601802 = newJObject()
  add(query_601802, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_601802, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601802, "Action", newJString(Action))
  add(query_601802, "HonorCooldown", newJBool(HonorCooldown))
  add(query_601802, "Version", newJString(Version))
  result = call_601801.call(nil, query_601802, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_601785(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_601786, base: "/",
    url: url_GetSetDesiredCapacity_601787, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_601840 = ref object of OpenApiRestCall_599368
proc url_PostSetInstanceHealth_601842(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceHealth_601841(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601843 = query.getOrDefault("Action")
  valid_601843 = validateParameter(valid_601843, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_601843 != nil:
    section.add "Action", valid_601843
  var valid_601844 = query.getOrDefault("Version")
  valid_601844 = validateParameter(valid_601844, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601844 != nil:
    section.add "Version", valid_601844
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601845 = header.getOrDefault("X-Amz-Date")
  valid_601845 = validateParameter(valid_601845, JString, required = false,
                                 default = nil)
  if valid_601845 != nil:
    section.add "X-Amz-Date", valid_601845
  var valid_601846 = header.getOrDefault("X-Amz-Security-Token")
  valid_601846 = validateParameter(valid_601846, JString, required = false,
                                 default = nil)
  if valid_601846 != nil:
    section.add "X-Amz-Security-Token", valid_601846
  var valid_601847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601847 = validateParameter(valid_601847, JString, required = false,
                                 default = nil)
  if valid_601847 != nil:
    section.add "X-Amz-Content-Sha256", valid_601847
  var valid_601848 = header.getOrDefault("X-Amz-Algorithm")
  valid_601848 = validateParameter(valid_601848, JString, required = false,
                                 default = nil)
  if valid_601848 != nil:
    section.add "X-Amz-Algorithm", valid_601848
  var valid_601849 = header.getOrDefault("X-Amz-Signature")
  valid_601849 = validateParameter(valid_601849, JString, required = false,
                                 default = nil)
  if valid_601849 != nil:
    section.add "X-Amz-Signature", valid_601849
  var valid_601850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601850 = validateParameter(valid_601850, JString, required = false,
                                 default = nil)
  if valid_601850 != nil:
    section.add "X-Amz-SignedHeaders", valid_601850
  var valid_601851 = header.getOrDefault("X-Amz-Credential")
  valid_601851 = validateParameter(valid_601851, JString, required = false,
                                 default = nil)
  if valid_601851 != nil:
    section.add "X-Amz-Credential", valid_601851
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_601852 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_601852 = validateParameter(valid_601852, JBool, required = false, default = nil)
  if valid_601852 != nil:
    section.add "ShouldRespectGracePeriod", valid_601852
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_601853 = formData.getOrDefault("HealthStatus")
  valid_601853 = validateParameter(valid_601853, JString, required = true,
                                 default = nil)
  if valid_601853 != nil:
    section.add "HealthStatus", valid_601853
  var valid_601854 = formData.getOrDefault("InstanceId")
  valid_601854 = validateParameter(valid_601854, JString, required = true,
                                 default = nil)
  if valid_601854 != nil:
    section.add "InstanceId", valid_601854
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601855: Call_PostSetInstanceHealth_601840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601855.validator(path, query, header, formData, body)
  let scheme = call_601855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601855.url(scheme.get, call_601855.host, call_601855.base,
                         call_601855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601855, url, valid)

proc call*(call_601856: Call_PostSetInstanceHealth_601840; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_601857 = newJObject()
  var formData_601858 = newJObject()
  add(formData_601858, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(query_601857, "Action", newJString(Action))
  add(formData_601858, "HealthStatus", newJString(HealthStatus))
  add(formData_601858, "InstanceId", newJString(InstanceId))
  add(query_601857, "Version", newJString(Version))
  result = call_601856.call(nil, query_601857, nil, formData_601858, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_601840(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_601841, base: "/",
    url: url_PostSetInstanceHealth_601842, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_601822 = ref object of OpenApiRestCall_599368
proc url_GetSetInstanceHealth_601824(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceHealth_601823(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: JString (required)
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `HealthStatus` field"
  var valid_601825 = query.getOrDefault("HealthStatus")
  valid_601825 = validateParameter(valid_601825, JString, required = true,
                                 default = nil)
  if valid_601825 != nil:
    section.add "HealthStatus", valid_601825
  var valid_601826 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_601826 = validateParameter(valid_601826, JBool, required = false, default = nil)
  if valid_601826 != nil:
    section.add "ShouldRespectGracePeriod", valid_601826
  var valid_601827 = query.getOrDefault("Action")
  valid_601827 = validateParameter(valid_601827, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_601827 != nil:
    section.add "Action", valid_601827
  var valid_601828 = query.getOrDefault("InstanceId")
  valid_601828 = validateParameter(valid_601828, JString, required = true,
                                 default = nil)
  if valid_601828 != nil:
    section.add "InstanceId", valid_601828
  var valid_601829 = query.getOrDefault("Version")
  valid_601829 = validateParameter(valid_601829, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601829 != nil:
    section.add "Version", valid_601829
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601830 = header.getOrDefault("X-Amz-Date")
  valid_601830 = validateParameter(valid_601830, JString, required = false,
                                 default = nil)
  if valid_601830 != nil:
    section.add "X-Amz-Date", valid_601830
  var valid_601831 = header.getOrDefault("X-Amz-Security-Token")
  valid_601831 = validateParameter(valid_601831, JString, required = false,
                                 default = nil)
  if valid_601831 != nil:
    section.add "X-Amz-Security-Token", valid_601831
  var valid_601832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601832 = validateParameter(valid_601832, JString, required = false,
                                 default = nil)
  if valid_601832 != nil:
    section.add "X-Amz-Content-Sha256", valid_601832
  var valid_601833 = header.getOrDefault("X-Amz-Algorithm")
  valid_601833 = validateParameter(valid_601833, JString, required = false,
                                 default = nil)
  if valid_601833 != nil:
    section.add "X-Amz-Algorithm", valid_601833
  var valid_601834 = header.getOrDefault("X-Amz-Signature")
  valid_601834 = validateParameter(valid_601834, JString, required = false,
                                 default = nil)
  if valid_601834 != nil:
    section.add "X-Amz-Signature", valid_601834
  var valid_601835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601835 = validateParameter(valid_601835, JString, required = false,
                                 default = nil)
  if valid_601835 != nil:
    section.add "X-Amz-SignedHeaders", valid_601835
  var valid_601836 = header.getOrDefault("X-Amz-Credential")
  valid_601836 = validateParameter(valid_601836, JString, required = false,
                                 default = nil)
  if valid_601836 != nil:
    section.add "X-Amz-Credential", valid_601836
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601837: Call_GetSetInstanceHealth_601822; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601837.validator(path, query, header, formData, body)
  let scheme = call_601837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601837.url(scheme.get, call_601837.host, call_601837.base,
                         call_601837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601837, url, valid)

proc call*(call_601838: Call_GetSetInstanceHealth_601822; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_601839 = newJObject()
  add(query_601839, "HealthStatus", newJString(HealthStatus))
  add(query_601839, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_601839, "Action", newJString(Action))
  add(query_601839, "InstanceId", newJString(InstanceId))
  add(query_601839, "Version", newJString(Version))
  result = call_601838.call(nil, query_601839, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_601822(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_601823, base: "/",
    url: url_GetSetInstanceHealth_601824, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_601877 = ref object of OpenApiRestCall_599368
proc url_PostSetInstanceProtection_601879(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceProtection_601878(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601880 = query.getOrDefault("Action")
  valid_601880 = validateParameter(valid_601880, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_601880 != nil:
    section.add "Action", valid_601880
  var valid_601881 = query.getOrDefault("Version")
  valid_601881 = validateParameter(valid_601881, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601881 != nil:
    section.add "Version", valid_601881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601882 = header.getOrDefault("X-Amz-Date")
  valid_601882 = validateParameter(valid_601882, JString, required = false,
                                 default = nil)
  if valid_601882 != nil:
    section.add "X-Amz-Date", valid_601882
  var valid_601883 = header.getOrDefault("X-Amz-Security-Token")
  valid_601883 = validateParameter(valid_601883, JString, required = false,
                                 default = nil)
  if valid_601883 != nil:
    section.add "X-Amz-Security-Token", valid_601883
  var valid_601884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601884 = validateParameter(valid_601884, JString, required = false,
                                 default = nil)
  if valid_601884 != nil:
    section.add "X-Amz-Content-Sha256", valid_601884
  var valid_601885 = header.getOrDefault("X-Amz-Algorithm")
  valid_601885 = validateParameter(valid_601885, JString, required = false,
                                 default = nil)
  if valid_601885 != nil:
    section.add "X-Amz-Algorithm", valid_601885
  var valid_601886 = header.getOrDefault("X-Amz-Signature")
  valid_601886 = validateParameter(valid_601886, JString, required = false,
                                 default = nil)
  if valid_601886 != nil:
    section.add "X-Amz-Signature", valid_601886
  var valid_601887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601887 = validateParameter(valid_601887, JString, required = false,
                                 default = nil)
  if valid_601887 != nil:
    section.add "X-Amz-SignedHeaders", valid_601887
  var valid_601888 = header.getOrDefault("X-Amz-Credential")
  valid_601888 = validateParameter(valid_601888, JString, required = false,
                                 default = nil)
  if valid_601888 != nil:
    section.add "X-Amz-Credential", valid_601888
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601889 = formData.getOrDefault("AutoScalingGroupName")
  valid_601889 = validateParameter(valid_601889, JString, required = true,
                                 default = nil)
  if valid_601889 != nil:
    section.add "AutoScalingGroupName", valid_601889
  var valid_601890 = formData.getOrDefault("InstanceIds")
  valid_601890 = validateParameter(valid_601890, JArray, required = true, default = nil)
  if valid_601890 != nil:
    section.add "InstanceIds", valid_601890
  var valid_601891 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_601891 = validateParameter(valid_601891, JBool, required = true, default = nil)
  if valid_601891 != nil:
    section.add "ProtectedFromScaleIn", valid_601891
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601892: Call_PostSetInstanceProtection_601877; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601892.validator(path, query, header, formData, body)
  let scheme = call_601892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601892.url(scheme.get, call_601892.host, call_601892.base,
                         call_601892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601892, url, valid)

proc call*(call_601893: Call_PostSetInstanceProtection_601877;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_601894 = newJObject()
  var formData_601895 = newJObject()
  add(formData_601895, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_601895.add "InstanceIds", InstanceIds
  add(query_601894, "Action", newJString(Action))
  add(formData_601895, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_601894, "Version", newJString(Version))
  result = call_601893.call(nil, query_601894, nil, formData_601895, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_601877(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_601878, base: "/",
    url: url_PostSetInstanceProtection_601879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_601859 = ref object of OpenApiRestCall_599368
proc url_GetSetInstanceProtection_601861(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceProtection_601860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601862 = query.getOrDefault("AutoScalingGroupName")
  valid_601862 = validateParameter(valid_601862, JString, required = true,
                                 default = nil)
  if valid_601862 != nil:
    section.add "AutoScalingGroupName", valid_601862
  var valid_601863 = query.getOrDefault("Action")
  valid_601863 = validateParameter(valid_601863, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_601863 != nil:
    section.add "Action", valid_601863
  var valid_601864 = query.getOrDefault("InstanceIds")
  valid_601864 = validateParameter(valid_601864, JArray, required = true, default = nil)
  if valid_601864 != nil:
    section.add "InstanceIds", valid_601864
  var valid_601865 = query.getOrDefault("ProtectedFromScaleIn")
  valid_601865 = validateParameter(valid_601865, JBool, required = true, default = nil)
  if valid_601865 != nil:
    section.add "ProtectedFromScaleIn", valid_601865
  var valid_601866 = query.getOrDefault("Version")
  valid_601866 = validateParameter(valid_601866, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601866 != nil:
    section.add "Version", valid_601866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601867 = header.getOrDefault("X-Amz-Date")
  valid_601867 = validateParameter(valid_601867, JString, required = false,
                                 default = nil)
  if valid_601867 != nil:
    section.add "X-Amz-Date", valid_601867
  var valid_601868 = header.getOrDefault("X-Amz-Security-Token")
  valid_601868 = validateParameter(valid_601868, JString, required = false,
                                 default = nil)
  if valid_601868 != nil:
    section.add "X-Amz-Security-Token", valid_601868
  var valid_601869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601869 = validateParameter(valid_601869, JString, required = false,
                                 default = nil)
  if valid_601869 != nil:
    section.add "X-Amz-Content-Sha256", valid_601869
  var valid_601870 = header.getOrDefault("X-Amz-Algorithm")
  valid_601870 = validateParameter(valid_601870, JString, required = false,
                                 default = nil)
  if valid_601870 != nil:
    section.add "X-Amz-Algorithm", valid_601870
  var valid_601871 = header.getOrDefault("X-Amz-Signature")
  valid_601871 = validateParameter(valid_601871, JString, required = false,
                                 default = nil)
  if valid_601871 != nil:
    section.add "X-Amz-Signature", valid_601871
  var valid_601872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601872 = validateParameter(valid_601872, JString, required = false,
                                 default = nil)
  if valid_601872 != nil:
    section.add "X-Amz-SignedHeaders", valid_601872
  var valid_601873 = header.getOrDefault("X-Amz-Credential")
  valid_601873 = validateParameter(valid_601873, JString, required = false,
                                 default = nil)
  if valid_601873 != nil:
    section.add "X-Amz-Credential", valid_601873
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601874: Call_GetSetInstanceProtection_601859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601874.validator(path, query, header, formData, body)
  let scheme = call_601874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601874.url(scheme.get, call_601874.host, call_601874.base,
                         call_601874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601874, url, valid)

proc call*(call_601875: Call_GetSetInstanceProtection_601859;
          AutoScalingGroupName: string; InstanceIds: JsonNode;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_601876 = newJObject()
  add(query_601876, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601876, "Action", newJString(Action))
  if InstanceIds != nil:
    query_601876.add "InstanceIds", InstanceIds
  add(query_601876, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_601876, "Version", newJString(Version))
  result = call_601875.call(nil, query_601876, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_601859(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_601860, base: "/",
    url: url_GetSetInstanceProtection_601861, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_601913 = ref object of OpenApiRestCall_599368
proc url_PostSuspendProcesses_601915(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSuspendProcesses_601914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601916 = query.getOrDefault("Action")
  valid_601916 = validateParameter(valid_601916, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_601916 != nil:
    section.add "Action", valid_601916
  var valid_601917 = query.getOrDefault("Version")
  valid_601917 = validateParameter(valid_601917, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601917 != nil:
    section.add "Version", valid_601917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601918 = header.getOrDefault("X-Amz-Date")
  valid_601918 = validateParameter(valid_601918, JString, required = false,
                                 default = nil)
  if valid_601918 != nil:
    section.add "X-Amz-Date", valid_601918
  var valid_601919 = header.getOrDefault("X-Amz-Security-Token")
  valid_601919 = validateParameter(valid_601919, JString, required = false,
                                 default = nil)
  if valid_601919 != nil:
    section.add "X-Amz-Security-Token", valid_601919
  var valid_601920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601920 = validateParameter(valid_601920, JString, required = false,
                                 default = nil)
  if valid_601920 != nil:
    section.add "X-Amz-Content-Sha256", valid_601920
  var valid_601921 = header.getOrDefault("X-Amz-Algorithm")
  valid_601921 = validateParameter(valid_601921, JString, required = false,
                                 default = nil)
  if valid_601921 != nil:
    section.add "X-Amz-Algorithm", valid_601921
  var valid_601922 = header.getOrDefault("X-Amz-Signature")
  valid_601922 = validateParameter(valid_601922, JString, required = false,
                                 default = nil)
  if valid_601922 != nil:
    section.add "X-Amz-Signature", valid_601922
  var valid_601923 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601923 = validateParameter(valid_601923, JString, required = false,
                                 default = nil)
  if valid_601923 != nil:
    section.add "X-Amz-SignedHeaders", valid_601923
  var valid_601924 = header.getOrDefault("X-Amz-Credential")
  valid_601924 = validateParameter(valid_601924, JString, required = false,
                                 default = nil)
  if valid_601924 != nil:
    section.add "X-Amz-Credential", valid_601924
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601925 = formData.getOrDefault("AutoScalingGroupName")
  valid_601925 = validateParameter(valid_601925, JString, required = true,
                                 default = nil)
  if valid_601925 != nil:
    section.add "AutoScalingGroupName", valid_601925
  var valid_601926 = formData.getOrDefault("ScalingProcesses")
  valid_601926 = validateParameter(valid_601926, JArray, required = false,
                                 default = nil)
  if valid_601926 != nil:
    section.add "ScalingProcesses", valid_601926
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601927: Call_PostSuspendProcesses_601913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601927.validator(path, query, header, formData, body)
  let scheme = call_601927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601927.url(scheme.get, call_601927.host, call_601927.base,
                         call_601927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601927, url, valid)

proc call*(call_601928: Call_PostSuspendProcesses_601913;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601929 = newJObject()
  var formData_601930 = newJObject()
  add(formData_601930, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if ScalingProcesses != nil:
    formData_601930.add "ScalingProcesses", ScalingProcesses
  add(query_601929, "Action", newJString(Action))
  add(query_601929, "Version", newJString(Version))
  result = call_601928.call(nil, query_601929, nil, formData_601930, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_601913(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_601914, base: "/",
    url: url_PostSuspendProcesses_601915, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_601896 = ref object of OpenApiRestCall_599368
proc url_GetSuspendProcesses_601898(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSuspendProcesses_601897(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_601899 = query.getOrDefault("ScalingProcesses")
  valid_601899 = validateParameter(valid_601899, JArray, required = false,
                                 default = nil)
  if valid_601899 != nil:
    section.add "ScalingProcesses", valid_601899
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601900 = query.getOrDefault("AutoScalingGroupName")
  valid_601900 = validateParameter(valid_601900, JString, required = true,
                                 default = nil)
  if valid_601900 != nil:
    section.add "AutoScalingGroupName", valid_601900
  var valid_601901 = query.getOrDefault("Action")
  valid_601901 = validateParameter(valid_601901, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_601901 != nil:
    section.add "Action", valid_601901
  var valid_601902 = query.getOrDefault("Version")
  valid_601902 = validateParameter(valid_601902, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601902 != nil:
    section.add "Version", valid_601902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601903 = header.getOrDefault("X-Amz-Date")
  valid_601903 = validateParameter(valid_601903, JString, required = false,
                                 default = nil)
  if valid_601903 != nil:
    section.add "X-Amz-Date", valid_601903
  var valid_601904 = header.getOrDefault("X-Amz-Security-Token")
  valid_601904 = validateParameter(valid_601904, JString, required = false,
                                 default = nil)
  if valid_601904 != nil:
    section.add "X-Amz-Security-Token", valid_601904
  var valid_601905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601905 = validateParameter(valid_601905, JString, required = false,
                                 default = nil)
  if valid_601905 != nil:
    section.add "X-Amz-Content-Sha256", valid_601905
  var valid_601906 = header.getOrDefault("X-Amz-Algorithm")
  valid_601906 = validateParameter(valid_601906, JString, required = false,
                                 default = nil)
  if valid_601906 != nil:
    section.add "X-Amz-Algorithm", valid_601906
  var valid_601907 = header.getOrDefault("X-Amz-Signature")
  valid_601907 = validateParameter(valid_601907, JString, required = false,
                                 default = nil)
  if valid_601907 != nil:
    section.add "X-Amz-Signature", valid_601907
  var valid_601908 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601908 = validateParameter(valid_601908, JString, required = false,
                                 default = nil)
  if valid_601908 != nil:
    section.add "X-Amz-SignedHeaders", valid_601908
  var valid_601909 = header.getOrDefault("X-Amz-Credential")
  valid_601909 = validateParameter(valid_601909, JString, required = false,
                                 default = nil)
  if valid_601909 != nil:
    section.add "X-Amz-Credential", valid_601909
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601910: Call_GetSuspendProcesses_601896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_601910.validator(path, query, header, formData, body)
  let scheme = call_601910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601910.url(scheme.get, call_601910.host, call_601910.base,
                         call_601910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601910, url, valid)

proc call*(call_601911: Call_GetSuspendProcesses_601896;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601912 = newJObject()
  if ScalingProcesses != nil:
    query_601912.add "ScalingProcesses", ScalingProcesses
  add(query_601912, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_601912, "Action", newJString(Action))
  add(query_601912, "Version", newJString(Version))
  result = call_601911.call(nil, query_601912, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_601896(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_601897, base: "/",
    url: url_GetSuspendProcesses_601898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_601948 = ref object of OpenApiRestCall_599368
proc url_PostTerminateInstanceInAutoScalingGroup_601950(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_601949(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601951 = query.getOrDefault("Action")
  valid_601951 = validateParameter(valid_601951, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_601951 != nil:
    section.add "Action", valid_601951
  var valid_601952 = query.getOrDefault("Version")
  valid_601952 = validateParameter(valid_601952, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601952 != nil:
    section.add "Version", valid_601952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601953 = header.getOrDefault("X-Amz-Date")
  valid_601953 = validateParameter(valid_601953, JString, required = false,
                                 default = nil)
  if valid_601953 != nil:
    section.add "X-Amz-Date", valid_601953
  var valid_601954 = header.getOrDefault("X-Amz-Security-Token")
  valid_601954 = validateParameter(valid_601954, JString, required = false,
                                 default = nil)
  if valid_601954 != nil:
    section.add "X-Amz-Security-Token", valid_601954
  var valid_601955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601955 = validateParameter(valid_601955, JString, required = false,
                                 default = nil)
  if valid_601955 != nil:
    section.add "X-Amz-Content-Sha256", valid_601955
  var valid_601956 = header.getOrDefault("X-Amz-Algorithm")
  valid_601956 = validateParameter(valid_601956, JString, required = false,
                                 default = nil)
  if valid_601956 != nil:
    section.add "X-Amz-Algorithm", valid_601956
  var valid_601957 = header.getOrDefault("X-Amz-Signature")
  valid_601957 = validateParameter(valid_601957, JString, required = false,
                                 default = nil)
  if valid_601957 != nil:
    section.add "X-Amz-Signature", valid_601957
  var valid_601958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601958 = validateParameter(valid_601958, JString, required = false,
                                 default = nil)
  if valid_601958 != nil:
    section.add "X-Amz-SignedHeaders", valid_601958
  var valid_601959 = header.getOrDefault("X-Amz-Credential")
  valid_601959 = validateParameter(valid_601959, JString, required = false,
                                 default = nil)
  if valid_601959 != nil:
    section.add "X-Amz-Credential", valid_601959
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_601960 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_601960 = validateParameter(valid_601960, JBool, required = true, default = nil)
  if valid_601960 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_601960
  var valid_601961 = formData.getOrDefault("InstanceId")
  valid_601961 = validateParameter(valid_601961, JString, required = true,
                                 default = nil)
  if valid_601961 != nil:
    section.add "InstanceId", valid_601961
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601962: Call_PostTerminateInstanceInAutoScalingGroup_601948;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_601962.validator(path, query, header, formData, body)
  let scheme = call_601962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601962.url(scheme.get, call_601962.host, call_601962.base,
                         call_601962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601962, url, valid)

proc call*(call_601963: Call_PostTerminateInstanceInAutoScalingGroup_601948;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   Action: string (required)
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_601964 = newJObject()
  var formData_601965 = newJObject()
  add(formData_601965, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_601964, "Action", newJString(Action))
  add(formData_601965, "InstanceId", newJString(InstanceId))
  add(query_601964, "Version", newJString(Version))
  result = call_601963.call(nil, query_601964, nil, formData_601965, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_601948(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_601949, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_601950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_601931 = ref object of OpenApiRestCall_599368
proc url_GetTerminateInstanceInAutoScalingGroup_601933(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_601932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601934 = query.getOrDefault("Action")
  valid_601934 = validateParameter(valid_601934, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_601934 != nil:
    section.add "Action", valid_601934
  var valid_601935 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_601935 = validateParameter(valid_601935, JBool, required = true, default = nil)
  if valid_601935 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_601935
  var valid_601936 = query.getOrDefault("InstanceId")
  valid_601936 = validateParameter(valid_601936, JString, required = true,
                                 default = nil)
  if valid_601936 != nil:
    section.add "InstanceId", valid_601936
  var valid_601937 = query.getOrDefault("Version")
  valid_601937 = validateParameter(valid_601937, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601937 != nil:
    section.add "Version", valid_601937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601938 = header.getOrDefault("X-Amz-Date")
  valid_601938 = validateParameter(valid_601938, JString, required = false,
                                 default = nil)
  if valid_601938 != nil:
    section.add "X-Amz-Date", valid_601938
  var valid_601939 = header.getOrDefault("X-Amz-Security-Token")
  valid_601939 = validateParameter(valid_601939, JString, required = false,
                                 default = nil)
  if valid_601939 != nil:
    section.add "X-Amz-Security-Token", valid_601939
  var valid_601940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601940 = validateParameter(valid_601940, JString, required = false,
                                 default = nil)
  if valid_601940 != nil:
    section.add "X-Amz-Content-Sha256", valid_601940
  var valid_601941 = header.getOrDefault("X-Amz-Algorithm")
  valid_601941 = validateParameter(valid_601941, JString, required = false,
                                 default = nil)
  if valid_601941 != nil:
    section.add "X-Amz-Algorithm", valid_601941
  var valid_601942 = header.getOrDefault("X-Amz-Signature")
  valid_601942 = validateParameter(valid_601942, JString, required = false,
                                 default = nil)
  if valid_601942 != nil:
    section.add "X-Amz-Signature", valid_601942
  var valid_601943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601943 = validateParameter(valid_601943, JString, required = false,
                                 default = nil)
  if valid_601943 != nil:
    section.add "X-Amz-SignedHeaders", valid_601943
  var valid_601944 = header.getOrDefault("X-Amz-Credential")
  valid_601944 = validateParameter(valid_601944, JString, required = false,
                                 default = nil)
  if valid_601944 != nil:
    section.add "X-Amz-Credential", valid_601944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601945: Call_GetTerminateInstanceInAutoScalingGroup_601931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_601945.validator(path, query, header, formData, body)
  let scheme = call_601945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601945.url(scheme.get, call_601945.host, call_601945.base,
                         call_601945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601945, url, valid)

proc call*(call_601946: Call_GetTerminateInstanceInAutoScalingGroup_601931;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   Action: string (required)
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Version: string (required)
  var query_601947 = newJObject()
  add(query_601947, "Action", newJString(Action))
  add(query_601947, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_601947, "InstanceId", newJString(InstanceId))
  add(query_601947, "Version", newJString(Version))
  result = call_601946.call(nil, query_601947, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_601931(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_601932, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_601933,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_602001 = ref object of OpenApiRestCall_599368
proc url_PostUpdateAutoScalingGroup_602003(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAutoScalingGroup_602002(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602004 = query.getOrDefault("Action")
  valid_602004 = validateParameter(valid_602004, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_602004 != nil:
    section.add "Action", valid_602004
  var valid_602005 = query.getOrDefault("Version")
  valid_602005 = validateParameter(valid_602005, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_602005 != nil:
    section.add "Version", valid_602005
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602006 = header.getOrDefault("X-Amz-Date")
  valid_602006 = validateParameter(valid_602006, JString, required = false,
                                 default = nil)
  if valid_602006 != nil:
    section.add "X-Amz-Date", valid_602006
  var valid_602007 = header.getOrDefault("X-Amz-Security-Token")
  valid_602007 = validateParameter(valid_602007, JString, required = false,
                                 default = nil)
  if valid_602007 != nil:
    section.add "X-Amz-Security-Token", valid_602007
  var valid_602008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "X-Amz-Content-Sha256", valid_602008
  var valid_602009 = header.getOrDefault("X-Amz-Algorithm")
  valid_602009 = validateParameter(valid_602009, JString, required = false,
                                 default = nil)
  if valid_602009 != nil:
    section.add "X-Amz-Algorithm", valid_602009
  var valid_602010 = header.getOrDefault("X-Amz-Signature")
  valid_602010 = validateParameter(valid_602010, JString, required = false,
                                 default = nil)
  if valid_602010 != nil:
    section.add "X-Amz-Signature", valid_602010
  var valid_602011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602011 = validateParameter(valid_602011, JString, required = false,
                                 default = nil)
  if valid_602011 != nil:
    section.add "X-Amz-SignedHeaders", valid_602011
  var valid_602012 = header.getOrDefault("X-Amz-Credential")
  valid_602012 = validateParameter(valid_602012, JString, required = false,
                                 default = nil)
  if valid_602012 != nil:
    section.add "X-Amz-Credential", valid_602012
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_602013 = formData.getOrDefault("AutoScalingGroupName")
  valid_602013 = validateParameter(valid_602013, JString, required = true,
                                 default = nil)
  if valid_602013 != nil:
    section.add "AutoScalingGroupName", valid_602013
  var valid_602014 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_602014 = validateParameter(valid_602014, JString, required = false,
                                 default = nil)
  if valid_602014 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_602014
  var valid_602015 = formData.getOrDefault("LaunchConfigurationName")
  valid_602015 = validateParameter(valid_602015, JString, required = false,
                                 default = nil)
  if valid_602015 != nil:
    section.add "LaunchConfigurationName", valid_602015
  var valid_602016 = formData.getOrDefault("HealthCheckType")
  valid_602016 = validateParameter(valid_602016, JString, required = false,
                                 default = nil)
  if valid_602016 != nil:
    section.add "HealthCheckType", valid_602016
  var valid_602017 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_602017 = validateParameter(valid_602017, JString, required = false,
                                 default = nil)
  if valid_602017 != nil:
    section.add "ServiceLinkedRoleARN", valid_602017
  var valid_602018 = formData.getOrDefault("DesiredCapacity")
  valid_602018 = validateParameter(valid_602018, JInt, required = false, default = nil)
  if valid_602018 != nil:
    section.add "DesiredCapacity", valid_602018
  var valid_602019 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_602019 = validateParameter(valid_602019, JInt, required = false, default = nil)
  if valid_602019 != nil:
    section.add "HealthCheckGracePeriod", valid_602019
  var valid_602020 = formData.getOrDefault("VPCZoneIdentifier")
  valid_602020 = validateParameter(valid_602020, JString, required = false,
                                 default = nil)
  if valid_602020 != nil:
    section.add "VPCZoneIdentifier", valid_602020
  var valid_602021 = formData.getOrDefault("AvailabilityZones")
  valid_602021 = validateParameter(valid_602021, JArray, required = false,
                                 default = nil)
  if valid_602021 != nil:
    section.add "AvailabilityZones", valid_602021
  var valid_602022 = formData.getOrDefault("MinSize")
  valid_602022 = validateParameter(valid_602022, JInt, required = false, default = nil)
  if valid_602022 != nil:
    section.add "MinSize", valid_602022
  var valid_602023 = formData.getOrDefault("DefaultCooldown")
  valid_602023 = validateParameter(valid_602023, JInt, required = false, default = nil)
  if valid_602023 != nil:
    section.add "DefaultCooldown", valid_602023
  var valid_602024 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_602024 = validateParameter(valid_602024, JString, required = false,
                                 default = nil)
  if valid_602024 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_602024
  var valid_602025 = formData.getOrDefault("MaxInstanceLifetime")
  valid_602025 = validateParameter(valid_602025, JInt, required = false, default = nil)
  if valid_602025 != nil:
    section.add "MaxInstanceLifetime", valid_602025
  var valid_602026 = formData.getOrDefault("MaxSize")
  valid_602026 = validateParameter(valid_602026, JInt, required = false, default = nil)
  if valid_602026 != nil:
    section.add "MaxSize", valid_602026
  var valid_602027 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_602027 = validateParameter(valid_602027, JString, required = false,
                                 default = nil)
  if valid_602027 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_602027
  var valid_602028 = formData.getOrDefault("PlacementGroup")
  valid_602028 = validateParameter(valid_602028, JString, required = false,
                                 default = nil)
  if valid_602028 != nil:
    section.add "PlacementGroup", valid_602028
  var valid_602029 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_602029 = validateParameter(valid_602029, JBool, required = false, default = nil)
  if valid_602029 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_602029
  var valid_602030 = formData.getOrDefault("LaunchTemplate.Version")
  valid_602030 = validateParameter(valid_602030, JString, required = false,
                                 default = nil)
  if valid_602030 != nil:
    section.add "LaunchTemplate.Version", valid_602030
  var valid_602031 = formData.getOrDefault("TerminationPolicies")
  valid_602031 = validateParameter(valid_602031, JArray, required = false,
                                 default = nil)
  if valid_602031 != nil:
    section.add "TerminationPolicies", valid_602031
  var valid_602032 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_602032 = validateParameter(valid_602032, JString, required = false,
                                 default = nil)
  if valid_602032 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_602032
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602033: Call_PostUpdateAutoScalingGroup_602001; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_602033.validator(path, query, header, formData, body)
  let scheme = call_602033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602033.url(scheme.get, call_602033.host, call_602033.base,
                         call_602033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602033, url, valid)

proc call*(call_602034: Call_PostUpdateAutoScalingGroup_602001;
          AutoScalingGroupName: string;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchConfigurationName: string = ""; HealthCheckType: string = "";
          ServiceLinkedRoleARN: string = ""; DesiredCapacity: int = 0;
          HealthCheckGracePeriod: int = 0; VPCZoneIdentifier: string = "";
          Action: string = "UpdateAutoScalingGroup";
          AvailabilityZones: JsonNode = nil; MinSize: int = 0; DefaultCooldown: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = "";
          MaxInstanceLifetime: int = 0; MaxSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          PlacementGroup: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          LaunchTemplateVersion: string = ""; TerminationPolicies: JsonNode = nil;
          Version: string = "2011-01-01";
          LaunchTemplateLaunchTemplateName: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  var query_602035 = newJObject()
  var formData_602036 = newJObject()
  add(formData_602036, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_602036, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_602036, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_602036, "HealthCheckType", newJString(HealthCheckType))
  add(formData_602036, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_602036, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_602036, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_602036, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_602035, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_602036.add "AvailabilityZones", AvailabilityZones
  add(formData_602036, "MinSize", newJInt(MinSize))
  add(formData_602036, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_602036, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_602036, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(formData_602036, "MaxSize", newJInt(MaxSize))
  add(formData_602036, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_602036, "PlacementGroup", newJString(PlacementGroup))
  add(formData_602036, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_602036, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  if TerminationPolicies != nil:
    formData_602036.add "TerminationPolicies", TerminationPolicies
  add(query_602035, "Version", newJString(Version))
  add(formData_602036, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  result = call_602034.call(nil, query_602035, nil, formData_602036, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_602001(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_602002, base: "/",
    url: url_PostUpdateAutoScalingGroup_602003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_601966 = ref object of OpenApiRestCall_599368
proc url_GetUpdateAutoScalingGroup_601968(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAutoScalingGroup_601967(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: JString (required)
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: JString (required)
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  section = newJObject()
  var valid_601969 = query.getOrDefault("HealthCheckGracePeriod")
  valid_601969 = validateParameter(valid_601969, JInt, required = false, default = nil)
  if valid_601969 != nil:
    section.add "HealthCheckGracePeriod", valid_601969
  var valid_601970 = query.getOrDefault("TerminationPolicies")
  valid_601970 = validateParameter(valid_601970, JArray, required = false,
                                 default = nil)
  if valid_601970 != nil:
    section.add "TerminationPolicies", valid_601970
  var valid_601971 = query.getOrDefault("HealthCheckType")
  valid_601971 = validateParameter(valid_601971, JString, required = false,
                                 default = nil)
  if valid_601971 != nil:
    section.add "HealthCheckType", valid_601971
  var valid_601972 = query.getOrDefault("DesiredCapacity")
  valid_601972 = validateParameter(valid_601972, JInt, required = false, default = nil)
  if valid_601972 != nil:
    section.add "DesiredCapacity", valid_601972
  var valid_601973 = query.getOrDefault("DefaultCooldown")
  valid_601973 = validateParameter(valid_601973, JInt, required = false, default = nil)
  if valid_601973 != nil:
    section.add "DefaultCooldown", valid_601973
  var valid_601974 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_601974 = validateParameter(valid_601974, JString, required = false,
                                 default = nil)
  if valid_601974 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_601974
  var valid_601975 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_601975 = validateParameter(valid_601975, JString, required = false,
                                 default = nil)
  if valid_601975 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_601975
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_601976 = query.getOrDefault("AutoScalingGroupName")
  valid_601976 = validateParameter(valid_601976, JString, required = true,
                                 default = nil)
  if valid_601976 != nil:
    section.add "AutoScalingGroupName", valid_601976
  var valid_601977 = query.getOrDefault("AvailabilityZones")
  valid_601977 = validateParameter(valid_601977, JArray, required = false,
                                 default = nil)
  if valid_601977 != nil:
    section.add "AvailabilityZones", valid_601977
  var valid_601978 = query.getOrDefault("VPCZoneIdentifier")
  valid_601978 = validateParameter(valid_601978, JString, required = false,
                                 default = nil)
  if valid_601978 != nil:
    section.add "VPCZoneIdentifier", valid_601978
  var valid_601979 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_601979 = validateParameter(valid_601979, JBool, required = false, default = nil)
  if valid_601979 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_601979
  var valid_601980 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_601980 = validateParameter(valid_601980, JString, required = false,
                                 default = nil)
  if valid_601980 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_601980
  var valid_601981 = query.getOrDefault("LaunchConfigurationName")
  valid_601981 = validateParameter(valid_601981, JString, required = false,
                                 default = nil)
  if valid_601981 != nil:
    section.add "LaunchConfigurationName", valid_601981
  var valid_601982 = query.getOrDefault("MaxInstanceLifetime")
  valid_601982 = validateParameter(valid_601982, JInt, required = false, default = nil)
  if valid_601982 != nil:
    section.add "MaxInstanceLifetime", valid_601982
  var valid_601983 = query.getOrDefault("Action")
  valid_601983 = validateParameter(valid_601983, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_601983 != nil:
    section.add "Action", valid_601983
  var valid_601984 = query.getOrDefault("PlacementGroup")
  valid_601984 = validateParameter(valid_601984, JString, required = false,
                                 default = nil)
  if valid_601984 != nil:
    section.add "PlacementGroup", valid_601984
  var valid_601985 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_601985 = validateParameter(valid_601985, JString, required = false,
                                 default = nil)
  if valid_601985 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_601985
  var valid_601986 = query.getOrDefault("LaunchTemplate.Version")
  valid_601986 = validateParameter(valid_601986, JString, required = false,
                                 default = nil)
  if valid_601986 != nil:
    section.add "LaunchTemplate.Version", valid_601986
  var valid_601987 = query.getOrDefault("MaxSize")
  valid_601987 = validateParameter(valid_601987, JInt, required = false, default = nil)
  if valid_601987 != nil:
    section.add "MaxSize", valid_601987
  var valid_601988 = query.getOrDefault("MinSize")
  valid_601988 = validateParameter(valid_601988, JInt, required = false, default = nil)
  if valid_601988 != nil:
    section.add "MinSize", valid_601988
  var valid_601989 = query.getOrDefault("Version")
  valid_601989 = validateParameter(valid_601989, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_601989 != nil:
    section.add "Version", valid_601989
  var valid_601990 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_601990 = validateParameter(valid_601990, JString, required = false,
                                 default = nil)
  if valid_601990 != nil:
    section.add "ServiceLinkedRoleARN", valid_601990
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601991 = header.getOrDefault("X-Amz-Date")
  valid_601991 = validateParameter(valid_601991, JString, required = false,
                                 default = nil)
  if valid_601991 != nil:
    section.add "X-Amz-Date", valid_601991
  var valid_601992 = header.getOrDefault("X-Amz-Security-Token")
  valid_601992 = validateParameter(valid_601992, JString, required = false,
                                 default = nil)
  if valid_601992 != nil:
    section.add "X-Amz-Security-Token", valid_601992
  var valid_601993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601993 = validateParameter(valid_601993, JString, required = false,
                                 default = nil)
  if valid_601993 != nil:
    section.add "X-Amz-Content-Sha256", valid_601993
  var valid_601994 = header.getOrDefault("X-Amz-Algorithm")
  valid_601994 = validateParameter(valid_601994, JString, required = false,
                                 default = nil)
  if valid_601994 != nil:
    section.add "X-Amz-Algorithm", valid_601994
  var valid_601995 = header.getOrDefault("X-Amz-Signature")
  valid_601995 = validateParameter(valid_601995, JString, required = false,
                                 default = nil)
  if valid_601995 != nil:
    section.add "X-Amz-Signature", valid_601995
  var valid_601996 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601996 = validateParameter(valid_601996, JString, required = false,
                                 default = nil)
  if valid_601996 != nil:
    section.add "X-Amz-SignedHeaders", valid_601996
  var valid_601997 = header.getOrDefault("X-Amz-Credential")
  valid_601997 = validateParameter(valid_601997, JString, required = false,
                                 default = nil)
  if valid_601997 != nil:
    section.add "X-Amz-Credential", valid_601997
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601998: Call_GetUpdateAutoScalingGroup_601966; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_601998.validator(path, query, header, formData, body)
  let scheme = call_601998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601998.url(scheme.get, call_601998.host, call_601998.base,
                         call_601998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601998, url, valid)

proc call*(call_601999: Call_GetUpdateAutoScalingGroup_601966;
          AutoScalingGroupName: string; HealthCheckGracePeriod: int = 0;
          TerminationPolicies: JsonNode = nil; HealthCheckType: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LaunchTemplateLaunchTemplateId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          AvailabilityZones: JsonNode = nil; VPCZoneIdentifier: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          MixedInstancesPolicyLaunchTemplate: string = "";
          LaunchConfigurationName: string = ""; MaxInstanceLifetime: int = 0;
          Action: string = "UpdateAutoScalingGroup"; PlacementGroup: string = "";
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateVersion: string = ""; MaxSize: int = 0; MinSize: int = 0;
          Version: string = "2011-01-01"; ServiceLinkedRoleARN: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Action: string (required)
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   Version: string (required)
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  var query_602000 = newJObject()
  add(query_602000, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if TerminationPolicies != nil:
    query_602000.add "TerminationPolicies", TerminationPolicies
  add(query_602000, "HealthCheckType", newJString(HealthCheckType))
  add(query_602000, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_602000, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_602000, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(query_602000, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_602000, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if AvailabilityZones != nil:
    query_602000.add "AvailabilityZones", AvailabilityZones
  add(query_602000, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_602000, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(query_602000, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_602000, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_602000, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_602000, "Action", newJString(Action))
  add(query_602000, "PlacementGroup", newJString(PlacementGroup))
  add(query_602000, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_602000, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_602000, "MaxSize", newJInt(MaxSize))
  add(query_602000, "MinSize", newJInt(MinSize))
  add(query_602000, "Version", newJString(Version))
  add(query_602000, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  result = call_601999.call(nil, query_602000, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_601966(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_601967, base: "/",
    url: url_GetUpdateAutoScalingGroup_601968,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.atozSign(input.getOrDefault("query"), SHA256)
