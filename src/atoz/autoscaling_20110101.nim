
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Auto Scaling
## version: 2011-01-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch or terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. Use this service with AWS Auto Scaling, Amazon CloudWatch, and Elastic Load Balancing.</p> <p>For more information, including information about granting IAM users required permissions for Amazon EC2 Auto Scaling actions, see the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">Amazon EC2 Auto Scaling User Guide</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/autoscaling/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_610658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_610658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_610658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com", "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
                           "us-west-2": "autoscaling.us-west-2.amazonaws.com",
                           "eu-west-2": "autoscaling.eu-west-2.amazonaws.com", "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com", "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
                           "us-east-2": "autoscaling.us-east-2.amazonaws.com",
                           "us-east-1": "autoscaling.us-east-1.amazonaws.com", "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "autoscaling.ap-south-1.amazonaws.com", "eu-north-1": "autoscaling.eu-north-1.amazonaws.com", "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
                           "us-west-1": "autoscaling.us-west-1.amazonaws.com", "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "autoscaling.eu-west-3.amazonaws.com", "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
                           "eu-west-1": "autoscaling.eu-west-1.amazonaws.com", "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com", "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com", "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "autoscaling.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "autoscaling.ap-southeast-1.amazonaws.com",
      "us-west-2": "autoscaling.us-west-2.amazonaws.com",
      "eu-west-2": "autoscaling.eu-west-2.amazonaws.com",
      "ap-northeast-3": "autoscaling.ap-northeast-3.amazonaws.com",
      "eu-central-1": "autoscaling.eu-central-1.amazonaws.com",
      "us-east-2": "autoscaling.us-east-2.amazonaws.com",
      "us-east-1": "autoscaling.us-east-1.amazonaws.com",
      "cn-northwest-1": "autoscaling.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "autoscaling.ap-south-1.amazonaws.com",
      "eu-north-1": "autoscaling.eu-north-1.amazonaws.com",
      "ap-northeast-2": "autoscaling.ap-northeast-2.amazonaws.com",
      "us-west-1": "autoscaling.us-west-1.amazonaws.com",
      "us-gov-east-1": "autoscaling.us-gov-east-1.amazonaws.com",
      "eu-west-3": "autoscaling.eu-west-3.amazonaws.com",
      "cn-north-1": "autoscaling.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "autoscaling.sa-east-1.amazonaws.com",
      "eu-west-1": "autoscaling.eu-west-1.amazonaws.com",
      "us-gov-west-1": "autoscaling.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "autoscaling.ap-southeast-2.amazonaws.com",
      "ca-central-1": "autoscaling.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "autoscaling"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAttachInstances_611268 = ref object of OpenApiRestCall_610658
proc url_PostAttachInstances_611270(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachInstances_611269(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611271 = query.getOrDefault("Action")
  valid_611271 = validateParameter(valid_611271, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_611271 != nil:
    section.add "Action", valid_611271
  var valid_611272 = query.getOrDefault("Version")
  valid_611272 = validateParameter(valid_611272, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611272 != nil:
    section.add "Version", valid_611272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611273 = header.getOrDefault("X-Amz-Signature")
  valid_611273 = validateParameter(valid_611273, JString, required = false,
                                 default = nil)
  if valid_611273 != nil:
    section.add "X-Amz-Signature", valid_611273
  var valid_611274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611274 = validateParameter(valid_611274, JString, required = false,
                                 default = nil)
  if valid_611274 != nil:
    section.add "X-Amz-Content-Sha256", valid_611274
  var valid_611275 = header.getOrDefault("X-Amz-Date")
  valid_611275 = validateParameter(valid_611275, JString, required = false,
                                 default = nil)
  if valid_611275 != nil:
    section.add "X-Amz-Date", valid_611275
  var valid_611276 = header.getOrDefault("X-Amz-Credential")
  valid_611276 = validateParameter(valid_611276, JString, required = false,
                                 default = nil)
  if valid_611276 != nil:
    section.add "X-Amz-Credential", valid_611276
  var valid_611277 = header.getOrDefault("X-Amz-Security-Token")
  valid_611277 = validateParameter(valid_611277, JString, required = false,
                                 default = nil)
  if valid_611277 != nil:
    section.add "X-Amz-Security-Token", valid_611277
  var valid_611278 = header.getOrDefault("X-Amz-Algorithm")
  valid_611278 = validateParameter(valid_611278, JString, required = false,
                                 default = nil)
  if valid_611278 != nil:
    section.add "X-Amz-Algorithm", valid_611278
  var valid_611279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611279 = validateParameter(valid_611279, JString, required = false,
                                 default = nil)
  if valid_611279 != nil:
    section.add "X-Amz-SignedHeaders", valid_611279
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611280 = formData.getOrDefault("AutoScalingGroupName")
  valid_611280 = validateParameter(valid_611280, JString, required = true,
                                 default = nil)
  if valid_611280 != nil:
    section.add "AutoScalingGroupName", valid_611280
  var valid_611281 = formData.getOrDefault("InstanceIds")
  valid_611281 = validateParameter(valid_611281, JArray, required = false,
                                 default = nil)
  if valid_611281 != nil:
    section.add "InstanceIds", valid_611281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611282: Call_PostAttachInstances_611268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611282.validator(path, query, header, formData, body)
  let scheme = call_611282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611282.url(scheme.get, call_611282.host, call_611282.base,
                         call_611282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611282, url, valid)

proc call*(call_611283: Call_PostAttachInstances_611268;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## postAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611284 = newJObject()
  var formData_611285 = newJObject()
  add(formData_611285, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_611285.add "InstanceIds", InstanceIds
  add(query_611284, "Action", newJString(Action))
  add(query_611284, "Version", newJString(Version))
  result = call_611283.call(nil, query_611284, nil, formData_611285, nil)

var postAttachInstances* = Call_PostAttachInstances_611268(
    name: "postAttachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_PostAttachInstances_611269, base: "/",
    url: url_PostAttachInstances_611270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachInstances_610996 = ref object of OpenApiRestCall_610658
proc url_GetAttachInstances_610998(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachInstances_610997(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611110 = query.getOrDefault("InstanceIds")
  valid_611110 = validateParameter(valid_611110, JArray, required = false,
                                 default = nil)
  if valid_611110 != nil:
    section.add "InstanceIds", valid_611110
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611111 = query.getOrDefault("AutoScalingGroupName")
  valid_611111 = validateParameter(valid_611111, JString, required = true,
                                 default = nil)
  if valid_611111 != nil:
    section.add "AutoScalingGroupName", valid_611111
  var valid_611125 = query.getOrDefault("Action")
  valid_611125 = validateParameter(valid_611125, JString, required = true,
                                 default = newJString("AttachInstances"))
  if valid_611125 != nil:
    section.add "Action", valid_611125
  var valid_611126 = query.getOrDefault("Version")
  valid_611126 = validateParameter(valid_611126, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611126 != nil:
    section.add "Version", valid_611126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611127 = header.getOrDefault("X-Amz-Signature")
  valid_611127 = validateParameter(valid_611127, JString, required = false,
                                 default = nil)
  if valid_611127 != nil:
    section.add "X-Amz-Signature", valid_611127
  var valid_611128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611128 = validateParameter(valid_611128, JString, required = false,
                                 default = nil)
  if valid_611128 != nil:
    section.add "X-Amz-Content-Sha256", valid_611128
  var valid_611129 = header.getOrDefault("X-Amz-Date")
  valid_611129 = validateParameter(valid_611129, JString, required = false,
                                 default = nil)
  if valid_611129 != nil:
    section.add "X-Amz-Date", valid_611129
  var valid_611130 = header.getOrDefault("X-Amz-Credential")
  valid_611130 = validateParameter(valid_611130, JString, required = false,
                                 default = nil)
  if valid_611130 != nil:
    section.add "X-Amz-Credential", valid_611130
  var valid_611131 = header.getOrDefault("X-Amz-Security-Token")
  valid_611131 = validateParameter(valid_611131, JString, required = false,
                                 default = nil)
  if valid_611131 != nil:
    section.add "X-Amz-Security-Token", valid_611131
  var valid_611132 = header.getOrDefault("X-Amz-Algorithm")
  valid_611132 = validateParameter(valid_611132, JString, required = false,
                                 default = nil)
  if valid_611132 != nil:
    section.add "X-Amz-Algorithm", valid_611132
  var valid_611133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611133 = validateParameter(valid_611133, JString, required = false,
                                 default = nil)
  if valid_611133 != nil:
    section.add "X-Amz-SignedHeaders", valid_611133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611156: Call_GetAttachInstances_610996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611156.validator(path, query, header, formData, body)
  let scheme = call_611156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611156.url(scheme.get, call_611156.host, call_611156.base,
                         call_611156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611156, url, valid)

proc call*(call_611227: Call_GetAttachInstances_610996;
          AutoScalingGroupName: string; InstanceIds: JsonNode = nil;
          Action: string = "AttachInstances"; Version: string = "2011-01-01"): Recallable =
  ## getAttachInstances
  ## <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 Instances to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611228 = newJObject()
  if InstanceIds != nil:
    query_611228.add "InstanceIds", InstanceIds
  add(query_611228, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611228, "Action", newJString(Action))
  add(query_611228, "Version", newJString(Version))
  result = call_611227.call(nil, query_611228, nil, nil, nil)

var getAttachInstances* = Call_GetAttachInstances_610996(
    name: "getAttachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachInstances",
    validator: validate_GetAttachInstances_610997, base: "/",
    url: url_GetAttachInstances_610998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancerTargetGroups_611303 = ref object of OpenApiRestCall_610658
proc url_PostAttachLoadBalancerTargetGroups_611305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancerTargetGroups_611304(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611306 = query.getOrDefault("Action")
  valid_611306 = validateParameter(valid_611306, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_611306 != nil:
    section.add "Action", valid_611306
  var valid_611307 = query.getOrDefault("Version")
  valid_611307 = validateParameter(valid_611307, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611307 != nil:
    section.add "Version", valid_611307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611308 = header.getOrDefault("X-Amz-Signature")
  valid_611308 = validateParameter(valid_611308, JString, required = false,
                                 default = nil)
  if valid_611308 != nil:
    section.add "X-Amz-Signature", valid_611308
  var valid_611309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611309 = validateParameter(valid_611309, JString, required = false,
                                 default = nil)
  if valid_611309 != nil:
    section.add "X-Amz-Content-Sha256", valid_611309
  var valid_611310 = header.getOrDefault("X-Amz-Date")
  valid_611310 = validateParameter(valid_611310, JString, required = false,
                                 default = nil)
  if valid_611310 != nil:
    section.add "X-Amz-Date", valid_611310
  var valid_611311 = header.getOrDefault("X-Amz-Credential")
  valid_611311 = validateParameter(valid_611311, JString, required = false,
                                 default = nil)
  if valid_611311 != nil:
    section.add "X-Amz-Credential", valid_611311
  var valid_611312 = header.getOrDefault("X-Amz-Security-Token")
  valid_611312 = validateParameter(valid_611312, JString, required = false,
                                 default = nil)
  if valid_611312 != nil:
    section.add "X-Amz-Security-Token", valid_611312
  var valid_611313 = header.getOrDefault("X-Amz-Algorithm")
  valid_611313 = validateParameter(valid_611313, JString, required = false,
                                 default = nil)
  if valid_611313 != nil:
    section.add "X-Amz-Algorithm", valid_611313
  var valid_611314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611314 = validateParameter(valid_611314, JString, required = false,
                                 default = nil)
  if valid_611314 != nil:
    section.add "X-Amz-SignedHeaders", valid_611314
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611315 = formData.getOrDefault("AutoScalingGroupName")
  valid_611315 = validateParameter(valid_611315, JString, required = true,
                                 default = nil)
  if valid_611315 != nil:
    section.add "AutoScalingGroupName", valid_611315
  var valid_611316 = formData.getOrDefault("TargetGroupARNs")
  valid_611316 = validateParameter(valid_611316, JArray, required = true, default = nil)
  if valid_611316 != nil:
    section.add "TargetGroupARNs", valid_611316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611317: Call_PostAttachLoadBalancerTargetGroups_611303;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611317.validator(path, query, header, formData, body)
  let scheme = call_611317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611317.url(scheme.get, call_611317.host, call_611317.base,
                         call_611317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611317, url, valid)

proc call*(call_611318: Call_PostAttachLoadBalancerTargetGroups_611303;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611319 = newJObject()
  var formData_611320 = newJObject()
  add(formData_611320, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_611320.add "TargetGroupARNs", TargetGroupARNs
  add(query_611319, "Action", newJString(Action))
  add(query_611319, "Version", newJString(Version))
  result = call_611318.call(nil, query_611319, nil, formData_611320, nil)

var postAttachLoadBalancerTargetGroups* = Call_PostAttachLoadBalancerTargetGroups_611303(
    name: "postAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_PostAttachLoadBalancerTargetGroups_611304, base: "/",
    url: url_PostAttachLoadBalancerTargetGroups_611305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancerTargetGroups_611286 = ref object of OpenApiRestCall_610658
proc url_GetAttachLoadBalancerTargetGroups_611288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancerTargetGroups_611287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611289 = query.getOrDefault("AutoScalingGroupName")
  valid_611289 = validateParameter(valid_611289, JString, required = true,
                                 default = nil)
  if valid_611289 != nil:
    section.add "AutoScalingGroupName", valid_611289
  var valid_611290 = query.getOrDefault("TargetGroupARNs")
  valid_611290 = validateParameter(valid_611290, JArray, required = true, default = nil)
  if valid_611290 != nil:
    section.add "TargetGroupARNs", valid_611290
  var valid_611291 = query.getOrDefault("Action")
  valid_611291 = validateParameter(valid_611291, JString, required = true, default = newJString(
      "AttachLoadBalancerTargetGroups"))
  if valid_611291 != nil:
    section.add "Action", valid_611291
  var valid_611292 = query.getOrDefault("Version")
  valid_611292 = validateParameter(valid_611292, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611292 != nil:
    section.add "Version", valid_611292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611293 = header.getOrDefault("X-Amz-Signature")
  valid_611293 = validateParameter(valid_611293, JString, required = false,
                                 default = nil)
  if valid_611293 != nil:
    section.add "X-Amz-Signature", valid_611293
  var valid_611294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611294 = validateParameter(valid_611294, JString, required = false,
                                 default = nil)
  if valid_611294 != nil:
    section.add "X-Amz-Content-Sha256", valid_611294
  var valid_611295 = header.getOrDefault("X-Amz-Date")
  valid_611295 = validateParameter(valid_611295, JString, required = false,
                                 default = nil)
  if valid_611295 != nil:
    section.add "X-Amz-Date", valid_611295
  var valid_611296 = header.getOrDefault("X-Amz-Credential")
  valid_611296 = validateParameter(valid_611296, JString, required = false,
                                 default = nil)
  if valid_611296 != nil:
    section.add "X-Amz-Credential", valid_611296
  var valid_611297 = header.getOrDefault("X-Amz-Security-Token")
  valid_611297 = validateParameter(valid_611297, JString, required = false,
                                 default = nil)
  if valid_611297 != nil:
    section.add "X-Amz-Security-Token", valid_611297
  var valid_611298 = header.getOrDefault("X-Amz-Algorithm")
  valid_611298 = validateParameter(valid_611298, JString, required = false,
                                 default = nil)
  if valid_611298 != nil:
    section.add "X-Amz-Algorithm", valid_611298
  var valid_611299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611299 = validateParameter(valid_611299, JString, required = false,
                                 default = nil)
  if valid_611299 != nil:
    section.add "X-Amz-SignedHeaders", valid_611299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611300: Call_GetAttachLoadBalancerTargetGroups_611286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611300.validator(path, query, header, formData, body)
  let scheme = call_611300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611300.url(scheme.get, call_611300.host, call_611300.base,
                         call_611300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611300, url, valid)

proc call*(call_611301: Call_GetAttachLoadBalancerTargetGroups_611286;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "AttachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancerTargetGroups
  ## <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>To describe the target groups for an Auto Scaling group, use <a>DescribeLoadBalancerTargetGroups</a>. To detach the target group from the Auto Scaling group, use <a>DetachLoadBalancerTargetGroups</a>.</p> <p>With Application Load Balancers and Network Load Balancers, instances are registered as targets with a target group. With Classic Load Balancers, instances are registered with the load balancer. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611302 = newJObject()
  add(query_611302, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    query_611302.add "TargetGroupARNs", TargetGroupARNs
  add(query_611302, "Action", newJString(Action))
  add(query_611302, "Version", newJString(Version))
  result = call_611301.call(nil, query_611302, nil, nil, nil)

var getAttachLoadBalancerTargetGroups* = Call_GetAttachLoadBalancerTargetGroups_611286(
    name: "getAttachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=AttachLoadBalancerTargetGroups",
    validator: validate_GetAttachLoadBalancerTargetGroups_611287, base: "/",
    url: url_GetAttachLoadBalancerTargetGroups_611288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachLoadBalancers_611338 = ref object of OpenApiRestCall_610658
proc url_PostAttachLoadBalancers_611340(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachLoadBalancers_611339(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611341 = query.getOrDefault("Action")
  valid_611341 = validateParameter(valid_611341, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_611341 != nil:
    section.add "Action", valid_611341
  var valid_611342 = query.getOrDefault("Version")
  valid_611342 = validateParameter(valid_611342, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611342 != nil:
    section.add "Version", valid_611342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611343 = header.getOrDefault("X-Amz-Signature")
  valid_611343 = validateParameter(valid_611343, JString, required = false,
                                 default = nil)
  if valid_611343 != nil:
    section.add "X-Amz-Signature", valid_611343
  var valid_611344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611344 = validateParameter(valid_611344, JString, required = false,
                                 default = nil)
  if valid_611344 != nil:
    section.add "X-Amz-Content-Sha256", valid_611344
  var valid_611345 = header.getOrDefault("X-Amz-Date")
  valid_611345 = validateParameter(valid_611345, JString, required = false,
                                 default = nil)
  if valid_611345 != nil:
    section.add "X-Amz-Date", valid_611345
  var valid_611346 = header.getOrDefault("X-Amz-Credential")
  valid_611346 = validateParameter(valid_611346, JString, required = false,
                                 default = nil)
  if valid_611346 != nil:
    section.add "X-Amz-Credential", valid_611346
  var valid_611347 = header.getOrDefault("X-Amz-Security-Token")
  valid_611347 = validateParameter(valid_611347, JString, required = false,
                                 default = nil)
  if valid_611347 != nil:
    section.add "X-Amz-Security-Token", valid_611347
  var valid_611348 = header.getOrDefault("X-Amz-Algorithm")
  valid_611348 = validateParameter(valid_611348, JString, required = false,
                                 default = nil)
  if valid_611348 != nil:
    section.add "X-Amz-Algorithm", valid_611348
  var valid_611349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611349 = validateParameter(valid_611349, JString, required = false,
                                 default = nil)
  if valid_611349 != nil:
    section.add "X-Amz-SignedHeaders", valid_611349
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611350 = formData.getOrDefault("AutoScalingGroupName")
  valid_611350 = validateParameter(valid_611350, JString, required = true,
                                 default = nil)
  if valid_611350 != nil:
    section.add "AutoScalingGroupName", valid_611350
  var valid_611351 = formData.getOrDefault("LoadBalancerNames")
  valid_611351 = validateParameter(valid_611351, JArray, required = true, default = nil)
  if valid_611351 != nil:
    section.add "LoadBalancerNames", valid_611351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611352: Call_PostAttachLoadBalancers_611338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611352.validator(path, query, header, formData, body)
  let scheme = call_611352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611352.url(scheme.get, call_611352.host, call_611352.base,
                         call_611352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611352, url, valid)

proc call*(call_611353: Call_PostAttachLoadBalancers_611338;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611354 = newJObject()
  var formData_611355 = newJObject()
  add(formData_611355, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LoadBalancerNames != nil:
    formData_611355.add "LoadBalancerNames", LoadBalancerNames
  add(query_611354, "Action", newJString(Action))
  add(query_611354, "Version", newJString(Version))
  result = call_611353.call(nil, query_611354, nil, formData_611355, nil)

var postAttachLoadBalancers* = Call_PostAttachLoadBalancers_611338(
    name: "postAttachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_PostAttachLoadBalancers_611339, base: "/",
    url: url_PostAttachLoadBalancers_611340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachLoadBalancers_611321 = ref object of OpenApiRestCall_610658
proc url_GetAttachLoadBalancers_611323(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachLoadBalancers_611322(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611324 = query.getOrDefault("AutoScalingGroupName")
  valid_611324 = validateParameter(valid_611324, JString, required = true,
                                 default = nil)
  if valid_611324 != nil:
    section.add "AutoScalingGroupName", valid_611324
  var valid_611325 = query.getOrDefault("Action")
  valid_611325 = validateParameter(valid_611325, JString, required = true,
                                 default = newJString("AttachLoadBalancers"))
  if valid_611325 != nil:
    section.add "Action", valid_611325
  var valid_611326 = query.getOrDefault("Version")
  valid_611326 = validateParameter(valid_611326, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611326 != nil:
    section.add "Version", valid_611326
  var valid_611327 = query.getOrDefault("LoadBalancerNames")
  valid_611327 = validateParameter(valid_611327, JArray, required = true, default = nil)
  if valid_611327 != nil:
    section.add "LoadBalancerNames", valid_611327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611328 = header.getOrDefault("X-Amz-Signature")
  valid_611328 = validateParameter(valid_611328, JString, required = false,
                                 default = nil)
  if valid_611328 != nil:
    section.add "X-Amz-Signature", valid_611328
  var valid_611329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611329 = validateParameter(valid_611329, JString, required = false,
                                 default = nil)
  if valid_611329 != nil:
    section.add "X-Amz-Content-Sha256", valid_611329
  var valid_611330 = header.getOrDefault("X-Amz-Date")
  valid_611330 = validateParameter(valid_611330, JString, required = false,
                                 default = nil)
  if valid_611330 != nil:
    section.add "X-Amz-Date", valid_611330
  var valid_611331 = header.getOrDefault("X-Amz-Credential")
  valid_611331 = validateParameter(valid_611331, JString, required = false,
                                 default = nil)
  if valid_611331 != nil:
    section.add "X-Amz-Credential", valid_611331
  var valid_611332 = header.getOrDefault("X-Amz-Security-Token")
  valid_611332 = validateParameter(valid_611332, JString, required = false,
                                 default = nil)
  if valid_611332 != nil:
    section.add "X-Amz-Security-Token", valid_611332
  var valid_611333 = header.getOrDefault("X-Amz-Algorithm")
  valid_611333 = validateParameter(valid_611333, JString, required = false,
                                 default = nil)
  if valid_611333 != nil:
    section.add "X-Amz-Algorithm", valid_611333
  var valid_611334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611334 = validateParameter(valid_611334, JString, required = false,
                                 default = nil)
  if valid_611334 != nil:
    section.add "X-Amz-SignedHeaders", valid_611334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611335: Call_GetAttachLoadBalancers_611321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611335.validator(path, query, header, formData, body)
  let scheme = call_611335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611335.url(scheme.get, call_611335.host, call_611335.base,
                         call_611335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611335, url, valid)

proc call*(call_611336: Call_GetAttachLoadBalancers_611321;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "AttachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getAttachLoadBalancers
  ## <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group.</p> <p>To attach an Application Load Balancer or a Network Load Balancer instead, see <a>AttachLoadBalancerTargetGroups</a>.</p> <p>To describe the load balancers for an Auto Scaling group, use <a>DescribeLoadBalancers</a>. To detach the load balancer from the Auto Scaling group, use <a>DetachLoadBalancers</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-load-balancer-asg.html">Attaching a Load Balancer to Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  var query_611337 = newJObject()
  add(query_611337, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611337, "Action", newJString(Action))
  add(query_611337, "Version", newJString(Version))
  if LoadBalancerNames != nil:
    query_611337.add "LoadBalancerNames", LoadBalancerNames
  result = call_611336.call(nil, query_611337, nil, nil, nil)

var getAttachLoadBalancers* = Call_GetAttachLoadBalancers_611321(
    name: "getAttachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=AttachLoadBalancers",
    validator: validate_GetAttachLoadBalancers_611322, base: "/",
    url: url_GetAttachLoadBalancers_611323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteScheduledAction_611373 = ref object of OpenApiRestCall_610658
proc url_PostBatchDeleteScheduledAction_611375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchDeleteScheduledAction_611374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611376 = query.getOrDefault("Action")
  valid_611376 = validateParameter(valid_611376, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_611376 != nil:
    section.add "Action", valid_611376
  var valid_611377 = query.getOrDefault("Version")
  valid_611377 = validateParameter(valid_611377, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611377 != nil:
    section.add "Version", valid_611377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611378 = header.getOrDefault("X-Amz-Signature")
  valid_611378 = validateParameter(valid_611378, JString, required = false,
                                 default = nil)
  if valid_611378 != nil:
    section.add "X-Amz-Signature", valid_611378
  var valid_611379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611379 = validateParameter(valid_611379, JString, required = false,
                                 default = nil)
  if valid_611379 != nil:
    section.add "X-Amz-Content-Sha256", valid_611379
  var valid_611380 = header.getOrDefault("X-Amz-Date")
  valid_611380 = validateParameter(valid_611380, JString, required = false,
                                 default = nil)
  if valid_611380 != nil:
    section.add "X-Amz-Date", valid_611380
  var valid_611381 = header.getOrDefault("X-Amz-Credential")
  valid_611381 = validateParameter(valid_611381, JString, required = false,
                                 default = nil)
  if valid_611381 != nil:
    section.add "X-Amz-Credential", valid_611381
  var valid_611382 = header.getOrDefault("X-Amz-Security-Token")
  valid_611382 = validateParameter(valid_611382, JString, required = false,
                                 default = nil)
  if valid_611382 != nil:
    section.add "X-Amz-Security-Token", valid_611382
  var valid_611383 = header.getOrDefault("X-Amz-Algorithm")
  valid_611383 = validateParameter(valid_611383, JString, required = false,
                                 default = nil)
  if valid_611383 != nil:
    section.add "X-Amz-Algorithm", valid_611383
  var valid_611384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611384 = validateParameter(valid_611384, JString, required = false,
                                 default = nil)
  if valid_611384 != nil:
    section.add "X-Amz-SignedHeaders", valid_611384
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611385 = formData.getOrDefault("AutoScalingGroupName")
  valid_611385 = validateParameter(valid_611385, JString, required = true,
                                 default = nil)
  if valid_611385 != nil:
    section.add "AutoScalingGroupName", valid_611385
  var valid_611386 = formData.getOrDefault("ScheduledActionNames")
  valid_611386 = validateParameter(valid_611386, JArray, required = true, default = nil)
  if valid_611386 != nil:
    section.add "ScheduledActionNames", valid_611386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611387: Call_PostBatchDeleteScheduledAction_611373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_611387.validator(path, query, header, formData, body)
  let scheme = call_611387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611387.url(scheme.get, call_611387.host, call_611387.base,
                         call_611387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611387, url, valid)

proc call*(call_611388: Call_PostBatchDeleteScheduledAction_611373;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  var query_611389 = newJObject()
  var formData_611390 = newJObject()
  add(formData_611390, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611389, "Action", newJString(Action))
  add(query_611389, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_611390.add "ScheduledActionNames", ScheduledActionNames
  result = call_611388.call(nil, query_611389, nil, formData_611390, nil)

var postBatchDeleteScheduledAction* = Call_PostBatchDeleteScheduledAction_611373(
    name: "postBatchDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_PostBatchDeleteScheduledAction_611374, base: "/",
    url: url_PostBatchDeleteScheduledAction_611375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteScheduledAction_611356 = ref object of OpenApiRestCall_610658
proc url_GetBatchDeleteScheduledAction_611358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchDeleteScheduledAction_611357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611359 = query.getOrDefault("AutoScalingGroupName")
  valid_611359 = validateParameter(valid_611359, JString, required = true,
                                 default = nil)
  if valid_611359 != nil:
    section.add "AutoScalingGroupName", valid_611359
  var valid_611360 = query.getOrDefault("Action")
  valid_611360 = validateParameter(valid_611360, JString, required = true, default = newJString(
      "BatchDeleteScheduledAction"))
  if valid_611360 != nil:
    section.add "Action", valid_611360
  var valid_611361 = query.getOrDefault("ScheduledActionNames")
  valid_611361 = validateParameter(valid_611361, JArray, required = true, default = nil)
  if valid_611361 != nil:
    section.add "ScheduledActionNames", valid_611361
  var valid_611362 = query.getOrDefault("Version")
  valid_611362 = validateParameter(valid_611362, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611362 != nil:
    section.add "Version", valid_611362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611363 = header.getOrDefault("X-Amz-Signature")
  valid_611363 = validateParameter(valid_611363, JString, required = false,
                                 default = nil)
  if valid_611363 != nil:
    section.add "X-Amz-Signature", valid_611363
  var valid_611364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611364 = validateParameter(valid_611364, JString, required = false,
                                 default = nil)
  if valid_611364 != nil:
    section.add "X-Amz-Content-Sha256", valid_611364
  var valid_611365 = header.getOrDefault("X-Amz-Date")
  valid_611365 = validateParameter(valid_611365, JString, required = false,
                                 default = nil)
  if valid_611365 != nil:
    section.add "X-Amz-Date", valid_611365
  var valid_611366 = header.getOrDefault("X-Amz-Credential")
  valid_611366 = validateParameter(valid_611366, JString, required = false,
                                 default = nil)
  if valid_611366 != nil:
    section.add "X-Amz-Credential", valid_611366
  var valid_611367 = header.getOrDefault("X-Amz-Security-Token")
  valid_611367 = validateParameter(valid_611367, JString, required = false,
                                 default = nil)
  if valid_611367 != nil:
    section.add "X-Amz-Security-Token", valid_611367
  var valid_611368 = header.getOrDefault("X-Amz-Algorithm")
  valid_611368 = validateParameter(valid_611368, JString, required = false,
                                 default = nil)
  if valid_611368 != nil:
    section.add "X-Amz-Algorithm", valid_611368
  var valid_611369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611369 = validateParameter(valid_611369, JString, required = false,
                                 default = nil)
  if valid_611369 != nil:
    section.add "X-Amz-SignedHeaders", valid_611369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611370: Call_GetBatchDeleteScheduledAction_611356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ## 
  let valid = call_611370.validator(path, query, header, formData, body)
  let scheme = call_611370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611370.url(scheme.get, call_611370.host, call_611370.base,
                         call_611370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611370, url, valid)

proc call*(call_611371: Call_GetBatchDeleteScheduledAction_611356;
          AutoScalingGroupName: string; ScheduledActionNames: JsonNode;
          Action: string = "BatchDeleteScheduledAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchDeleteScheduledAction
  ## Deletes one or more scheduled actions for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray (required)
  ##                       : The names of the scheduled actions to delete. The maximum number allowed is 50. 
  ##   Version: string (required)
  var query_611372 = newJObject()
  add(query_611372, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611372, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_611372.add "ScheduledActionNames", ScheduledActionNames
  add(query_611372, "Version", newJString(Version))
  result = call_611371.call(nil, query_611372, nil, nil, nil)

var getBatchDeleteScheduledAction* = Call_GetBatchDeleteScheduledAction_611356(
    name: "getBatchDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchDeleteScheduledAction",
    validator: validate_GetBatchDeleteScheduledAction_611357, base: "/",
    url: url_GetBatchDeleteScheduledAction_611358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchPutScheduledUpdateGroupAction_611408 = ref object of OpenApiRestCall_610658
proc url_PostBatchPutScheduledUpdateGroupAction_611410(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchPutScheduledUpdateGroupAction_611409(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611411 = query.getOrDefault("Action")
  valid_611411 = validateParameter(valid_611411, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_611411 != nil:
    section.add "Action", valid_611411
  var valid_611412 = query.getOrDefault("Version")
  valid_611412 = validateParameter(valid_611412, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611412 != nil:
    section.add "Version", valid_611412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611413 = header.getOrDefault("X-Amz-Signature")
  valid_611413 = validateParameter(valid_611413, JString, required = false,
                                 default = nil)
  if valid_611413 != nil:
    section.add "X-Amz-Signature", valid_611413
  var valid_611414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611414 = validateParameter(valid_611414, JString, required = false,
                                 default = nil)
  if valid_611414 != nil:
    section.add "X-Amz-Content-Sha256", valid_611414
  var valid_611415 = header.getOrDefault("X-Amz-Date")
  valid_611415 = validateParameter(valid_611415, JString, required = false,
                                 default = nil)
  if valid_611415 != nil:
    section.add "X-Amz-Date", valid_611415
  var valid_611416 = header.getOrDefault("X-Amz-Credential")
  valid_611416 = validateParameter(valid_611416, JString, required = false,
                                 default = nil)
  if valid_611416 != nil:
    section.add "X-Amz-Credential", valid_611416
  var valid_611417 = header.getOrDefault("X-Amz-Security-Token")
  valid_611417 = validateParameter(valid_611417, JString, required = false,
                                 default = nil)
  if valid_611417 != nil:
    section.add "X-Amz-Security-Token", valid_611417
  var valid_611418 = header.getOrDefault("X-Amz-Algorithm")
  valid_611418 = validateParameter(valid_611418, JString, required = false,
                                 default = nil)
  if valid_611418 != nil:
    section.add "X-Amz-Algorithm", valid_611418
  var valid_611419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611419 = validateParameter(valid_611419, JString, required = false,
                                 default = nil)
  if valid_611419 != nil:
    section.add "X-Amz-SignedHeaders", valid_611419
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611420 = formData.getOrDefault("AutoScalingGroupName")
  valid_611420 = validateParameter(valid_611420, JString, required = true,
                                 default = nil)
  if valid_611420 != nil:
    section.add "AutoScalingGroupName", valid_611420
  var valid_611421 = formData.getOrDefault("ScheduledUpdateGroupActions")
  valid_611421 = validateParameter(valid_611421, JArray, required = true, default = nil)
  if valid_611421 != nil:
    section.add "ScheduledUpdateGroupActions", valid_611421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611422: Call_PostBatchPutScheduledUpdateGroupAction_611408;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_611422.validator(path, query, header, formData, body)
  let scheme = call_611422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611422.url(scheme.get, call_611422.host, call_611422.base,
                         call_611422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611422, url, valid)

proc call*(call_611423: Call_PostBatchPutScheduledUpdateGroupAction_611408;
          AutoScalingGroupName: string; ScheduledUpdateGroupActions: JsonNode;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## postBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   Version: string (required)
  var query_611424 = newJObject()
  var formData_611425 = newJObject()
  add(formData_611425, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611424, "Action", newJString(Action))
  if ScheduledUpdateGroupActions != nil:
    formData_611425.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_611424, "Version", newJString(Version))
  result = call_611423.call(nil, query_611424, nil, formData_611425, nil)

var postBatchPutScheduledUpdateGroupAction* = Call_PostBatchPutScheduledUpdateGroupAction_611408(
    name: "postBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_PostBatchPutScheduledUpdateGroupAction_611409, base: "/",
    url: url_PostBatchPutScheduledUpdateGroupAction_611410,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchPutScheduledUpdateGroupAction_611391 = ref object of OpenApiRestCall_610658
proc url_GetBatchPutScheduledUpdateGroupAction_611393(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchPutScheduledUpdateGroupAction_611392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledUpdateGroupActions` field"
  var valid_611394 = query.getOrDefault("ScheduledUpdateGroupActions")
  valid_611394 = validateParameter(valid_611394, JArray, required = true, default = nil)
  if valid_611394 != nil:
    section.add "ScheduledUpdateGroupActions", valid_611394
  var valid_611395 = query.getOrDefault("AutoScalingGroupName")
  valid_611395 = validateParameter(valid_611395, JString, required = true,
                                 default = nil)
  if valid_611395 != nil:
    section.add "AutoScalingGroupName", valid_611395
  var valid_611396 = query.getOrDefault("Action")
  valid_611396 = validateParameter(valid_611396, JString, required = true, default = newJString(
      "BatchPutScheduledUpdateGroupAction"))
  if valid_611396 != nil:
    section.add "Action", valid_611396
  var valid_611397 = query.getOrDefault("Version")
  valid_611397 = validateParameter(valid_611397, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611397 != nil:
    section.add "Version", valid_611397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611398 = header.getOrDefault("X-Amz-Signature")
  valid_611398 = validateParameter(valid_611398, JString, required = false,
                                 default = nil)
  if valid_611398 != nil:
    section.add "X-Amz-Signature", valid_611398
  var valid_611399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611399 = validateParameter(valid_611399, JString, required = false,
                                 default = nil)
  if valid_611399 != nil:
    section.add "X-Amz-Content-Sha256", valid_611399
  var valid_611400 = header.getOrDefault("X-Amz-Date")
  valid_611400 = validateParameter(valid_611400, JString, required = false,
                                 default = nil)
  if valid_611400 != nil:
    section.add "X-Amz-Date", valid_611400
  var valid_611401 = header.getOrDefault("X-Amz-Credential")
  valid_611401 = validateParameter(valid_611401, JString, required = false,
                                 default = nil)
  if valid_611401 != nil:
    section.add "X-Amz-Credential", valid_611401
  var valid_611402 = header.getOrDefault("X-Amz-Security-Token")
  valid_611402 = validateParameter(valid_611402, JString, required = false,
                                 default = nil)
  if valid_611402 != nil:
    section.add "X-Amz-Security-Token", valid_611402
  var valid_611403 = header.getOrDefault("X-Amz-Algorithm")
  valid_611403 = validateParameter(valid_611403, JString, required = false,
                                 default = nil)
  if valid_611403 != nil:
    section.add "X-Amz-Algorithm", valid_611403
  var valid_611404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611404 = validateParameter(valid_611404, JString, required = false,
                                 default = nil)
  if valid_611404 != nil:
    section.add "X-Amz-SignedHeaders", valid_611404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611405: Call_GetBatchPutScheduledUpdateGroupAction_611391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ## 
  let valid = call_611405.validator(path, query, header, formData, body)
  let scheme = call_611405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611405.url(scheme.get, call_611405.host, call_611405.base,
                         call_611405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611405, url, valid)

proc call*(call_611406: Call_GetBatchPutScheduledUpdateGroupAction_611391;
          ScheduledUpdateGroupActions: JsonNode; AutoScalingGroupName: string;
          Action: string = "BatchPutScheduledUpdateGroupAction";
          Version: string = "2011-01-01"): Recallable =
  ## getBatchPutScheduledUpdateGroupAction
  ## Creates or updates one or more scheduled scaling actions for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.
  ##   ScheduledUpdateGroupActions: JArray (required)
  ##                              : One or more scheduled actions. The maximum number allowed is 50.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611407 = newJObject()
  if ScheduledUpdateGroupActions != nil:
    query_611407.add "ScheduledUpdateGroupActions", ScheduledUpdateGroupActions
  add(query_611407, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611407, "Action", newJString(Action))
  add(query_611407, "Version", newJString(Version))
  result = call_611406.call(nil, query_611407, nil, nil, nil)

var getBatchPutScheduledUpdateGroupAction* = Call_GetBatchPutScheduledUpdateGroupAction_611391(
    name: "getBatchPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=BatchPutScheduledUpdateGroupAction",
    validator: validate_GetBatchPutScheduledUpdateGroupAction_611392, base: "/",
    url: url_GetBatchPutScheduledUpdateGroupAction_611393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteLifecycleAction_611446 = ref object of OpenApiRestCall_610658
proc url_PostCompleteLifecycleAction_611448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteLifecycleAction_611447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611449 = query.getOrDefault("Action")
  valid_611449 = validateParameter(valid_611449, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_611449 != nil:
    section.add "Action", valid_611449
  var valid_611450 = query.getOrDefault("Version")
  valid_611450 = validateParameter(valid_611450, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611450 != nil:
    section.add "Version", valid_611450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611451 = header.getOrDefault("X-Amz-Signature")
  valid_611451 = validateParameter(valid_611451, JString, required = false,
                                 default = nil)
  if valid_611451 != nil:
    section.add "X-Amz-Signature", valid_611451
  var valid_611452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611452 = validateParameter(valid_611452, JString, required = false,
                                 default = nil)
  if valid_611452 != nil:
    section.add "X-Amz-Content-Sha256", valid_611452
  var valid_611453 = header.getOrDefault("X-Amz-Date")
  valid_611453 = validateParameter(valid_611453, JString, required = false,
                                 default = nil)
  if valid_611453 != nil:
    section.add "X-Amz-Date", valid_611453
  var valid_611454 = header.getOrDefault("X-Amz-Credential")
  valid_611454 = validateParameter(valid_611454, JString, required = false,
                                 default = nil)
  if valid_611454 != nil:
    section.add "X-Amz-Credential", valid_611454
  var valid_611455 = header.getOrDefault("X-Amz-Security-Token")
  valid_611455 = validateParameter(valid_611455, JString, required = false,
                                 default = nil)
  if valid_611455 != nil:
    section.add "X-Amz-Security-Token", valid_611455
  var valid_611456 = header.getOrDefault("X-Amz-Algorithm")
  valid_611456 = validateParameter(valid_611456, JString, required = false,
                                 default = nil)
  if valid_611456 != nil:
    section.add "X-Amz-Algorithm", valid_611456
  var valid_611457 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611457 = validateParameter(valid_611457, JString, required = false,
                                 default = nil)
  if valid_611457 != nil:
    section.add "X-Amz-SignedHeaders", valid_611457
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611458 = formData.getOrDefault("AutoScalingGroupName")
  valid_611458 = validateParameter(valid_611458, JString, required = true,
                                 default = nil)
  if valid_611458 != nil:
    section.add "AutoScalingGroupName", valid_611458
  var valid_611459 = formData.getOrDefault("LifecycleHookName")
  valid_611459 = validateParameter(valid_611459, JString, required = true,
                                 default = nil)
  if valid_611459 != nil:
    section.add "LifecycleHookName", valid_611459
  var valid_611460 = formData.getOrDefault("LifecycleActionToken")
  valid_611460 = validateParameter(valid_611460, JString, required = false,
                                 default = nil)
  if valid_611460 != nil:
    section.add "LifecycleActionToken", valid_611460
  var valid_611461 = formData.getOrDefault("InstanceId")
  valid_611461 = validateParameter(valid_611461, JString, required = false,
                                 default = nil)
  if valid_611461 != nil:
    section.add "InstanceId", valid_611461
  var valid_611462 = formData.getOrDefault("LifecycleActionResult")
  valid_611462 = validateParameter(valid_611462, JString, required = true,
                                 default = nil)
  if valid_611462 != nil:
    section.add "LifecycleActionResult", valid_611462
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611463: Call_PostCompleteLifecycleAction_611446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611463.validator(path, query, header, formData, body)
  let scheme = call_611463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611463.url(scheme.get, call_611463.host, call_611463.base,
                         call_611463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611463, url, valid)

proc call*(call_611464: Call_PostCompleteLifecycleAction_611446;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionResult: string; LifecycleActionToken: string = "";
          InstanceId: string = ""; Action: string = "CompleteLifecycleAction";
          Version: string = "2011-01-01"): Recallable =
  ## postCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   Version: string (required)
  var query_611465 = newJObject()
  var formData_611466 = newJObject()
  add(formData_611466, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_611466, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_611466, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(formData_611466, "InstanceId", newJString(InstanceId))
  add(query_611465, "Action", newJString(Action))
  add(formData_611466, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_611465, "Version", newJString(Version))
  result = call_611464.call(nil, query_611465, nil, formData_611466, nil)

var postCompleteLifecycleAction* = Call_PostCompleteLifecycleAction_611446(
    name: "postCompleteLifecycleAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_PostCompleteLifecycleAction_611447, base: "/",
    url: url_PostCompleteLifecycleAction_611448,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteLifecycleAction_611426 = ref object of OpenApiRestCall_610658
proc url_GetCompleteLifecycleAction_611428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteLifecycleAction_611427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleActionResult: JString (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LifecycleActionResult` field"
  var valid_611429 = query.getOrDefault("LifecycleActionResult")
  valid_611429 = validateParameter(valid_611429, JString, required = true,
                                 default = nil)
  if valid_611429 != nil:
    section.add "LifecycleActionResult", valid_611429
  var valid_611430 = query.getOrDefault("InstanceId")
  valid_611430 = validateParameter(valid_611430, JString, required = false,
                                 default = nil)
  if valid_611430 != nil:
    section.add "InstanceId", valid_611430
  var valid_611431 = query.getOrDefault("AutoScalingGroupName")
  valid_611431 = validateParameter(valid_611431, JString, required = true,
                                 default = nil)
  if valid_611431 != nil:
    section.add "AutoScalingGroupName", valid_611431
  var valid_611432 = query.getOrDefault("LifecycleHookName")
  valid_611432 = validateParameter(valid_611432, JString, required = true,
                                 default = nil)
  if valid_611432 != nil:
    section.add "LifecycleHookName", valid_611432
  var valid_611433 = query.getOrDefault("Action")
  valid_611433 = validateParameter(valid_611433, JString, required = true, default = newJString(
      "CompleteLifecycleAction"))
  if valid_611433 != nil:
    section.add "Action", valid_611433
  var valid_611434 = query.getOrDefault("LifecycleActionToken")
  valid_611434 = validateParameter(valid_611434, JString, required = false,
                                 default = nil)
  if valid_611434 != nil:
    section.add "LifecycleActionToken", valid_611434
  var valid_611435 = query.getOrDefault("Version")
  valid_611435 = validateParameter(valid_611435, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611435 != nil:
    section.add "Version", valid_611435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611436 = header.getOrDefault("X-Amz-Signature")
  valid_611436 = validateParameter(valid_611436, JString, required = false,
                                 default = nil)
  if valid_611436 != nil:
    section.add "X-Amz-Signature", valid_611436
  var valid_611437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611437 = validateParameter(valid_611437, JString, required = false,
                                 default = nil)
  if valid_611437 != nil:
    section.add "X-Amz-Content-Sha256", valid_611437
  var valid_611438 = header.getOrDefault("X-Amz-Date")
  valid_611438 = validateParameter(valid_611438, JString, required = false,
                                 default = nil)
  if valid_611438 != nil:
    section.add "X-Amz-Date", valid_611438
  var valid_611439 = header.getOrDefault("X-Amz-Credential")
  valid_611439 = validateParameter(valid_611439, JString, required = false,
                                 default = nil)
  if valid_611439 != nil:
    section.add "X-Amz-Credential", valid_611439
  var valid_611440 = header.getOrDefault("X-Amz-Security-Token")
  valid_611440 = validateParameter(valid_611440, JString, required = false,
                                 default = nil)
  if valid_611440 != nil:
    section.add "X-Amz-Security-Token", valid_611440
  var valid_611441 = header.getOrDefault("X-Amz-Algorithm")
  valid_611441 = validateParameter(valid_611441, JString, required = false,
                                 default = nil)
  if valid_611441 != nil:
    section.add "X-Amz-Algorithm", valid_611441
  var valid_611442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611442 = validateParameter(valid_611442, JString, required = false,
                                 default = nil)
  if valid_611442 != nil:
    section.add "X-Amz-SignedHeaders", valid_611442
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611443: Call_GetCompleteLifecycleAction_611426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611443.validator(path, query, header, formData, body)
  let scheme = call_611443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611443.url(scheme.get, call_611443.host, call_611443.base,
                         call_611443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611443, url, valid)

proc call*(call_611444: Call_GetCompleteLifecycleAction_611426;
          LifecycleActionResult: string; AutoScalingGroupName: string;
          LifecycleHookName: string; InstanceId: string = "";
          Action: string = "CompleteLifecycleAction";
          LifecycleActionToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getCompleteLifecycleAction
  ## <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, complete the lifecycle action.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LifecycleActionResult: string (required)
  ##                        : The action for the group to take. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   LifecycleActionToken: string
  ##                       : A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
  ##   Version: string (required)
  var query_611445 = newJObject()
  add(query_611445, "LifecycleActionResult", newJString(LifecycleActionResult))
  add(query_611445, "InstanceId", newJString(InstanceId))
  add(query_611445, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611445, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_611445, "Action", newJString(Action))
  add(query_611445, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(query_611445, "Version", newJString(Version))
  result = call_611444.call(nil, query_611445, nil, nil, nil)

var getCompleteLifecycleAction* = Call_GetCompleteLifecycleAction_611426(
    name: "getCompleteLifecycleAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CompleteLifecycleAction",
    validator: validate_GetCompleteLifecycleAction_611427, base: "/",
    url: url_GetCompleteLifecycleAction_611428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAutoScalingGroup_611507 = ref object of OpenApiRestCall_610658
proc url_PostCreateAutoScalingGroup_611509(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAutoScalingGroup_611508(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611510 = query.getOrDefault("Action")
  valid_611510 = validateParameter(valid_611510, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_611510 != nil:
    section.add "Action", valid_611510
  var valid_611511 = query.getOrDefault("Version")
  valid_611511 = validateParameter(valid_611511, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611511 != nil:
    section.add "Version", valid_611511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611512 = header.getOrDefault("X-Amz-Signature")
  valid_611512 = validateParameter(valid_611512, JString, required = false,
                                 default = nil)
  if valid_611512 != nil:
    section.add "X-Amz-Signature", valid_611512
  var valid_611513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611513 = validateParameter(valid_611513, JString, required = false,
                                 default = nil)
  if valid_611513 != nil:
    section.add "X-Amz-Content-Sha256", valid_611513
  var valid_611514 = header.getOrDefault("X-Amz-Date")
  valid_611514 = validateParameter(valid_611514, JString, required = false,
                                 default = nil)
  if valid_611514 != nil:
    section.add "X-Amz-Date", valid_611514
  var valid_611515 = header.getOrDefault("X-Amz-Credential")
  valid_611515 = validateParameter(valid_611515, JString, required = false,
                                 default = nil)
  if valid_611515 != nil:
    section.add "X-Amz-Credential", valid_611515
  var valid_611516 = header.getOrDefault("X-Amz-Security-Token")
  valid_611516 = validateParameter(valid_611516, JString, required = false,
                                 default = nil)
  if valid_611516 != nil:
    section.add "X-Amz-Security-Token", valid_611516
  var valid_611517 = header.getOrDefault("X-Amz-Algorithm")
  valid_611517 = validateParameter(valid_611517, JString, required = false,
                                 default = nil)
  if valid_611517 != nil:
    section.add "X-Amz-Algorithm", valid_611517
  var valid_611518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611518 = validateParameter(valid_611518, JString, required = false,
                                 default = nil)
  if valid_611518 != nil:
    section.add "X-Amz-SignedHeaders", valid_611518
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611519 = formData.getOrDefault("AutoScalingGroupName")
  valid_611519 = validateParameter(valid_611519, JString, required = true,
                                 default = nil)
  if valid_611519 != nil:
    section.add "AutoScalingGroupName", valid_611519
  var valid_611520 = formData.getOrDefault("MinSize")
  valid_611520 = validateParameter(valid_611520, JInt, required = true, default = nil)
  if valid_611520 != nil:
    section.add "MinSize", valid_611520
  var valid_611521 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_611521 = validateParameter(valid_611521, JString, required = false,
                                 default = nil)
  if valid_611521 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_611521
  var valid_611522 = formData.getOrDefault("DesiredCapacity")
  valid_611522 = validateParameter(valid_611522, JInt, required = false, default = nil)
  if valid_611522 != nil:
    section.add "DesiredCapacity", valid_611522
  var valid_611523 = formData.getOrDefault("DefaultCooldown")
  valid_611523 = validateParameter(valid_611523, JInt, required = false, default = nil)
  if valid_611523 != nil:
    section.add "DefaultCooldown", valid_611523
  var valid_611524 = formData.getOrDefault("LoadBalancerNames")
  valid_611524 = validateParameter(valid_611524, JArray, required = false,
                                 default = nil)
  if valid_611524 != nil:
    section.add "LoadBalancerNames", valid_611524
  var valid_611525 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_611525 = validateParameter(valid_611525, JBool, required = false, default = nil)
  if valid_611525 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_611525
  var valid_611526 = formData.getOrDefault("MaxInstanceLifetime")
  valid_611526 = validateParameter(valid_611526, JInt, required = false, default = nil)
  if valid_611526 != nil:
    section.add "MaxInstanceLifetime", valid_611526
  var valid_611527 = formData.getOrDefault("TargetGroupARNs")
  valid_611527 = validateParameter(valid_611527, JArray, required = false,
                                 default = nil)
  if valid_611527 != nil:
    section.add "TargetGroupARNs", valid_611527
  var valid_611528 = formData.getOrDefault("TerminationPolicies")
  valid_611528 = validateParameter(valid_611528, JArray, required = false,
                                 default = nil)
  if valid_611528 != nil:
    section.add "TerminationPolicies", valid_611528
  var valid_611529 = formData.getOrDefault("AvailabilityZones")
  valid_611529 = validateParameter(valid_611529, JArray, required = false,
                                 default = nil)
  if valid_611529 != nil:
    section.add "AvailabilityZones", valid_611529
  var valid_611530 = formData.getOrDefault("LaunchTemplate.Version")
  valid_611530 = validateParameter(valid_611530, JString, required = false,
                                 default = nil)
  if valid_611530 != nil:
    section.add "LaunchTemplate.Version", valid_611530
  var valid_611531 = formData.getOrDefault("HealthCheckType")
  valid_611531 = validateParameter(valid_611531, JString, required = false,
                                 default = nil)
  if valid_611531 != nil:
    section.add "HealthCheckType", valid_611531
  var valid_611532 = formData.getOrDefault("PlacementGroup")
  valid_611532 = validateParameter(valid_611532, JString, required = false,
                                 default = nil)
  if valid_611532 != nil:
    section.add "PlacementGroup", valid_611532
  var valid_611533 = formData.getOrDefault("InstanceId")
  valid_611533 = validateParameter(valid_611533, JString, required = false,
                                 default = nil)
  if valid_611533 != nil:
    section.add "InstanceId", valid_611533
  var valid_611534 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_611534 = validateParameter(valid_611534, JString, required = false,
                                 default = nil)
  if valid_611534 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_611534
  var valid_611535 = formData.getOrDefault("LifecycleHookSpecificationList")
  valid_611535 = validateParameter(valid_611535, JArray, required = false,
                                 default = nil)
  if valid_611535 != nil:
    section.add "LifecycleHookSpecificationList", valid_611535
  var valid_611536 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_611536 = validateParameter(valid_611536, JString, required = false,
                                 default = nil)
  if valid_611536 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_611536
  var valid_611537 = formData.getOrDefault("MaxSize")
  valid_611537 = validateParameter(valid_611537, JInt, required = true, default = nil)
  if valid_611537 != nil:
    section.add "MaxSize", valid_611537
  var valid_611538 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_611538 = validateParameter(valid_611538, JInt, required = false, default = nil)
  if valid_611538 != nil:
    section.add "HealthCheckGracePeriod", valid_611538
  var valid_611539 = formData.getOrDefault("Tags")
  valid_611539 = validateParameter(valid_611539, JArray, required = false,
                                 default = nil)
  if valid_611539 != nil:
    section.add "Tags", valid_611539
  var valid_611540 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_611540 = validateParameter(valid_611540, JString, required = false,
                                 default = nil)
  if valid_611540 != nil:
    section.add "ServiceLinkedRoleARN", valid_611540
  var valid_611541 = formData.getOrDefault("LaunchConfigurationName")
  valid_611541 = validateParameter(valid_611541, JString, required = false,
                                 default = nil)
  if valid_611541 != nil:
    section.add "LaunchConfigurationName", valid_611541
  var valid_611542 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_611542 = validateParameter(valid_611542, JString, required = false,
                                 default = nil)
  if valid_611542 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_611542
  var valid_611543 = formData.getOrDefault("VPCZoneIdentifier")
  valid_611543 = validateParameter(valid_611543, JString, required = false,
                                 default = nil)
  if valid_611543 != nil:
    section.add "VPCZoneIdentifier", valid_611543
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611544: Call_PostCreateAutoScalingGroup_611507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611544.validator(path, query, header, formData, body)
  let scheme = call_611544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611544.url(scheme.get, call_611544.host, call_611544.base,
                         call_611544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611544, url, valid)

proc call*(call_611545: Call_PostCreateAutoScalingGroup_611507;
          AutoScalingGroupName: string; MinSize: int; MaxSize: int;
          MixedInstancesPolicyInstancesDistribution: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          LoadBalancerNames: JsonNode = nil;
          NewInstancesProtectedFromScaleIn: bool = false;
          MaxInstanceLifetime: int = 0; TargetGroupARNs: JsonNode = nil;
          TerminationPolicies: JsonNode = nil; AvailabilityZones: JsonNode = nil;
          LaunchTemplateVersion: string = ""; HealthCheckType: string = "";
          PlacementGroup: string = ""; InstanceId: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LifecycleHookSpecificationList: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup";
          LaunchTemplateLaunchTemplateId: string = "";
          HealthCheckGracePeriod: int = 0; Tags: JsonNode = nil;
          ServiceLinkedRoleARN: string = ""; LaunchConfigurationName: string = "";
          Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          VPCZoneIdentifier: string = ""): Recallable =
  ## postCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   Action: string (required)
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  var query_611546 = newJObject()
  var formData_611547 = newJObject()
  add(formData_611547, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_611547, "MinSize", newJInt(MinSize))
  add(formData_611547, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_611547, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_611547, "DefaultCooldown", newJInt(DefaultCooldown))
  if LoadBalancerNames != nil:
    formData_611547.add "LoadBalancerNames", LoadBalancerNames
  add(formData_611547, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_611547, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  if TargetGroupARNs != nil:
    formData_611547.add "TargetGroupARNs", TargetGroupARNs
  if TerminationPolicies != nil:
    formData_611547.add "TerminationPolicies", TerminationPolicies
  if AvailabilityZones != nil:
    formData_611547.add "AvailabilityZones", AvailabilityZones
  add(formData_611547, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(formData_611547, "HealthCheckType", newJString(HealthCheckType))
  add(formData_611547, "PlacementGroup", newJString(PlacementGroup))
  add(formData_611547, "InstanceId", newJString(InstanceId))
  add(formData_611547, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  if LifecycleHookSpecificationList != nil:
    formData_611547.add "LifecycleHookSpecificationList",
                       LifecycleHookSpecificationList
  add(query_611546, "Action", newJString(Action))
  add(formData_611547, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_611547, "MaxSize", newJInt(MaxSize))
  add(formData_611547, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  if Tags != nil:
    formData_611547.add "Tags", Tags
  add(formData_611547, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_611547, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_611546, "Version", newJString(Version))
  add(formData_611547, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_611547, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  result = call_611545.call(nil, query_611546, nil, formData_611547, nil)

var postCreateAutoScalingGroup* = Call_PostCreateAutoScalingGroup_611507(
    name: "postCreateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_PostCreateAutoScalingGroup_611508, base: "/",
    url: url_PostCreateAutoScalingGroup_611509,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAutoScalingGroup_611467 = ref object of OpenApiRestCall_610658
proc url_GetCreateAutoScalingGroup_611469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAutoScalingGroup_611468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: JInt (required)
  ##          : The maximum size of the group.
  ##   LaunchConfigurationName: JString
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   HealthCheckType: JString
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   MinSize: JInt (required)
  ##          : The minimum size of the group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: JString (required)
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  section = newJObject()
  var valid_611470 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_611470 = validateParameter(valid_611470, JString, required = false,
                                 default = nil)
  if valid_611470 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_611470
  var valid_611471 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_611471 = validateParameter(valid_611471, JString, required = false,
                                 default = nil)
  if valid_611471 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_611471
  assert query != nil, "query argument is necessary due to required `MaxSize` field"
  var valid_611472 = query.getOrDefault("MaxSize")
  valid_611472 = validateParameter(valid_611472, JInt, required = true, default = nil)
  if valid_611472 != nil:
    section.add "MaxSize", valid_611472
  var valid_611473 = query.getOrDefault("LaunchConfigurationName")
  valid_611473 = validateParameter(valid_611473, JString, required = false,
                                 default = nil)
  if valid_611473 != nil:
    section.add "LaunchConfigurationName", valid_611473
  var valid_611474 = query.getOrDefault("HealthCheckGracePeriod")
  valid_611474 = validateParameter(valid_611474, JInt, required = false, default = nil)
  if valid_611474 != nil:
    section.add "HealthCheckGracePeriod", valid_611474
  var valid_611475 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_611475 = validateParameter(valid_611475, JString, required = false,
                                 default = nil)
  if valid_611475 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_611475
  var valid_611476 = query.getOrDefault("Tags")
  valid_611476 = validateParameter(valid_611476, JArray, required = false,
                                 default = nil)
  if valid_611476 != nil:
    section.add "Tags", valid_611476
  var valid_611477 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_611477 = validateParameter(valid_611477, JBool, required = false, default = nil)
  if valid_611477 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_611477
  var valid_611478 = query.getOrDefault("AvailabilityZones")
  valid_611478 = validateParameter(valid_611478, JArray, required = false,
                                 default = nil)
  if valid_611478 != nil:
    section.add "AvailabilityZones", valid_611478
  var valid_611479 = query.getOrDefault("HealthCheckType")
  valid_611479 = validateParameter(valid_611479, JString, required = false,
                                 default = nil)
  if valid_611479 != nil:
    section.add "HealthCheckType", valid_611479
  var valid_611480 = query.getOrDefault("TerminationPolicies")
  valid_611480 = validateParameter(valid_611480, JArray, required = false,
                                 default = nil)
  if valid_611480 != nil:
    section.add "TerminationPolicies", valid_611480
  var valid_611481 = query.getOrDefault("InstanceId")
  valid_611481 = validateParameter(valid_611481, JString, required = false,
                                 default = nil)
  if valid_611481 != nil:
    section.add "InstanceId", valid_611481
  var valid_611482 = query.getOrDefault("DesiredCapacity")
  valid_611482 = validateParameter(valid_611482, JInt, required = false, default = nil)
  if valid_611482 != nil:
    section.add "DesiredCapacity", valid_611482
  var valid_611483 = query.getOrDefault("LifecycleHookSpecificationList")
  valid_611483 = validateParameter(valid_611483, JArray, required = false,
                                 default = nil)
  if valid_611483 != nil:
    section.add "LifecycleHookSpecificationList", valid_611483
  var valid_611484 = query.getOrDefault("AutoScalingGroupName")
  valid_611484 = validateParameter(valid_611484, JString, required = true,
                                 default = nil)
  if valid_611484 != nil:
    section.add "AutoScalingGroupName", valid_611484
  var valid_611485 = query.getOrDefault("DefaultCooldown")
  valid_611485 = validateParameter(valid_611485, JInt, required = false, default = nil)
  if valid_611485 != nil:
    section.add "DefaultCooldown", valid_611485
  var valid_611486 = query.getOrDefault("TargetGroupARNs")
  valid_611486 = validateParameter(valid_611486, JArray, required = false,
                                 default = nil)
  if valid_611486 != nil:
    section.add "TargetGroupARNs", valid_611486
  var valid_611487 = query.getOrDefault("Action")
  valid_611487 = validateParameter(valid_611487, JString, required = true,
                                 default = newJString("CreateAutoScalingGroup"))
  if valid_611487 != nil:
    section.add "Action", valid_611487
  var valid_611488 = query.getOrDefault("MinSize")
  valid_611488 = validateParameter(valid_611488, JInt, required = true, default = nil)
  if valid_611488 != nil:
    section.add "MinSize", valid_611488
  var valid_611489 = query.getOrDefault("PlacementGroup")
  valid_611489 = validateParameter(valid_611489, JString, required = false,
                                 default = nil)
  if valid_611489 != nil:
    section.add "PlacementGroup", valid_611489
  var valid_611490 = query.getOrDefault("LaunchTemplate.Version")
  valid_611490 = validateParameter(valid_611490, JString, required = false,
                                 default = nil)
  if valid_611490 != nil:
    section.add "LaunchTemplate.Version", valid_611490
  var valid_611491 = query.getOrDefault("MaxInstanceLifetime")
  valid_611491 = validateParameter(valid_611491, JInt, required = false, default = nil)
  if valid_611491 != nil:
    section.add "MaxInstanceLifetime", valid_611491
  var valid_611492 = query.getOrDefault("Version")
  valid_611492 = validateParameter(valid_611492, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611492 != nil:
    section.add "Version", valid_611492
  var valid_611493 = query.getOrDefault("VPCZoneIdentifier")
  valid_611493 = validateParameter(valid_611493, JString, required = false,
                                 default = nil)
  if valid_611493 != nil:
    section.add "VPCZoneIdentifier", valid_611493
  var valid_611494 = query.getOrDefault("LoadBalancerNames")
  valid_611494 = validateParameter(valid_611494, JArray, required = false,
                                 default = nil)
  if valid_611494 != nil:
    section.add "LoadBalancerNames", valid_611494
  var valid_611495 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_611495 = validateParameter(valid_611495, JString, required = false,
                                 default = nil)
  if valid_611495 != nil:
    section.add "ServiceLinkedRoleARN", valid_611495
  var valid_611496 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_611496 = validateParameter(valid_611496, JString, required = false,
                                 default = nil)
  if valid_611496 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_611496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611497 = header.getOrDefault("X-Amz-Signature")
  valid_611497 = validateParameter(valid_611497, JString, required = false,
                                 default = nil)
  if valid_611497 != nil:
    section.add "X-Amz-Signature", valid_611497
  var valid_611498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611498 = validateParameter(valid_611498, JString, required = false,
                                 default = nil)
  if valid_611498 != nil:
    section.add "X-Amz-Content-Sha256", valid_611498
  var valid_611499 = header.getOrDefault("X-Amz-Date")
  valid_611499 = validateParameter(valid_611499, JString, required = false,
                                 default = nil)
  if valid_611499 != nil:
    section.add "X-Amz-Date", valid_611499
  var valid_611500 = header.getOrDefault("X-Amz-Credential")
  valid_611500 = validateParameter(valid_611500, JString, required = false,
                                 default = nil)
  if valid_611500 != nil:
    section.add "X-Amz-Credential", valid_611500
  var valid_611501 = header.getOrDefault("X-Amz-Security-Token")
  valid_611501 = validateParameter(valid_611501, JString, required = false,
                                 default = nil)
  if valid_611501 != nil:
    section.add "X-Amz-Security-Token", valid_611501
  var valid_611502 = header.getOrDefault("X-Amz-Algorithm")
  valid_611502 = validateParameter(valid_611502, JString, required = false,
                                 default = nil)
  if valid_611502 != nil:
    section.add "X-Amz-Algorithm", valid_611502
  var valid_611503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611503 = validateParameter(valid_611503, JString, required = false,
                                 default = nil)
  if valid_611503 != nil:
    section.add "X-Amz-SignedHeaders", valid_611503
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611504: Call_GetCreateAutoScalingGroup_611467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611504.validator(path, query, header, formData, body)
  let scheme = call_611504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611504.url(scheme.get, call_611504.host, call_611504.base,
                         call_611504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611504, url, valid)

proc call*(call_611505: Call_GetCreateAutoScalingGroup_611467; MaxSize: int;
          AutoScalingGroupName: string; MinSize: int;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          LaunchConfigurationName: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = ""; Tags: JsonNode = nil;
          NewInstancesProtectedFromScaleIn: bool = false;
          AvailabilityZones: JsonNode = nil; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; InstanceId: string = "";
          DesiredCapacity: int = 0; LifecycleHookSpecificationList: JsonNode = nil;
          DefaultCooldown: int = 0; TargetGroupARNs: JsonNode = nil;
          Action: string = "CreateAutoScalingGroup"; PlacementGroup: string = "";
          LaunchTemplateVersion: string = ""; MaxInstanceLifetime: int = 0;
          Version: string = "2011-01-01"; VPCZoneIdentifier: string = "";
          LoadBalancerNames: JsonNode = nil; ServiceLinkedRoleARN: string = "";
          LaunchTemplateLaunchTemplateId: string = ""): Recallable =
  ## getCreateAutoScalingGroup
  ## <p>Creates an Auto Scaling group with the specified name and attributes.</p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: int (required)
  ##          : The maximum size of the group.
  ##   LaunchConfigurationName: string
  ##                          : <p>The name of the launch configuration.</p> <p>If you do not specify <code>LaunchConfigurationName</code>, you must specify one of the following parameters: <code>InstanceId</code>, <code>LaunchTemplate</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   Tags: JArray
  ##       : <p>One or more tags.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : <p>One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for <code>VPCZoneIdentifier</code>.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.</p>
  ##   HealthCheckType: string
  ##                  : <p>The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. The default value is <code>EC2</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance used to create a launch configuration for the group.</p> <p>When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Create an Auto Scaling Group Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You must specify one of the following parameters in your request: <code>LaunchConfigurationName</code>, <code>LaunchTemplate</code>, <code>InstanceId</code>, or <code>MixedInstancesPolicy</code>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
  ##   LifecycleHookSpecificationList: JArray
  ##                                 : One or more lifecycle hooks.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group. This name must be unique per Region per account.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetGroupARNs: JArray
  ##                  : <p>The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinSize: int (required)
  ##          : The minimum size of the group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: string (required)
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for your virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p> <p>Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.</p>
  ##   LoadBalancerNames: JArray
  ##                    : <p>A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the <code>TargetGroupARNs</code> property instead.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Using a Load Balancer with an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  var query_611506 = newJObject()
  add(query_611506, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_611506, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_611506, "MaxSize", newJInt(MaxSize))
  add(query_611506, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_611506, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_611506, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  if Tags != nil:
    query_611506.add "Tags", Tags
  add(query_611506, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  if AvailabilityZones != nil:
    query_611506.add "AvailabilityZones", AvailabilityZones
  add(query_611506, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_611506.add "TerminationPolicies", TerminationPolicies
  add(query_611506, "InstanceId", newJString(InstanceId))
  add(query_611506, "DesiredCapacity", newJInt(DesiredCapacity))
  if LifecycleHookSpecificationList != nil:
    query_611506.add "LifecycleHookSpecificationList",
                    LifecycleHookSpecificationList
  add(query_611506, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611506, "DefaultCooldown", newJInt(DefaultCooldown))
  if TargetGroupARNs != nil:
    query_611506.add "TargetGroupARNs", TargetGroupARNs
  add(query_611506, "Action", newJString(Action))
  add(query_611506, "MinSize", newJInt(MinSize))
  add(query_611506, "PlacementGroup", newJString(PlacementGroup))
  add(query_611506, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_611506, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_611506, "Version", newJString(Version))
  add(query_611506, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  if LoadBalancerNames != nil:
    query_611506.add "LoadBalancerNames", LoadBalancerNames
  add(query_611506, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_611506, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  result = call_611505.call(nil, query_611506, nil, nil, nil)

var getCreateAutoScalingGroup* = Call_GetCreateAutoScalingGroup_611467(
    name: "getCreateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateAutoScalingGroup",
    validator: validate_GetCreateAutoScalingGroup_611468, base: "/",
    url: url_GetCreateAutoScalingGroup_611469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLaunchConfiguration_611581 = ref object of OpenApiRestCall_610658
proc url_PostCreateLaunchConfiguration_611583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLaunchConfiguration_611582(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611584 = query.getOrDefault("Action")
  valid_611584 = validateParameter(valid_611584, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_611584 != nil:
    section.add "Action", valid_611584
  var valid_611585 = query.getOrDefault("Version")
  valid_611585 = validateParameter(valid_611585, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611585 != nil:
    section.add "Version", valid_611585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611586 = header.getOrDefault("X-Amz-Signature")
  valid_611586 = validateParameter(valid_611586, JString, required = false,
                                 default = nil)
  if valid_611586 != nil:
    section.add "X-Amz-Signature", valid_611586
  var valid_611587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611587 = validateParameter(valid_611587, JString, required = false,
                                 default = nil)
  if valid_611587 != nil:
    section.add "X-Amz-Content-Sha256", valid_611587
  var valid_611588 = header.getOrDefault("X-Amz-Date")
  valid_611588 = validateParameter(valid_611588, JString, required = false,
                                 default = nil)
  if valid_611588 != nil:
    section.add "X-Amz-Date", valid_611588
  var valid_611589 = header.getOrDefault("X-Amz-Credential")
  valid_611589 = validateParameter(valid_611589, JString, required = false,
                                 default = nil)
  if valid_611589 != nil:
    section.add "X-Amz-Credential", valid_611589
  var valid_611590 = header.getOrDefault("X-Amz-Security-Token")
  valid_611590 = validateParameter(valid_611590, JString, required = false,
                                 default = nil)
  if valid_611590 != nil:
    section.add "X-Amz-Security-Token", valid_611590
  var valid_611591 = header.getOrDefault("X-Amz-Algorithm")
  valid_611591 = validateParameter(valid_611591, JString, required = false,
                                 default = nil)
  if valid_611591 != nil:
    section.add "X-Amz-Algorithm", valid_611591
  var valid_611592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611592 = validateParameter(valid_611592, JString, required = false,
                                 default = nil)
  if valid_611592 != nil:
    section.add "X-Amz-SignedHeaders", valid_611592
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  section = newJObject()
  var valid_611593 = formData.getOrDefault("UserData")
  valid_611593 = validateParameter(valid_611593, JString, required = false,
                                 default = nil)
  if valid_611593 != nil:
    section.add "UserData", valid_611593
  var valid_611594 = formData.getOrDefault("InstanceType")
  valid_611594 = validateParameter(valid_611594, JString, required = false,
                                 default = nil)
  if valid_611594 != nil:
    section.add "InstanceType", valid_611594
  var valid_611595 = formData.getOrDefault("SecurityGroups")
  valid_611595 = validateParameter(valid_611595, JArray, required = false,
                                 default = nil)
  if valid_611595 != nil:
    section.add "SecurityGroups", valid_611595
  var valid_611596 = formData.getOrDefault("KeyName")
  valid_611596 = validateParameter(valid_611596, JString, required = false,
                                 default = nil)
  if valid_611596 != nil:
    section.add "KeyName", valid_611596
  var valid_611597 = formData.getOrDefault("SpotPrice")
  valid_611597 = validateParameter(valid_611597, JString, required = false,
                                 default = nil)
  if valid_611597 != nil:
    section.add "SpotPrice", valid_611597
  var valid_611598 = formData.getOrDefault("ClassicLinkVPCId")
  valid_611598 = validateParameter(valid_611598, JString, required = false,
                                 default = nil)
  if valid_611598 != nil:
    section.add "ClassicLinkVPCId", valid_611598
  var valid_611599 = formData.getOrDefault("PlacementTenancy")
  valid_611599 = validateParameter(valid_611599, JString, required = false,
                                 default = nil)
  if valid_611599 != nil:
    section.add "PlacementTenancy", valid_611599
  var valid_611600 = formData.getOrDefault("KernelId")
  valid_611600 = validateParameter(valid_611600, JString, required = false,
                                 default = nil)
  if valid_611600 != nil:
    section.add "KernelId", valid_611600
  var valid_611601 = formData.getOrDefault("BlockDeviceMappings")
  valid_611601 = validateParameter(valid_611601, JArray, required = false,
                                 default = nil)
  if valid_611601 != nil:
    section.add "BlockDeviceMappings", valid_611601
  var valid_611602 = formData.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_611602 = validateParameter(valid_611602, JArray, required = false,
                                 default = nil)
  if valid_611602 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_611602
  var valid_611603 = formData.getOrDefault("InstanceId")
  valid_611603 = validateParameter(valid_611603, JString, required = false,
                                 default = nil)
  if valid_611603 != nil:
    section.add "InstanceId", valid_611603
  var valid_611604 = formData.getOrDefault("AssociatePublicIpAddress")
  valid_611604 = validateParameter(valid_611604, JBool, required = false, default = nil)
  if valid_611604 != nil:
    section.add "AssociatePublicIpAddress", valid_611604
  var valid_611605 = formData.getOrDefault("EbsOptimized")
  valid_611605 = validateParameter(valid_611605, JBool, required = false, default = nil)
  if valid_611605 != nil:
    section.add "EbsOptimized", valid_611605
  var valid_611606 = formData.getOrDefault("RamdiskId")
  valid_611606 = validateParameter(valid_611606, JString, required = false,
                                 default = nil)
  if valid_611606 != nil:
    section.add "RamdiskId", valid_611606
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_611607 = formData.getOrDefault("LaunchConfigurationName")
  valid_611607 = validateParameter(valid_611607, JString, required = true,
                                 default = nil)
  if valid_611607 != nil:
    section.add "LaunchConfigurationName", valid_611607
  var valid_611608 = formData.getOrDefault("ImageId")
  valid_611608 = validateParameter(valid_611608, JString, required = false,
                                 default = nil)
  if valid_611608 != nil:
    section.add "ImageId", valid_611608
  var valid_611609 = formData.getOrDefault("IamInstanceProfile")
  valid_611609 = validateParameter(valid_611609, JString, required = false,
                                 default = nil)
  if valid_611609 != nil:
    section.add "IamInstanceProfile", valid_611609
  var valid_611610 = formData.getOrDefault("InstanceMonitoring.Enabled")
  valid_611610 = validateParameter(valid_611610, JString, required = false,
                                 default = nil)
  if valid_611610 != nil:
    section.add "InstanceMonitoring.Enabled", valid_611610
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611611: Call_PostCreateLaunchConfiguration_611581; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611611.validator(path, query, header, formData, body)
  let scheme = call_611611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611611.url(scheme.get, call_611611.host, call_611611.base,
                         call_611611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611611, url, valid)

proc call*(call_611612: Call_PostCreateLaunchConfiguration_611581;
          LaunchConfigurationName: string; UserData: string = "";
          InstanceType: string = ""; SecurityGroups: JsonNode = nil;
          KeyName: string = ""; SpotPrice: string = ""; ClassicLinkVPCId: string = "";
          PlacementTenancy: string = ""; KernelId: string = "";
          BlockDeviceMappings: JsonNode = nil;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; InstanceId: string = "";
          Action: string = "CreateLaunchConfiguration";
          AssociatePublicIpAddress: bool = false; EbsOptimized: bool = false;
          RamdiskId: string = ""; ImageId: string = ""; Version: string = "2011-01-01";
          IamInstanceProfile: string = ""; InstanceMonitoringEnabled: string = ""): Recallable =
  ## postCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   Action: string (required)
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   Version: string (required)
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  var query_611613 = newJObject()
  var formData_611614 = newJObject()
  add(formData_611614, "UserData", newJString(UserData))
  add(formData_611614, "InstanceType", newJString(InstanceType))
  if SecurityGroups != nil:
    formData_611614.add "SecurityGroups", SecurityGroups
  add(formData_611614, "KeyName", newJString(KeyName))
  add(formData_611614, "SpotPrice", newJString(SpotPrice))
  add(formData_611614, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(formData_611614, "PlacementTenancy", newJString(PlacementTenancy))
  add(formData_611614, "KernelId", newJString(KernelId))
  if BlockDeviceMappings != nil:
    formData_611614.add "BlockDeviceMappings", BlockDeviceMappings
  if ClassicLinkVPCSecurityGroups != nil:
    formData_611614.add "ClassicLinkVPCSecurityGroups",
                       ClassicLinkVPCSecurityGroups
  add(formData_611614, "InstanceId", newJString(InstanceId))
  add(query_611613, "Action", newJString(Action))
  add(formData_611614, "AssociatePublicIpAddress",
      newJBool(AssociatePublicIpAddress))
  add(formData_611614, "EbsOptimized", newJBool(EbsOptimized))
  add(formData_611614, "RamdiskId", newJString(RamdiskId))
  add(formData_611614, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(formData_611614, "ImageId", newJString(ImageId))
  add(query_611613, "Version", newJString(Version))
  add(formData_611614, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(formData_611614, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  result = call_611612.call(nil, query_611613, nil, formData_611614, nil)

var postCreateLaunchConfiguration* = Call_PostCreateLaunchConfiguration_611581(
    name: "postCreateLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_PostCreateLaunchConfiguration_611582, base: "/",
    url: url_PostCreateLaunchConfiguration_611583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLaunchConfiguration_611548 = ref object of OpenApiRestCall_610658
proc url_GetCreateLaunchConfiguration_611550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLaunchConfiguration_611549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KeyName: JString
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   PlacementTenancy: JString
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   ImageId: JString
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   EbsOptimized: JBool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   UserData: JString
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   IamInstanceProfile: JString
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoring.Enabled: JString
  ##                             : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   AssociatePublicIpAddress: JBool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   InstanceId: JString
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   RamdiskId: JString
  ##            : The ID of the RAM disk to select.
  ##   KernelId: JString
  ##           : The ID of the kernel associated with the AMI.
  ##   ClassicLinkVPCId: JString
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceType: JString
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SpotPrice: JString
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  section = newJObject()
  var valid_611551 = query.getOrDefault("KeyName")
  valid_611551 = validateParameter(valid_611551, JString, required = false,
                                 default = nil)
  if valid_611551 != nil:
    section.add "KeyName", valid_611551
  var valid_611552 = query.getOrDefault("PlacementTenancy")
  valid_611552 = validateParameter(valid_611552, JString, required = false,
                                 default = nil)
  if valid_611552 != nil:
    section.add "PlacementTenancy", valid_611552
  var valid_611553 = query.getOrDefault("ImageId")
  valid_611553 = validateParameter(valid_611553, JString, required = false,
                                 default = nil)
  if valid_611553 != nil:
    section.add "ImageId", valid_611553
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_611554 = query.getOrDefault("LaunchConfigurationName")
  valid_611554 = validateParameter(valid_611554, JString, required = true,
                                 default = nil)
  if valid_611554 != nil:
    section.add "LaunchConfigurationName", valid_611554
  var valid_611555 = query.getOrDefault("EbsOptimized")
  valid_611555 = validateParameter(valid_611555, JBool, required = false, default = nil)
  if valid_611555 != nil:
    section.add "EbsOptimized", valid_611555
  var valid_611556 = query.getOrDefault("BlockDeviceMappings")
  valid_611556 = validateParameter(valid_611556, JArray, required = false,
                                 default = nil)
  if valid_611556 != nil:
    section.add "BlockDeviceMappings", valid_611556
  var valid_611557 = query.getOrDefault("UserData")
  valid_611557 = validateParameter(valid_611557, JString, required = false,
                                 default = nil)
  if valid_611557 != nil:
    section.add "UserData", valid_611557
  var valid_611558 = query.getOrDefault("IamInstanceProfile")
  valid_611558 = validateParameter(valid_611558, JString, required = false,
                                 default = nil)
  if valid_611558 != nil:
    section.add "IamInstanceProfile", valid_611558
  var valid_611559 = query.getOrDefault("InstanceMonitoring.Enabled")
  valid_611559 = validateParameter(valid_611559, JString, required = false,
                                 default = nil)
  if valid_611559 != nil:
    section.add "InstanceMonitoring.Enabled", valid_611559
  var valid_611560 = query.getOrDefault("AssociatePublicIpAddress")
  valid_611560 = validateParameter(valid_611560, JBool, required = false, default = nil)
  if valid_611560 != nil:
    section.add "AssociatePublicIpAddress", valid_611560
  var valid_611561 = query.getOrDefault("InstanceId")
  valid_611561 = validateParameter(valid_611561, JString, required = false,
                                 default = nil)
  if valid_611561 != nil:
    section.add "InstanceId", valid_611561
  var valid_611562 = query.getOrDefault("SecurityGroups")
  valid_611562 = validateParameter(valid_611562, JArray, required = false,
                                 default = nil)
  if valid_611562 != nil:
    section.add "SecurityGroups", valid_611562
  var valid_611563 = query.getOrDefault("ClassicLinkVPCSecurityGroups")
  valid_611563 = validateParameter(valid_611563, JArray, required = false,
                                 default = nil)
  if valid_611563 != nil:
    section.add "ClassicLinkVPCSecurityGroups", valid_611563
  var valid_611564 = query.getOrDefault("RamdiskId")
  valid_611564 = validateParameter(valid_611564, JString, required = false,
                                 default = nil)
  if valid_611564 != nil:
    section.add "RamdiskId", valid_611564
  var valid_611565 = query.getOrDefault("KernelId")
  valid_611565 = validateParameter(valid_611565, JString, required = false,
                                 default = nil)
  if valid_611565 != nil:
    section.add "KernelId", valid_611565
  var valid_611566 = query.getOrDefault("ClassicLinkVPCId")
  valid_611566 = validateParameter(valid_611566, JString, required = false,
                                 default = nil)
  if valid_611566 != nil:
    section.add "ClassicLinkVPCId", valid_611566
  var valid_611567 = query.getOrDefault("InstanceType")
  valid_611567 = validateParameter(valid_611567, JString, required = false,
                                 default = nil)
  if valid_611567 != nil:
    section.add "InstanceType", valid_611567
  var valid_611568 = query.getOrDefault("Action")
  valid_611568 = validateParameter(valid_611568, JString, required = true, default = newJString(
      "CreateLaunchConfiguration"))
  if valid_611568 != nil:
    section.add "Action", valid_611568
  var valid_611569 = query.getOrDefault("Version")
  valid_611569 = validateParameter(valid_611569, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611569 != nil:
    section.add "Version", valid_611569
  var valid_611570 = query.getOrDefault("SpotPrice")
  valid_611570 = validateParameter(valid_611570, JString, required = false,
                                 default = nil)
  if valid_611570 != nil:
    section.add "SpotPrice", valid_611570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611571 = header.getOrDefault("X-Amz-Signature")
  valid_611571 = validateParameter(valid_611571, JString, required = false,
                                 default = nil)
  if valid_611571 != nil:
    section.add "X-Amz-Signature", valid_611571
  var valid_611572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611572 = validateParameter(valid_611572, JString, required = false,
                                 default = nil)
  if valid_611572 != nil:
    section.add "X-Amz-Content-Sha256", valid_611572
  var valid_611573 = header.getOrDefault("X-Amz-Date")
  valid_611573 = validateParameter(valid_611573, JString, required = false,
                                 default = nil)
  if valid_611573 != nil:
    section.add "X-Amz-Date", valid_611573
  var valid_611574 = header.getOrDefault("X-Amz-Credential")
  valid_611574 = validateParameter(valid_611574, JString, required = false,
                                 default = nil)
  if valid_611574 != nil:
    section.add "X-Amz-Credential", valid_611574
  var valid_611575 = header.getOrDefault("X-Amz-Security-Token")
  valid_611575 = validateParameter(valid_611575, JString, required = false,
                                 default = nil)
  if valid_611575 != nil:
    section.add "X-Amz-Security-Token", valid_611575
  var valid_611576 = header.getOrDefault("X-Amz-Algorithm")
  valid_611576 = validateParameter(valid_611576, JString, required = false,
                                 default = nil)
  if valid_611576 != nil:
    section.add "X-Amz-Algorithm", valid_611576
  var valid_611577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611577 = validateParameter(valid_611577, JString, required = false,
                                 default = nil)
  if valid_611577 != nil:
    section.add "X-Amz-SignedHeaders", valid_611577
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611578: Call_GetCreateLaunchConfiguration_611548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611578.validator(path, query, header, formData, body)
  let scheme = call_611578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611578.url(scheme.get, call_611578.host, call_611578.base,
                         call_611578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611578, url, valid)

proc call*(call_611579: Call_GetCreateLaunchConfiguration_611548;
          LaunchConfigurationName: string; KeyName: string = "";
          PlacementTenancy: string = ""; ImageId: string = "";
          EbsOptimized: bool = false; BlockDeviceMappings: JsonNode = nil;
          UserData: string = ""; IamInstanceProfile: string = "";
          InstanceMonitoringEnabled: string = "";
          AssociatePublicIpAddress: bool = false; InstanceId: string = "";
          SecurityGroups: JsonNode = nil;
          ClassicLinkVPCSecurityGroups: JsonNode = nil; RamdiskId: string = "";
          KernelId: string = ""; ClassicLinkVPCId: string = "";
          InstanceType: string = ""; Action: string = "CreateLaunchConfiguration";
          Version: string = "2011-01-01"; SpotPrice: string = ""): Recallable =
  ## getCreateLaunchConfiguration
  ## <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. For information about viewing this limit, see <a>DescribeAccountLimits</a>. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch Configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   KeyName: string
  ##          : The name of the key pair. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   PlacementTenancy: string
  ##                   : <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.</p> <p>To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this parameter to <code>dedicated</code>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy">Instance Placement Tenancy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Values: <code>default</code> | <code>dedicated</code> </p>
  ##   ImageId: string
  ##          : <p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>ImageId</code>.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration. This name must be unique per Region per account.
  ##   EbsOptimized: bool
  ##               : <p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized Instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p>
  ##   BlockDeviceMappings: JArray
  ##                      : A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device Mapping</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   UserData: string
  ##           : The Base64-encoded user data to make available to the launched EC2 instances. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   IamInstanceProfile: string
  ##                     : <p>The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM Role for Applications That Run on Amazon EC2 Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceMonitoringEnabled: string
  ##                            : Describes whether detailed monitoring is enabled for the Auto Scaling instances.
  ## If <code>true</code>, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
  ##   AssociatePublicIpAddress: bool
  ##                           : <p>For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IP address. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling Instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this parameter, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <note> <p>If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.</p> </note>
  ##   InstanceId: string
  ##             : <p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Create a Launch Configuration Using an EC2 Instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you do not specify <code>InstanceId</code>, you must specify both <code>ImageId</code> and <code>InstanceType</code>.</p>
  ##   SecurityGroups: JArray
  ##                 : <p>A list that contains the security groups to assign to the instances in the Auto Scaling group.</p> <p>[EC2-VPC] Specify the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>[EC2-Classic] Specify either the security group names or the security group IDs. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
  ##   ClassicLinkVPCSecurityGroups: JArray
  ##                               : <p>The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify the <code>ClassicLinkVPCId</code> parameter, you must specify this parameter.</p>
  ##   RamdiskId: string
  ##            : The ID of the RAM disk to select.
  ##   KernelId: string
  ##           : The ID of the kernel associated with the AMI.
  ##   ClassicLinkVPCId: string
  ##                   : <p>The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 User Guide for Linux Instances</i> and <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic Instances to a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This parameter can only be used if you are launching EC2-Classic instances.</p>
  ##   InstanceType: string
  ##               : <p>Specifies the instance type of the EC2 instance.</p> <p>For information about available instance types, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available Instance Types</a> in the <i>Amazon EC2 User Guide for Linux Instances.</i> </p> <p>If you do not specify <code>InstanceId</code>, you must specify <code>InstanceType</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SpotPrice: string
  ##            : <p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Launching Spot Instances in Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note>
  var query_611580 = newJObject()
  add(query_611580, "KeyName", newJString(KeyName))
  add(query_611580, "PlacementTenancy", newJString(PlacementTenancy))
  add(query_611580, "ImageId", newJString(ImageId))
  add(query_611580, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_611580, "EbsOptimized", newJBool(EbsOptimized))
  if BlockDeviceMappings != nil:
    query_611580.add "BlockDeviceMappings", BlockDeviceMappings
  add(query_611580, "UserData", newJString(UserData))
  add(query_611580, "IamInstanceProfile", newJString(IamInstanceProfile))
  add(query_611580, "InstanceMonitoring.Enabled",
      newJString(InstanceMonitoringEnabled))
  add(query_611580, "AssociatePublicIpAddress", newJBool(AssociatePublicIpAddress))
  add(query_611580, "InstanceId", newJString(InstanceId))
  if SecurityGroups != nil:
    query_611580.add "SecurityGroups", SecurityGroups
  if ClassicLinkVPCSecurityGroups != nil:
    query_611580.add "ClassicLinkVPCSecurityGroups", ClassicLinkVPCSecurityGroups
  add(query_611580, "RamdiskId", newJString(RamdiskId))
  add(query_611580, "KernelId", newJString(KernelId))
  add(query_611580, "ClassicLinkVPCId", newJString(ClassicLinkVPCId))
  add(query_611580, "InstanceType", newJString(InstanceType))
  add(query_611580, "Action", newJString(Action))
  add(query_611580, "Version", newJString(Version))
  add(query_611580, "SpotPrice", newJString(SpotPrice))
  result = call_611579.call(nil, query_611580, nil, nil, nil)

var getCreateLaunchConfiguration* = Call_GetCreateLaunchConfiguration_611548(
    name: "getCreateLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=CreateLaunchConfiguration",
    validator: validate_GetCreateLaunchConfiguration_611549, base: "/",
    url: url_GetCreateLaunchConfiguration_611550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOrUpdateTags_611631 = ref object of OpenApiRestCall_610658
proc url_PostCreateOrUpdateTags_611633(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOrUpdateTags_611632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611634 = query.getOrDefault("Action")
  valid_611634 = validateParameter(valid_611634, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_611634 != nil:
    section.add "Action", valid_611634
  var valid_611635 = query.getOrDefault("Version")
  valid_611635 = validateParameter(valid_611635, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611635 != nil:
    section.add "Version", valid_611635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611636 = header.getOrDefault("X-Amz-Signature")
  valid_611636 = validateParameter(valid_611636, JString, required = false,
                                 default = nil)
  if valid_611636 != nil:
    section.add "X-Amz-Signature", valid_611636
  var valid_611637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611637 = validateParameter(valid_611637, JString, required = false,
                                 default = nil)
  if valid_611637 != nil:
    section.add "X-Amz-Content-Sha256", valid_611637
  var valid_611638 = header.getOrDefault("X-Amz-Date")
  valid_611638 = validateParameter(valid_611638, JString, required = false,
                                 default = nil)
  if valid_611638 != nil:
    section.add "X-Amz-Date", valid_611638
  var valid_611639 = header.getOrDefault("X-Amz-Credential")
  valid_611639 = validateParameter(valid_611639, JString, required = false,
                                 default = nil)
  if valid_611639 != nil:
    section.add "X-Amz-Credential", valid_611639
  var valid_611640 = header.getOrDefault("X-Amz-Security-Token")
  valid_611640 = validateParameter(valid_611640, JString, required = false,
                                 default = nil)
  if valid_611640 != nil:
    section.add "X-Amz-Security-Token", valid_611640
  var valid_611641 = header.getOrDefault("X-Amz-Algorithm")
  valid_611641 = validateParameter(valid_611641, JString, required = false,
                                 default = nil)
  if valid_611641 != nil:
    section.add "X-Amz-Algorithm", valid_611641
  var valid_611642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611642 = validateParameter(valid_611642, JString, required = false,
                                 default = nil)
  if valid_611642 != nil:
    section.add "X-Amz-SignedHeaders", valid_611642
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_611643 = formData.getOrDefault("Tags")
  valid_611643 = validateParameter(valid_611643, JArray, required = true, default = nil)
  if valid_611643 != nil:
    section.add "Tags", valid_611643
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611644: Call_PostCreateOrUpdateTags_611631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611644.validator(path, query, header, formData, body)
  let scheme = call_611644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611644.url(scheme.get, call_611644.host, call_611644.base,
                         call_611644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611644, url, valid)

proc call*(call_611645: Call_PostCreateOrUpdateTags_611631; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## postCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Version: string (required)
  var query_611646 = newJObject()
  var formData_611647 = newJObject()
  add(query_611646, "Action", newJString(Action))
  if Tags != nil:
    formData_611647.add "Tags", Tags
  add(query_611646, "Version", newJString(Version))
  result = call_611645.call(nil, query_611646, nil, formData_611647, nil)

var postCreateOrUpdateTags* = Call_PostCreateOrUpdateTags_611631(
    name: "postCreateOrUpdateTags", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_PostCreateOrUpdateTags_611632, base: "/",
    url: url_PostCreateOrUpdateTags_611633, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOrUpdateTags_611615 = ref object of OpenApiRestCall_610658
proc url_GetCreateOrUpdateTags_611617(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOrUpdateTags_611616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_611618 = query.getOrDefault("Tags")
  valid_611618 = validateParameter(valid_611618, JArray, required = true, default = nil)
  if valid_611618 != nil:
    section.add "Tags", valid_611618
  var valid_611619 = query.getOrDefault("Action")
  valid_611619 = validateParameter(valid_611619, JString, required = true,
                                 default = newJString("CreateOrUpdateTags"))
  if valid_611619 != nil:
    section.add "Action", valid_611619
  var valid_611620 = query.getOrDefault("Version")
  valid_611620 = validateParameter(valid_611620, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611620 != nil:
    section.add "Version", valid_611620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611621 = header.getOrDefault("X-Amz-Signature")
  valid_611621 = validateParameter(valid_611621, JString, required = false,
                                 default = nil)
  if valid_611621 != nil:
    section.add "X-Amz-Signature", valid_611621
  var valid_611622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611622 = validateParameter(valid_611622, JString, required = false,
                                 default = nil)
  if valid_611622 != nil:
    section.add "X-Amz-Content-Sha256", valid_611622
  var valid_611623 = header.getOrDefault("X-Amz-Date")
  valid_611623 = validateParameter(valid_611623, JString, required = false,
                                 default = nil)
  if valid_611623 != nil:
    section.add "X-Amz-Date", valid_611623
  var valid_611624 = header.getOrDefault("X-Amz-Credential")
  valid_611624 = validateParameter(valid_611624, JString, required = false,
                                 default = nil)
  if valid_611624 != nil:
    section.add "X-Amz-Credential", valid_611624
  var valid_611625 = header.getOrDefault("X-Amz-Security-Token")
  valid_611625 = validateParameter(valid_611625, JString, required = false,
                                 default = nil)
  if valid_611625 != nil:
    section.add "X-Amz-Security-Token", valid_611625
  var valid_611626 = header.getOrDefault("X-Amz-Algorithm")
  valid_611626 = validateParameter(valid_611626, JString, required = false,
                                 default = nil)
  if valid_611626 != nil:
    section.add "X-Amz-Algorithm", valid_611626
  var valid_611627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611627 = validateParameter(valid_611627, JString, required = false,
                                 default = nil)
  if valid_611627 != nil:
    section.add "X-Amz-SignedHeaders", valid_611627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611628: Call_GetCreateOrUpdateTags_611615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611628.validator(path, query, header, formData, body)
  let scheme = call_611628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611628.url(scheme.get, call_611628.host, call_611628.base,
                         call_611628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611628, url, valid)

proc call*(call_611629: Call_GetCreateOrUpdateTags_611615; Tags: JsonNode;
          Action: string = "CreateOrUpdateTags"; Version: string = "2011-01-01"): Recallable =
  ## getCreateOrUpdateTags
  ## <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611630 = newJObject()
  if Tags != nil:
    query_611630.add "Tags", Tags
  add(query_611630, "Action", newJString(Action))
  add(query_611630, "Version", newJString(Version))
  result = call_611629.call(nil, query_611630, nil, nil, nil)

var getCreateOrUpdateTags* = Call_GetCreateOrUpdateTags_611615(
    name: "getCreateOrUpdateTags", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=CreateOrUpdateTags",
    validator: validate_GetCreateOrUpdateTags_611616, base: "/",
    url: url_GetCreateOrUpdateTags_611617, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAutoScalingGroup_611665 = ref object of OpenApiRestCall_610658
proc url_PostDeleteAutoScalingGroup_611667(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAutoScalingGroup_611666(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611668 = query.getOrDefault("Action")
  valid_611668 = validateParameter(valid_611668, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_611668 != nil:
    section.add "Action", valid_611668
  var valid_611669 = query.getOrDefault("Version")
  valid_611669 = validateParameter(valid_611669, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611669 != nil:
    section.add "Version", valid_611669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611670 = header.getOrDefault("X-Amz-Signature")
  valid_611670 = validateParameter(valid_611670, JString, required = false,
                                 default = nil)
  if valid_611670 != nil:
    section.add "X-Amz-Signature", valid_611670
  var valid_611671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611671 = validateParameter(valid_611671, JString, required = false,
                                 default = nil)
  if valid_611671 != nil:
    section.add "X-Amz-Content-Sha256", valid_611671
  var valid_611672 = header.getOrDefault("X-Amz-Date")
  valid_611672 = validateParameter(valid_611672, JString, required = false,
                                 default = nil)
  if valid_611672 != nil:
    section.add "X-Amz-Date", valid_611672
  var valid_611673 = header.getOrDefault("X-Amz-Credential")
  valid_611673 = validateParameter(valid_611673, JString, required = false,
                                 default = nil)
  if valid_611673 != nil:
    section.add "X-Amz-Credential", valid_611673
  var valid_611674 = header.getOrDefault("X-Amz-Security-Token")
  valid_611674 = validateParameter(valid_611674, JString, required = false,
                                 default = nil)
  if valid_611674 != nil:
    section.add "X-Amz-Security-Token", valid_611674
  var valid_611675 = header.getOrDefault("X-Amz-Algorithm")
  valid_611675 = validateParameter(valid_611675, JString, required = false,
                                 default = nil)
  if valid_611675 != nil:
    section.add "X-Amz-Algorithm", valid_611675
  var valid_611676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611676 = validateParameter(valid_611676, JString, required = false,
                                 default = nil)
  if valid_611676 != nil:
    section.add "X-Amz-SignedHeaders", valid_611676
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611677 = formData.getOrDefault("AutoScalingGroupName")
  valid_611677 = validateParameter(valid_611677, JString, required = true,
                                 default = nil)
  if valid_611677 != nil:
    section.add "AutoScalingGroupName", valid_611677
  var valid_611678 = formData.getOrDefault("ForceDelete")
  valid_611678 = validateParameter(valid_611678, JBool, required = false, default = nil)
  if valid_611678 != nil:
    section.add "ForceDelete", valid_611678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611679: Call_PostDeleteAutoScalingGroup_611665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_611679.validator(path, query, header, formData, body)
  let scheme = call_611679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611679.url(scheme.get, call_611679.host, call_611679.base,
                         call_611679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611679, url, valid)

proc call*(call_611680: Call_PostDeleteAutoScalingGroup_611665;
          AutoScalingGroupName: string; ForceDelete: bool = false;
          Action: string = "DeleteAutoScalingGroup"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611681 = newJObject()
  var formData_611682 = newJObject()
  add(formData_611682, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_611682, "ForceDelete", newJBool(ForceDelete))
  add(query_611681, "Action", newJString(Action))
  add(query_611681, "Version", newJString(Version))
  result = call_611680.call(nil, query_611681, nil, formData_611682, nil)

var postDeleteAutoScalingGroup* = Call_PostDeleteAutoScalingGroup_611665(
    name: "postDeleteAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_PostDeleteAutoScalingGroup_611666, base: "/",
    url: url_PostDeleteAutoScalingGroup_611667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAutoScalingGroup_611648 = ref object of OpenApiRestCall_610658
proc url_GetDeleteAutoScalingGroup_611650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAutoScalingGroup_611649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ForceDelete: JBool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611651 = query.getOrDefault("AutoScalingGroupName")
  valid_611651 = validateParameter(valid_611651, JString, required = true,
                                 default = nil)
  if valid_611651 != nil:
    section.add "AutoScalingGroupName", valid_611651
  var valid_611652 = query.getOrDefault("Action")
  valid_611652 = validateParameter(valid_611652, JString, required = true,
                                 default = newJString("DeleteAutoScalingGroup"))
  if valid_611652 != nil:
    section.add "Action", valid_611652
  var valid_611653 = query.getOrDefault("ForceDelete")
  valid_611653 = validateParameter(valid_611653, JBool, required = false, default = nil)
  if valid_611653 != nil:
    section.add "ForceDelete", valid_611653
  var valid_611654 = query.getOrDefault("Version")
  valid_611654 = validateParameter(valid_611654, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611654 != nil:
    section.add "Version", valid_611654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611655 = header.getOrDefault("X-Amz-Signature")
  valid_611655 = validateParameter(valid_611655, JString, required = false,
                                 default = nil)
  if valid_611655 != nil:
    section.add "X-Amz-Signature", valid_611655
  var valid_611656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611656 = validateParameter(valid_611656, JString, required = false,
                                 default = nil)
  if valid_611656 != nil:
    section.add "X-Amz-Content-Sha256", valid_611656
  var valid_611657 = header.getOrDefault("X-Amz-Date")
  valid_611657 = validateParameter(valid_611657, JString, required = false,
                                 default = nil)
  if valid_611657 != nil:
    section.add "X-Amz-Date", valid_611657
  var valid_611658 = header.getOrDefault("X-Amz-Credential")
  valid_611658 = validateParameter(valid_611658, JString, required = false,
                                 default = nil)
  if valid_611658 != nil:
    section.add "X-Amz-Credential", valid_611658
  var valid_611659 = header.getOrDefault("X-Amz-Security-Token")
  valid_611659 = validateParameter(valid_611659, JString, required = false,
                                 default = nil)
  if valid_611659 != nil:
    section.add "X-Amz-Security-Token", valid_611659
  var valid_611660 = header.getOrDefault("X-Amz-Algorithm")
  valid_611660 = validateParameter(valid_611660, JString, required = false,
                                 default = nil)
  if valid_611660 != nil:
    section.add "X-Amz-Algorithm", valid_611660
  var valid_611661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611661 = validateParameter(valid_611661, JString, required = false,
                                 default = nil)
  if valid_611661 != nil:
    section.add "X-Amz-SignedHeaders", valid_611661
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611662: Call_GetDeleteAutoScalingGroup_611648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ## 
  let valid = call_611662.validator(path, query, header, formData, body)
  let scheme = call_611662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611662.url(scheme.get, call_611662.host, call_611662.base,
                         call_611662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611662, url, valid)

proc call*(call_611663: Call_GetDeleteAutoScalingGroup_611648;
          AutoScalingGroupName: string; Action: string = "DeleteAutoScalingGroup";
          ForceDelete: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getDeleteAutoScalingGroup
  ## <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed.</p> <p>If the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>To remove instances from the Auto Scaling group before deleting it, call <a>DetachInstances</a> with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call <a>UpdateAutoScalingGroup</a> and set the minimum size and desired capacity of the Auto Scaling group to zero.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ForceDelete: bool
  ##              : Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
  ##   Version: string (required)
  var query_611664 = newJObject()
  add(query_611664, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611664, "Action", newJString(Action))
  add(query_611664, "ForceDelete", newJBool(ForceDelete))
  add(query_611664, "Version", newJString(Version))
  result = call_611663.call(nil, query_611664, nil, nil, nil)

var getDeleteAutoScalingGroup* = Call_GetDeleteAutoScalingGroup_611648(
    name: "getDeleteAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteAutoScalingGroup",
    validator: validate_GetDeleteAutoScalingGroup_611649, base: "/",
    url: url_GetDeleteAutoScalingGroup_611650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLaunchConfiguration_611699 = ref object of OpenApiRestCall_610658
proc url_PostDeleteLaunchConfiguration_611701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLaunchConfiguration_611700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611702 = query.getOrDefault("Action")
  valid_611702 = validateParameter(valid_611702, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_611702 != nil:
    section.add "Action", valid_611702
  var valid_611703 = query.getOrDefault("Version")
  valid_611703 = validateParameter(valid_611703, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611703 != nil:
    section.add "Version", valid_611703
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611704 = header.getOrDefault("X-Amz-Signature")
  valid_611704 = validateParameter(valid_611704, JString, required = false,
                                 default = nil)
  if valid_611704 != nil:
    section.add "X-Amz-Signature", valid_611704
  var valid_611705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611705 = validateParameter(valid_611705, JString, required = false,
                                 default = nil)
  if valid_611705 != nil:
    section.add "X-Amz-Content-Sha256", valid_611705
  var valid_611706 = header.getOrDefault("X-Amz-Date")
  valid_611706 = validateParameter(valid_611706, JString, required = false,
                                 default = nil)
  if valid_611706 != nil:
    section.add "X-Amz-Date", valid_611706
  var valid_611707 = header.getOrDefault("X-Amz-Credential")
  valid_611707 = validateParameter(valid_611707, JString, required = false,
                                 default = nil)
  if valid_611707 != nil:
    section.add "X-Amz-Credential", valid_611707
  var valid_611708 = header.getOrDefault("X-Amz-Security-Token")
  valid_611708 = validateParameter(valid_611708, JString, required = false,
                                 default = nil)
  if valid_611708 != nil:
    section.add "X-Amz-Security-Token", valid_611708
  var valid_611709 = header.getOrDefault("X-Amz-Algorithm")
  valid_611709 = validateParameter(valid_611709, JString, required = false,
                                 default = nil)
  if valid_611709 != nil:
    section.add "X-Amz-Algorithm", valid_611709
  var valid_611710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611710 = validateParameter(valid_611710, JString, required = false,
                                 default = nil)
  if valid_611710 != nil:
    section.add "X-Amz-SignedHeaders", valid_611710
  result.add "header", section
  ## parameters in `formData` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `LaunchConfigurationName` field"
  var valid_611711 = formData.getOrDefault("LaunchConfigurationName")
  valid_611711 = validateParameter(valid_611711, JString, required = true,
                                 default = nil)
  if valid_611711 != nil:
    section.add "LaunchConfigurationName", valid_611711
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611712: Call_PostDeleteLaunchConfiguration_611699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_611712.validator(path, query, header, formData, body)
  let scheme = call_611712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611712.url(scheme.get, call_611712.host, call_611712.base,
                         call_611712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611712, url, valid)

proc call*(call_611713: Call_PostDeleteLaunchConfiguration_611699;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   Action: string (required)
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Version: string (required)
  var query_611714 = newJObject()
  var formData_611715 = newJObject()
  add(query_611714, "Action", newJString(Action))
  add(formData_611715, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_611714, "Version", newJString(Version))
  result = call_611713.call(nil, query_611714, nil, formData_611715, nil)

var postDeleteLaunchConfiguration* = Call_PostDeleteLaunchConfiguration_611699(
    name: "postDeleteLaunchConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_PostDeleteLaunchConfiguration_611700, base: "/",
    url: url_PostDeleteLaunchConfiguration_611701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLaunchConfiguration_611683 = ref object of OpenApiRestCall_610658
proc url_GetDeleteLaunchConfiguration_611685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLaunchConfiguration_611684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LaunchConfigurationName: JString (required)
  ##                          : The name of the launch configuration.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `LaunchConfigurationName` field"
  var valid_611686 = query.getOrDefault("LaunchConfigurationName")
  valid_611686 = validateParameter(valid_611686, JString, required = true,
                                 default = nil)
  if valid_611686 != nil:
    section.add "LaunchConfigurationName", valid_611686
  var valid_611687 = query.getOrDefault("Action")
  valid_611687 = validateParameter(valid_611687, JString, required = true, default = newJString(
      "DeleteLaunchConfiguration"))
  if valid_611687 != nil:
    section.add "Action", valid_611687
  var valid_611688 = query.getOrDefault("Version")
  valid_611688 = validateParameter(valid_611688, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611688 != nil:
    section.add "Version", valid_611688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611689 = header.getOrDefault("X-Amz-Signature")
  valid_611689 = validateParameter(valid_611689, JString, required = false,
                                 default = nil)
  if valid_611689 != nil:
    section.add "X-Amz-Signature", valid_611689
  var valid_611690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611690 = validateParameter(valid_611690, JString, required = false,
                                 default = nil)
  if valid_611690 != nil:
    section.add "X-Amz-Content-Sha256", valid_611690
  var valid_611691 = header.getOrDefault("X-Amz-Date")
  valid_611691 = validateParameter(valid_611691, JString, required = false,
                                 default = nil)
  if valid_611691 != nil:
    section.add "X-Amz-Date", valid_611691
  var valid_611692 = header.getOrDefault("X-Amz-Credential")
  valid_611692 = validateParameter(valid_611692, JString, required = false,
                                 default = nil)
  if valid_611692 != nil:
    section.add "X-Amz-Credential", valid_611692
  var valid_611693 = header.getOrDefault("X-Amz-Security-Token")
  valid_611693 = validateParameter(valid_611693, JString, required = false,
                                 default = nil)
  if valid_611693 != nil:
    section.add "X-Amz-Security-Token", valid_611693
  var valid_611694 = header.getOrDefault("X-Amz-Algorithm")
  valid_611694 = validateParameter(valid_611694, JString, required = false,
                                 default = nil)
  if valid_611694 != nil:
    section.add "X-Amz-Algorithm", valid_611694
  var valid_611695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611695 = validateParameter(valid_611695, JString, required = false,
                                 default = nil)
  if valid_611695 != nil:
    section.add "X-Amz-SignedHeaders", valid_611695
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611696: Call_GetDeleteLaunchConfiguration_611683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ## 
  let valid = call_611696.validator(path, query, header, formData, body)
  let scheme = call_611696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611696.url(scheme.get, call_611696.host, call_611696.base,
                         call_611696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611696, url, valid)

proc call*(call_611697: Call_GetDeleteLaunchConfiguration_611683;
          LaunchConfigurationName: string;
          Action: string = "DeleteLaunchConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteLaunchConfiguration
  ## <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
  ##   LaunchConfigurationName: string (required)
  ##                          : The name of the launch configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611698 = newJObject()
  add(query_611698, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_611698, "Action", newJString(Action))
  add(query_611698, "Version", newJString(Version))
  result = call_611697.call(nil, query_611698, nil, nil, nil)

var getDeleteLaunchConfiguration* = Call_GetDeleteLaunchConfiguration_611683(
    name: "getDeleteLaunchConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteLaunchConfiguration",
    validator: validate_GetDeleteLaunchConfiguration_611684, base: "/",
    url: url_GetDeleteLaunchConfiguration_611685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLifecycleHook_611733 = ref object of OpenApiRestCall_610658
proc url_PostDeleteLifecycleHook_611735(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLifecycleHook_611734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611736 = query.getOrDefault("Action")
  valid_611736 = validateParameter(valid_611736, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_611736 != nil:
    section.add "Action", valid_611736
  var valid_611737 = query.getOrDefault("Version")
  valid_611737 = validateParameter(valid_611737, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611737 != nil:
    section.add "Version", valid_611737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611738 = header.getOrDefault("X-Amz-Signature")
  valid_611738 = validateParameter(valid_611738, JString, required = false,
                                 default = nil)
  if valid_611738 != nil:
    section.add "X-Amz-Signature", valid_611738
  var valid_611739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611739 = validateParameter(valid_611739, JString, required = false,
                                 default = nil)
  if valid_611739 != nil:
    section.add "X-Amz-Content-Sha256", valid_611739
  var valid_611740 = header.getOrDefault("X-Amz-Date")
  valid_611740 = validateParameter(valid_611740, JString, required = false,
                                 default = nil)
  if valid_611740 != nil:
    section.add "X-Amz-Date", valid_611740
  var valid_611741 = header.getOrDefault("X-Amz-Credential")
  valid_611741 = validateParameter(valid_611741, JString, required = false,
                                 default = nil)
  if valid_611741 != nil:
    section.add "X-Amz-Credential", valid_611741
  var valid_611742 = header.getOrDefault("X-Amz-Security-Token")
  valid_611742 = validateParameter(valid_611742, JString, required = false,
                                 default = nil)
  if valid_611742 != nil:
    section.add "X-Amz-Security-Token", valid_611742
  var valid_611743 = header.getOrDefault("X-Amz-Algorithm")
  valid_611743 = validateParameter(valid_611743, JString, required = false,
                                 default = nil)
  if valid_611743 != nil:
    section.add "X-Amz-Algorithm", valid_611743
  var valid_611744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611744 = validateParameter(valid_611744, JString, required = false,
                                 default = nil)
  if valid_611744 != nil:
    section.add "X-Amz-SignedHeaders", valid_611744
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611745 = formData.getOrDefault("AutoScalingGroupName")
  valid_611745 = validateParameter(valid_611745, JString, required = true,
                                 default = nil)
  if valid_611745 != nil:
    section.add "AutoScalingGroupName", valid_611745
  var valid_611746 = formData.getOrDefault("LifecycleHookName")
  valid_611746 = validateParameter(valid_611746, JString, required = true,
                                 default = nil)
  if valid_611746 != nil:
    section.add "LifecycleHookName", valid_611746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611747: Call_PostDeleteLifecycleHook_611733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_611747.validator(path, query, header, formData, body)
  let scheme = call_611747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611747.url(scheme.get, call_611747.host, call_611747.base,
                         call_611747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611747, url, valid)

proc call*(call_611748: Call_PostDeleteLifecycleHook_611733;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611749 = newJObject()
  var formData_611750 = newJObject()
  add(formData_611750, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_611750, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_611749, "Action", newJString(Action))
  add(query_611749, "Version", newJString(Version))
  result = call_611748.call(nil, query_611749, nil, formData_611750, nil)

var postDeleteLifecycleHook* = Call_PostDeleteLifecycleHook_611733(
    name: "postDeleteLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_PostDeleteLifecycleHook_611734, base: "/",
    url: url_PostDeleteLifecycleHook_611735, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLifecycleHook_611716 = ref object of OpenApiRestCall_610658
proc url_GetDeleteLifecycleHook_611718(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLifecycleHook_611717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611719 = query.getOrDefault("AutoScalingGroupName")
  valid_611719 = validateParameter(valid_611719, JString, required = true,
                                 default = nil)
  if valid_611719 != nil:
    section.add "AutoScalingGroupName", valid_611719
  var valid_611720 = query.getOrDefault("LifecycleHookName")
  valid_611720 = validateParameter(valid_611720, JString, required = true,
                                 default = nil)
  if valid_611720 != nil:
    section.add "LifecycleHookName", valid_611720
  var valid_611721 = query.getOrDefault("Action")
  valid_611721 = validateParameter(valid_611721, JString, required = true,
                                 default = newJString("DeleteLifecycleHook"))
  if valid_611721 != nil:
    section.add "Action", valid_611721
  var valid_611722 = query.getOrDefault("Version")
  valid_611722 = validateParameter(valid_611722, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611722 != nil:
    section.add "Version", valid_611722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611723 = header.getOrDefault("X-Amz-Signature")
  valid_611723 = validateParameter(valid_611723, JString, required = false,
                                 default = nil)
  if valid_611723 != nil:
    section.add "X-Amz-Signature", valid_611723
  var valid_611724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611724 = validateParameter(valid_611724, JString, required = false,
                                 default = nil)
  if valid_611724 != nil:
    section.add "X-Amz-Content-Sha256", valid_611724
  var valid_611725 = header.getOrDefault("X-Amz-Date")
  valid_611725 = validateParameter(valid_611725, JString, required = false,
                                 default = nil)
  if valid_611725 != nil:
    section.add "X-Amz-Date", valid_611725
  var valid_611726 = header.getOrDefault("X-Amz-Credential")
  valid_611726 = validateParameter(valid_611726, JString, required = false,
                                 default = nil)
  if valid_611726 != nil:
    section.add "X-Amz-Credential", valid_611726
  var valid_611727 = header.getOrDefault("X-Amz-Security-Token")
  valid_611727 = validateParameter(valid_611727, JString, required = false,
                                 default = nil)
  if valid_611727 != nil:
    section.add "X-Amz-Security-Token", valid_611727
  var valid_611728 = header.getOrDefault("X-Amz-Algorithm")
  valid_611728 = validateParameter(valid_611728, JString, required = false,
                                 default = nil)
  if valid_611728 != nil:
    section.add "X-Amz-Algorithm", valid_611728
  var valid_611729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611729 = validateParameter(valid_611729, JString, required = false,
                                 default = nil)
  if valid_611729 != nil:
    section.add "X-Amz-SignedHeaders", valid_611729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611730: Call_GetDeleteLifecycleHook_611716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ## 
  let valid = call_611730.validator(path, query, header, formData, body)
  let scheme = call_611730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611730.url(scheme.get, call_611730.host, call_611730.base,
                         call_611730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611730, url, valid)

proc call*(call_611731: Call_GetDeleteLifecycleHook_611716;
          AutoScalingGroupName: string; LifecycleHookName: string;
          Action: string = "DeleteLifecycleHook"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteLifecycleHook
  ## <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611732 = newJObject()
  add(query_611732, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611732, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_611732, "Action", newJString(Action))
  add(query_611732, "Version", newJString(Version))
  result = call_611731.call(nil, query_611732, nil, nil, nil)

var getDeleteLifecycleHook* = Call_GetDeleteLifecycleHook_611716(
    name: "getDeleteLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteLifecycleHook",
    validator: validate_GetDeleteLifecycleHook_611717, base: "/",
    url: url_GetDeleteLifecycleHook_611718, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteNotificationConfiguration_611768 = ref object of OpenApiRestCall_610658
proc url_PostDeleteNotificationConfiguration_611770(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteNotificationConfiguration_611769(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611771 = query.getOrDefault("Action")
  valid_611771 = validateParameter(valid_611771, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_611771 != nil:
    section.add "Action", valid_611771
  var valid_611772 = query.getOrDefault("Version")
  valid_611772 = validateParameter(valid_611772, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611772 != nil:
    section.add "Version", valid_611772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611773 = header.getOrDefault("X-Amz-Signature")
  valid_611773 = validateParameter(valid_611773, JString, required = false,
                                 default = nil)
  if valid_611773 != nil:
    section.add "X-Amz-Signature", valid_611773
  var valid_611774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611774 = validateParameter(valid_611774, JString, required = false,
                                 default = nil)
  if valid_611774 != nil:
    section.add "X-Amz-Content-Sha256", valid_611774
  var valid_611775 = header.getOrDefault("X-Amz-Date")
  valid_611775 = validateParameter(valid_611775, JString, required = false,
                                 default = nil)
  if valid_611775 != nil:
    section.add "X-Amz-Date", valid_611775
  var valid_611776 = header.getOrDefault("X-Amz-Credential")
  valid_611776 = validateParameter(valid_611776, JString, required = false,
                                 default = nil)
  if valid_611776 != nil:
    section.add "X-Amz-Credential", valid_611776
  var valid_611777 = header.getOrDefault("X-Amz-Security-Token")
  valid_611777 = validateParameter(valid_611777, JString, required = false,
                                 default = nil)
  if valid_611777 != nil:
    section.add "X-Amz-Security-Token", valid_611777
  var valid_611778 = header.getOrDefault("X-Amz-Algorithm")
  valid_611778 = validateParameter(valid_611778, JString, required = false,
                                 default = nil)
  if valid_611778 != nil:
    section.add "X-Amz-Algorithm", valid_611778
  var valid_611779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611779 = validateParameter(valid_611779, JString, required = false,
                                 default = nil)
  if valid_611779 != nil:
    section.add "X-Amz-SignedHeaders", valid_611779
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611780 = formData.getOrDefault("AutoScalingGroupName")
  valid_611780 = validateParameter(valid_611780, JString, required = true,
                                 default = nil)
  if valid_611780 != nil:
    section.add "AutoScalingGroupName", valid_611780
  var valid_611781 = formData.getOrDefault("TopicARN")
  valid_611781 = validateParameter(valid_611781, JString, required = true,
                                 default = nil)
  if valid_611781 != nil:
    section.add "TopicARN", valid_611781
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611782: Call_PostDeleteNotificationConfiguration_611768;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_611782.validator(path, query, header, formData, body)
  let scheme = call_611782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611782.url(scheme.get, call_611782.host, call_611782.base,
                         call_611782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611782, url, valid)

proc call*(call_611783: Call_PostDeleteNotificationConfiguration_611768;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_611784 = newJObject()
  var formData_611785 = newJObject()
  add(formData_611785, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611784, "Action", newJString(Action))
  add(formData_611785, "TopicARN", newJString(TopicARN))
  add(query_611784, "Version", newJString(Version))
  result = call_611783.call(nil, query_611784, nil, formData_611785, nil)

var postDeleteNotificationConfiguration* = Call_PostDeleteNotificationConfiguration_611768(
    name: "postDeleteNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_PostDeleteNotificationConfiguration_611769, base: "/",
    url: url_PostDeleteNotificationConfiguration_611770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteNotificationConfiguration_611751 = ref object of OpenApiRestCall_610658
proc url_GetDeleteNotificationConfiguration_611753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteNotificationConfiguration_611752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified notification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611754 = query.getOrDefault("AutoScalingGroupName")
  valid_611754 = validateParameter(valid_611754, JString, required = true,
                                 default = nil)
  if valid_611754 != nil:
    section.add "AutoScalingGroupName", valid_611754
  var valid_611755 = query.getOrDefault("TopicARN")
  valid_611755 = validateParameter(valid_611755, JString, required = true,
                                 default = nil)
  if valid_611755 != nil:
    section.add "TopicARN", valid_611755
  var valid_611756 = query.getOrDefault("Action")
  valid_611756 = validateParameter(valid_611756, JString, required = true, default = newJString(
      "DeleteNotificationConfiguration"))
  if valid_611756 != nil:
    section.add "Action", valid_611756
  var valid_611757 = query.getOrDefault("Version")
  valid_611757 = validateParameter(valid_611757, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611757 != nil:
    section.add "Version", valid_611757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611758 = header.getOrDefault("X-Amz-Signature")
  valid_611758 = validateParameter(valid_611758, JString, required = false,
                                 default = nil)
  if valid_611758 != nil:
    section.add "X-Amz-Signature", valid_611758
  var valid_611759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611759 = validateParameter(valid_611759, JString, required = false,
                                 default = nil)
  if valid_611759 != nil:
    section.add "X-Amz-Content-Sha256", valid_611759
  var valid_611760 = header.getOrDefault("X-Amz-Date")
  valid_611760 = validateParameter(valid_611760, JString, required = false,
                                 default = nil)
  if valid_611760 != nil:
    section.add "X-Amz-Date", valid_611760
  var valid_611761 = header.getOrDefault("X-Amz-Credential")
  valid_611761 = validateParameter(valid_611761, JString, required = false,
                                 default = nil)
  if valid_611761 != nil:
    section.add "X-Amz-Credential", valid_611761
  var valid_611762 = header.getOrDefault("X-Amz-Security-Token")
  valid_611762 = validateParameter(valid_611762, JString, required = false,
                                 default = nil)
  if valid_611762 != nil:
    section.add "X-Amz-Security-Token", valid_611762
  var valid_611763 = header.getOrDefault("X-Amz-Algorithm")
  valid_611763 = validateParameter(valid_611763, JString, required = false,
                                 default = nil)
  if valid_611763 != nil:
    section.add "X-Amz-Algorithm", valid_611763
  var valid_611764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611764 = validateParameter(valid_611764, JString, required = false,
                                 default = nil)
  if valid_611764 != nil:
    section.add "X-Amz-SignedHeaders", valid_611764
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611765: Call_GetDeleteNotificationConfiguration_611751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified notification.
  ## 
  let valid = call_611765.validator(path, query, header, formData, body)
  let scheme = call_611765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611765.url(scheme.get, call_611765.host, call_611765.base,
                         call_611765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611765, url, valid)

proc call*(call_611766: Call_GetDeleteNotificationConfiguration_611751;
          AutoScalingGroupName: string; TopicARN: string;
          Action: string = "DeleteNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getDeleteNotificationConfiguration
  ## Deletes the specified notification.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611767 = newJObject()
  add(query_611767, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611767, "TopicARN", newJString(TopicARN))
  add(query_611767, "Action", newJString(Action))
  add(query_611767, "Version", newJString(Version))
  result = call_611766.call(nil, query_611767, nil, nil, nil)

var getDeleteNotificationConfiguration* = Call_GetDeleteNotificationConfiguration_611751(
    name: "getDeleteNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteNotificationConfiguration",
    validator: validate_GetDeleteNotificationConfiguration_611752, base: "/",
    url: url_GetDeleteNotificationConfiguration_611753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_611803 = ref object of OpenApiRestCall_610658
proc url_PostDeletePolicy_611805(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_611804(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611806 = query.getOrDefault("Action")
  valid_611806 = validateParameter(valid_611806, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_611806 != nil:
    section.add "Action", valid_611806
  var valid_611807 = query.getOrDefault("Version")
  valid_611807 = validateParameter(valid_611807, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611807 != nil:
    section.add "Version", valid_611807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611808 = header.getOrDefault("X-Amz-Signature")
  valid_611808 = validateParameter(valid_611808, JString, required = false,
                                 default = nil)
  if valid_611808 != nil:
    section.add "X-Amz-Signature", valid_611808
  var valid_611809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611809 = validateParameter(valid_611809, JString, required = false,
                                 default = nil)
  if valid_611809 != nil:
    section.add "X-Amz-Content-Sha256", valid_611809
  var valid_611810 = header.getOrDefault("X-Amz-Date")
  valid_611810 = validateParameter(valid_611810, JString, required = false,
                                 default = nil)
  if valid_611810 != nil:
    section.add "X-Amz-Date", valid_611810
  var valid_611811 = header.getOrDefault("X-Amz-Credential")
  valid_611811 = validateParameter(valid_611811, JString, required = false,
                                 default = nil)
  if valid_611811 != nil:
    section.add "X-Amz-Credential", valid_611811
  var valid_611812 = header.getOrDefault("X-Amz-Security-Token")
  valid_611812 = validateParameter(valid_611812, JString, required = false,
                                 default = nil)
  if valid_611812 != nil:
    section.add "X-Amz-Security-Token", valid_611812
  var valid_611813 = header.getOrDefault("X-Amz-Algorithm")
  valid_611813 = validateParameter(valid_611813, JString, required = false,
                                 default = nil)
  if valid_611813 != nil:
    section.add "X-Amz-Algorithm", valid_611813
  var valid_611814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611814 = validateParameter(valid_611814, JString, required = false,
                                 default = nil)
  if valid_611814 != nil:
    section.add "X-Amz-SignedHeaders", valid_611814
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  section = newJObject()
  var valid_611815 = formData.getOrDefault("AutoScalingGroupName")
  valid_611815 = validateParameter(valid_611815, JString, required = false,
                                 default = nil)
  if valid_611815 != nil:
    section.add "AutoScalingGroupName", valid_611815
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_611816 = formData.getOrDefault("PolicyName")
  valid_611816 = validateParameter(valid_611816, JString, required = true,
                                 default = nil)
  if valid_611816 != nil:
    section.add "PolicyName", valid_611816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611817: Call_PostDeletePolicy_611803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611817.validator(path, query, header, formData, body)
  let scheme = call_611817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611817.url(scheme.get, call_611817.host, call_611817.base,
                         call_611817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611817, url, valid)

proc call*(call_611818: Call_PostDeletePolicy_611803; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  var query_611819 = newJObject()
  var formData_611820 = newJObject()
  add(formData_611820, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611819, "Action", newJString(Action))
  add(query_611819, "Version", newJString(Version))
  add(formData_611820, "PolicyName", newJString(PolicyName))
  result = call_611818.call(nil, query_611819, nil, formData_611820, nil)

var postDeletePolicy* = Call_PostDeletePolicy_611803(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_611804,
    base: "/", url: url_PostDeletePolicy_611805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_611786 = ref object of OpenApiRestCall_610658
proc url_GetDeletePolicy_611788(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_611787(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_611789 = query.getOrDefault("PolicyName")
  valid_611789 = validateParameter(valid_611789, JString, required = true,
                                 default = nil)
  if valid_611789 != nil:
    section.add "PolicyName", valid_611789
  var valid_611790 = query.getOrDefault("AutoScalingGroupName")
  valid_611790 = validateParameter(valid_611790, JString, required = false,
                                 default = nil)
  if valid_611790 != nil:
    section.add "AutoScalingGroupName", valid_611790
  var valid_611791 = query.getOrDefault("Action")
  valid_611791 = validateParameter(valid_611791, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_611791 != nil:
    section.add "Action", valid_611791
  var valid_611792 = query.getOrDefault("Version")
  valid_611792 = validateParameter(valid_611792, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611792 != nil:
    section.add "Version", valid_611792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611793 = header.getOrDefault("X-Amz-Signature")
  valid_611793 = validateParameter(valid_611793, JString, required = false,
                                 default = nil)
  if valid_611793 != nil:
    section.add "X-Amz-Signature", valid_611793
  var valid_611794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611794 = validateParameter(valid_611794, JString, required = false,
                                 default = nil)
  if valid_611794 != nil:
    section.add "X-Amz-Content-Sha256", valid_611794
  var valid_611795 = header.getOrDefault("X-Amz-Date")
  valid_611795 = validateParameter(valid_611795, JString, required = false,
                                 default = nil)
  if valid_611795 != nil:
    section.add "X-Amz-Date", valid_611795
  var valid_611796 = header.getOrDefault("X-Amz-Credential")
  valid_611796 = validateParameter(valid_611796, JString, required = false,
                                 default = nil)
  if valid_611796 != nil:
    section.add "X-Amz-Credential", valid_611796
  var valid_611797 = header.getOrDefault("X-Amz-Security-Token")
  valid_611797 = validateParameter(valid_611797, JString, required = false,
                                 default = nil)
  if valid_611797 != nil:
    section.add "X-Amz-Security-Token", valid_611797
  var valid_611798 = header.getOrDefault("X-Amz-Algorithm")
  valid_611798 = validateParameter(valid_611798, JString, required = false,
                                 default = nil)
  if valid_611798 != nil:
    section.add "X-Amz-Algorithm", valid_611798
  var valid_611799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611799 = validateParameter(valid_611799, JString, required = false,
                                 default = nil)
  if valid_611799 != nil:
    section.add "X-Amz-SignedHeaders", valid_611799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611800: Call_GetDeletePolicy_611786; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611800.validator(path, query, header, formData, body)
  let scheme = call_611800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611800.url(scheme.get, call_611800.host, call_611800.base,
                         call_611800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611800, url, valid)

proc call*(call_611801: Call_GetDeletePolicy_611786; PolicyName: string;
          AutoScalingGroupName: string = ""; Action: string = "DeletePolicy";
          Version: string = "2011-01-01"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a Scaling Policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : The name or Amazon Resource Name (ARN) of the policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611802 = newJObject()
  add(query_611802, "PolicyName", newJString(PolicyName))
  add(query_611802, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611802, "Action", newJString(Action))
  add(query_611802, "Version", newJString(Version))
  result = call_611801.call(nil, query_611802, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_611786(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_611787,
    base: "/", url: url_GetDeletePolicy_611788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_611838 = ref object of OpenApiRestCall_610658
proc url_PostDeleteScheduledAction_611840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteScheduledAction_611839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611841 = query.getOrDefault("Action")
  valid_611841 = validateParameter(valid_611841, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_611841 != nil:
    section.add "Action", valid_611841
  var valid_611842 = query.getOrDefault("Version")
  valid_611842 = validateParameter(valid_611842, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611842 != nil:
    section.add "Version", valid_611842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611843 = header.getOrDefault("X-Amz-Signature")
  valid_611843 = validateParameter(valid_611843, JString, required = false,
                                 default = nil)
  if valid_611843 != nil:
    section.add "X-Amz-Signature", valid_611843
  var valid_611844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611844 = validateParameter(valid_611844, JString, required = false,
                                 default = nil)
  if valid_611844 != nil:
    section.add "X-Amz-Content-Sha256", valid_611844
  var valid_611845 = header.getOrDefault("X-Amz-Date")
  valid_611845 = validateParameter(valid_611845, JString, required = false,
                                 default = nil)
  if valid_611845 != nil:
    section.add "X-Amz-Date", valid_611845
  var valid_611846 = header.getOrDefault("X-Amz-Credential")
  valid_611846 = validateParameter(valid_611846, JString, required = false,
                                 default = nil)
  if valid_611846 != nil:
    section.add "X-Amz-Credential", valid_611846
  var valid_611847 = header.getOrDefault("X-Amz-Security-Token")
  valid_611847 = validateParameter(valid_611847, JString, required = false,
                                 default = nil)
  if valid_611847 != nil:
    section.add "X-Amz-Security-Token", valid_611847
  var valid_611848 = header.getOrDefault("X-Amz-Algorithm")
  valid_611848 = validateParameter(valid_611848, JString, required = false,
                                 default = nil)
  if valid_611848 != nil:
    section.add "X-Amz-Algorithm", valid_611848
  var valid_611849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611849 = validateParameter(valid_611849, JString, required = false,
                                 default = nil)
  if valid_611849 != nil:
    section.add "X-Amz-SignedHeaders", valid_611849
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_611850 = formData.getOrDefault("AutoScalingGroupName")
  valid_611850 = validateParameter(valid_611850, JString, required = true,
                                 default = nil)
  if valid_611850 != nil:
    section.add "AutoScalingGroupName", valid_611850
  var valid_611851 = formData.getOrDefault("ScheduledActionName")
  valid_611851 = validateParameter(valid_611851, JString, required = true,
                                 default = nil)
  if valid_611851 != nil:
    section.add "ScheduledActionName", valid_611851
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611852: Call_PostDeleteScheduledAction_611838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_611852.validator(path, query, header, formData, body)
  let scheme = call_611852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611852.url(scheme.get, call_611852.host, call_611852.base,
                         call_611852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611852, url, valid)

proc call*(call_611853: Call_PostDeleteScheduledAction_611838;
          AutoScalingGroupName: string; ScheduledActionName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611854 = newJObject()
  var formData_611855 = newJObject()
  add(formData_611855, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_611855, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_611854, "Action", newJString(Action))
  add(query_611854, "Version", newJString(Version))
  result = call_611853.call(nil, query_611854, nil, formData_611855, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_611838(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_611839, base: "/",
    url: url_PostDeleteScheduledAction_611840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_611821 = ref object of OpenApiRestCall_610658
proc url_GetDeleteScheduledAction_611823(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteScheduledAction_611822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified scheduled action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_611824 = query.getOrDefault("ScheduledActionName")
  valid_611824 = validateParameter(valid_611824, JString, required = true,
                                 default = nil)
  if valid_611824 != nil:
    section.add "ScheduledActionName", valid_611824
  var valid_611825 = query.getOrDefault("AutoScalingGroupName")
  valid_611825 = validateParameter(valid_611825, JString, required = true,
                                 default = nil)
  if valid_611825 != nil:
    section.add "AutoScalingGroupName", valid_611825
  var valid_611826 = query.getOrDefault("Action")
  valid_611826 = validateParameter(valid_611826, JString, required = true,
                                 default = newJString("DeleteScheduledAction"))
  if valid_611826 != nil:
    section.add "Action", valid_611826
  var valid_611827 = query.getOrDefault("Version")
  valid_611827 = validateParameter(valid_611827, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611827 != nil:
    section.add "Version", valid_611827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611828 = header.getOrDefault("X-Amz-Signature")
  valid_611828 = validateParameter(valid_611828, JString, required = false,
                                 default = nil)
  if valid_611828 != nil:
    section.add "X-Amz-Signature", valid_611828
  var valid_611829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611829 = validateParameter(valid_611829, JString, required = false,
                                 default = nil)
  if valid_611829 != nil:
    section.add "X-Amz-Content-Sha256", valid_611829
  var valid_611830 = header.getOrDefault("X-Amz-Date")
  valid_611830 = validateParameter(valid_611830, JString, required = false,
                                 default = nil)
  if valid_611830 != nil:
    section.add "X-Amz-Date", valid_611830
  var valid_611831 = header.getOrDefault("X-Amz-Credential")
  valid_611831 = validateParameter(valid_611831, JString, required = false,
                                 default = nil)
  if valid_611831 != nil:
    section.add "X-Amz-Credential", valid_611831
  var valid_611832 = header.getOrDefault("X-Amz-Security-Token")
  valid_611832 = validateParameter(valid_611832, JString, required = false,
                                 default = nil)
  if valid_611832 != nil:
    section.add "X-Amz-Security-Token", valid_611832
  var valid_611833 = header.getOrDefault("X-Amz-Algorithm")
  valid_611833 = validateParameter(valid_611833, JString, required = false,
                                 default = nil)
  if valid_611833 != nil:
    section.add "X-Amz-Algorithm", valid_611833
  var valid_611834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611834 = validateParameter(valid_611834, JString, required = false,
                                 default = nil)
  if valid_611834 != nil:
    section.add "X-Amz-SignedHeaders", valid_611834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611835: Call_GetDeleteScheduledAction_611821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified scheduled action.
  ## 
  let valid = call_611835.validator(path, query, header, formData, body)
  let scheme = call_611835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611835.url(scheme.get, call_611835.host, call_611835.base,
                         call_611835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611835, url, valid)

proc call*(call_611836: Call_GetDeleteScheduledAction_611821;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Action: string = "DeleteScheduledAction"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes the specified scheduled action.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the action to delete.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611837 = newJObject()
  add(query_611837, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_611837, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_611837, "Action", newJString(Action))
  add(query_611837, "Version", newJString(Version))
  result = call_611836.call(nil, query_611837, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_611821(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_611822, base: "/",
    url: url_GetDeleteScheduledAction_611823, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_611872 = ref object of OpenApiRestCall_610658
proc url_PostDeleteTags_611874(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTags_611873(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611875 = query.getOrDefault("Action")
  valid_611875 = validateParameter(valid_611875, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_611875 != nil:
    section.add "Action", valid_611875
  var valid_611876 = query.getOrDefault("Version")
  valid_611876 = validateParameter(valid_611876, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611876 != nil:
    section.add "Version", valid_611876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611877 = header.getOrDefault("X-Amz-Signature")
  valid_611877 = validateParameter(valid_611877, JString, required = false,
                                 default = nil)
  if valid_611877 != nil:
    section.add "X-Amz-Signature", valid_611877
  var valid_611878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611878 = validateParameter(valid_611878, JString, required = false,
                                 default = nil)
  if valid_611878 != nil:
    section.add "X-Amz-Content-Sha256", valid_611878
  var valid_611879 = header.getOrDefault("X-Amz-Date")
  valid_611879 = validateParameter(valid_611879, JString, required = false,
                                 default = nil)
  if valid_611879 != nil:
    section.add "X-Amz-Date", valid_611879
  var valid_611880 = header.getOrDefault("X-Amz-Credential")
  valid_611880 = validateParameter(valid_611880, JString, required = false,
                                 default = nil)
  if valid_611880 != nil:
    section.add "X-Amz-Credential", valid_611880
  var valid_611881 = header.getOrDefault("X-Amz-Security-Token")
  valid_611881 = validateParameter(valid_611881, JString, required = false,
                                 default = nil)
  if valid_611881 != nil:
    section.add "X-Amz-Security-Token", valid_611881
  var valid_611882 = header.getOrDefault("X-Amz-Algorithm")
  valid_611882 = validateParameter(valid_611882, JString, required = false,
                                 default = nil)
  if valid_611882 != nil:
    section.add "X-Amz-Algorithm", valid_611882
  var valid_611883 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611883 = validateParameter(valid_611883, JString, required = false,
                                 default = nil)
  if valid_611883 != nil:
    section.add "X-Amz-SignedHeaders", valid_611883
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_611884 = formData.getOrDefault("Tags")
  valid_611884 = validateParameter(valid_611884, JArray, required = true, default = nil)
  if valid_611884 != nil:
    section.add "Tags", valid_611884
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611885: Call_PostDeleteTags_611872; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_611885.validator(path, query, header, formData, body)
  let scheme = call_611885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611885.url(scheme.get, call_611885.host, call_611885.base,
                         call_611885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611885, url, valid)

proc call*(call_611886: Call_PostDeleteTags_611872; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## postDeleteTags
  ## Deletes the specified tags.
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Version: string (required)
  var query_611887 = newJObject()
  var formData_611888 = newJObject()
  add(query_611887, "Action", newJString(Action))
  if Tags != nil:
    formData_611888.add "Tags", Tags
  add(query_611887, "Version", newJString(Version))
  result = call_611886.call(nil, query_611887, nil, formData_611888, nil)

var postDeleteTags* = Call_PostDeleteTags_611872(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_611873,
    base: "/", url: url_PostDeleteTags_611874, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_611856 = ref object of OpenApiRestCall_610658
proc url_GetDeleteTags_611858(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTags_611857(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_611859 = query.getOrDefault("Tags")
  valid_611859 = validateParameter(valid_611859, JArray, required = true, default = nil)
  if valid_611859 != nil:
    section.add "Tags", valid_611859
  var valid_611860 = query.getOrDefault("Action")
  valid_611860 = validateParameter(valid_611860, JString, required = true,
                                 default = newJString("DeleteTags"))
  if valid_611860 != nil:
    section.add "Action", valid_611860
  var valid_611861 = query.getOrDefault("Version")
  valid_611861 = validateParameter(valid_611861, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611861 != nil:
    section.add "Version", valid_611861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611862 = header.getOrDefault("X-Amz-Signature")
  valid_611862 = validateParameter(valid_611862, JString, required = false,
                                 default = nil)
  if valid_611862 != nil:
    section.add "X-Amz-Signature", valid_611862
  var valid_611863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611863 = validateParameter(valid_611863, JString, required = false,
                                 default = nil)
  if valid_611863 != nil:
    section.add "X-Amz-Content-Sha256", valid_611863
  var valid_611864 = header.getOrDefault("X-Amz-Date")
  valid_611864 = validateParameter(valid_611864, JString, required = false,
                                 default = nil)
  if valid_611864 != nil:
    section.add "X-Amz-Date", valid_611864
  var valid_611865 = header.getOrDefault("X-Amz-Credential")
  valid_611865 = validateParameter(valid_611865, JString, required = false,
                                 default = nil)
  if valid_611865 != nil:
    section.add "X-Amz-Credential", valid_611865
  var valid_611866 = header.getOrDefault("X-Amz-Security-Token")
  valid_611866 = validateParameter(valid_611866, JString, required = false,
                                 default = nil)
  if valid_611866 != nil:
    section.add "X-Amz-Security-Token", valid_611866
  var valid_611867 = header.getOrDefault("X-Amz-Algorithm")
  valid_611867 = validateParameter(valid_611867, JString, required = false,
                                 default = nil)
  if valid_611867 != nil:
    section.add "X-Amz-Algorithm", valid_611867
  var valid_611868 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611868 = validateParameter(valid_611868, JString, required = false,
                                 default = nil)
  if valid_611868 != nil:
    section.add "X-Amz-SignedHeaders", valid_611868
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611869: Call_GetDeleteTags_611856; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified tags.
  ## 
  let valid = call_611869.validator(path, query, header, formData, body)
  let scheme = call_611869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611869.url(scheme.get, call_611869.host, call_611869.base,
                         call_611869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611869, url, valid)

proc call*(call_611870: Call_GetDeleteTags_611856; Tags: JsonNode;
          Action: string = "DeleteTags"; Version: string = "2011-01-01"): Recallable =
  ## getDeleteTags
  ## Deletes the specified tags.
  ##   Tags: JArray (required)
  ##       : One or more tags.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611871 = newJObject()
  if Tags != nil:
    query_611871.add "Tags", Tags
  add(query_611871, "Action", newJString(Action))
  add(query_611871, "Version", newJString(Version))
  result = call_611870.call(nil, query_611871, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_611856(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_611857,
    base: "/", url: url_GetDeleteTags_611858, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountLimits_611904 = ref object of OpenApiRestCall_610658
proc url_PostDescribeAccountLimits_611906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountLimits_611905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611907 = query.getOrDefault("Action")
  valid_611907 = validateParameter(valid_611907, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_611907 != nil:
    section.add "Action", valid_611907
  var valid_611908 = query.getOrDefault("Version")
  valid_611908 = validateParameter(valid_611908, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611908 != nil:
    section.add "Version", valid_611908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611909 = header.getOrDefault("X-Amz-Signature")
  valid_611909 = validateParameter(valid_611909, JString, required = false,
                                 default = nil)
  if valid_611909 != nil:
    section.add "X-Amz-Signature", valid_611909
  var valid_611910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611910 = validateParameter(valid_611910, JString, required = false,
                                 default = nil)
  if valid_611910 != nil:
    section.add "X-Amz-Content-Sha256", valid_611910
  var valid_611911 = header.getOrDefault("X-Amz-Date")
  valid_611911 = validateParameter(valid_611911, JString, required = false,
                                 default = nil)
  if valid_611911 != nil:
    section.add "X-Amz-Date", valid_611911
  var valid_611912 = header.getOrDefault("X-Amz-Credential")
  valid_611912 = validateParameter(valid_611912, JString, required = false,
                                 default = nil)
  if valid_611912 != nil:
    section.add "X-Amz-Credential", valid_611912
  var valid_611913 = header.getOrDefault("X-Amz-Security-Token")
  valid_611913 = validateParameter(valid_611913, JString, required = false,
                                 default = nil)
  if valid_611913 != nil:
    section.add "X-Amz-Security-Token", valid_611913
  var valid_611914 = header.getOrDefault("X-Amz-Algorithm")
  valid_611914 = validateParameter(valid_611914, JString, required = false,
                                 default = nil)
  if valid_611914 != nil:
    section.add "X-Amz-Algorithm", valid_611914
  var valid_611915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611915 = validateParameter(valid_611915, JString, required = false,
                                 default = nil)
  if valid_611915 != nil:
    section.add "X-Amz-SignedHeaders", valid_611915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611916: Call_PostDescribeAccountLimits_611904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611916.validator(path, query, header, formData, body)
  let scheme = call_611916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611916.url(scheme.get, call_611916.host, call_611916.base,
                         call_611916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611916, url, valid)

proc call*(call_611917: Call_PostDescribeAccountLimits_611904;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611918 = newJObject()
  add(query_611918, "Action", newJString(Action))
  add(query_611918, "Version", newJString(Version))
  result = call_611917.call(nil, query_611918, nil, nil, nil)

var postDescribeAccountLimits* = Call_PostDescribeAccountLimits_611904(
    name: "postDescribeAccountLimits", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_PostDescribeAccountLimits_611905, base: "/",
    url: url_PostDescribeAccountLimits_611906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountLimits_611889 = ref object of OpenApiRestCall_610658
proc url_GetDescribeAccountLimits_611891(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountLimits_611890(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611892 = query.getOrDefault("Action")
  valid_611892 = validateParameter(valid_611892, JString, required = true,
                                 default = newJString("DescribeAccountLimits"))
  if valid_611892 != nil:
    section.add "Action", valid_611892
  var valid_611893 = query.getOrDefault("Version")
  valid_611893 = validateParameter(valid_611893, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611893 != nil:
    section.add "Version", valid_611893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611894 = header.getOrDefault("X-Amz-Signature")
  valid_611894 = validateParameter(valid_611894, JString, required = false,
                                 default = nil)
  if valid_611894 != nil:
    section.add "X-Amz-Signature", valid_611894
  var valid_611895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611895 = validateParameter(valid_611895, JString, required = false,
                                 default = nil)
  if valid_611895 != nil:
    section.add "X-Amz-Content-Sha256", valid_611895
  var valid_611896 = header.getOrDefault("X-Amz-Date")
  valid_611896 = validateParameter(valid_611896, JString, required = false,
                                 default = nil)
  if valid_611896 != nil:
    section.add "X-Amz-Date", valid_611896
  var valid_611897 = header.getOrDefault("X-Amz-Credential")
  valid_611897 = validateParameter(valid_611897, JString, required = false,
                                 default = nil)
  if valid_611897 != nil:
    section.add "X-Amz-Credential", valid_611897
  var valid_611898 = header.getOrDefault("X-Amz-Security-Token")
  valid_611898 = validateParameter(valid_611898, JString, required = false,
                                 default = nil)
  if valid_611898 != nil:
    section.add "X-Amz-Security-Token", valid_611898
  var valid_611899 = header.getOrDefault("X-Amz-Algorithm")
  valid_611899 = validateParameter(valid_611899, JString, required = false,
                                 default = nil)
  if valid_611899 != nil:
    section.add "X-Amz-Algorithm", valid_611899
  var valid_611900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611900 = validateParameter(valid_611900, JString, required = false,
                                 default = nil)
  if valid_611900 != nil:
    section.add "X-Amz-SignedHeaders", valid_611900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611901: Call_GetDescribeAccountLimits_611889; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_611901.validator(path, query, header, formData, body)
  let scheme = call_611901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611901.url(scheme.get, call_611901.host, call_611901.base,
                         call_611901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611901, url, valid)

proc call*(call_611902: Call_GetDescribeAccountLimits_611889;
          Action: string = "DescribeAccountLimits"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAccountLimits
  ## <p>Describes the current Amazon EC2 Auto Scaling resource limits for your AWS account.</p> <p>For information about requesting an increase in these limits, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-account-limits.html">Amazon EC2 Auto Scaling Limits</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611903 = newJObject()
  add(query_611903, "Action", newJString(Action))
  add(query_611903, "Version", newJString(Version))
  result = call_611902.call(nil, query_611903, nil, nil, nil)

var getDescribeAccountLimits* = Call_GetDescribeAccountLimits_611889(
    name: "getDescribeAccountLimits", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAccountLimits",
    validator: validate_GetDescribeAccountLimits_611890, base: "/",
    url: url_GetDescribeAccountLimits_611891, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAdjustmentTypes_611934 = ref object of OpenApiRestCall_610658
proc url_PostDescribeAdjustmentTypes_611936(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAdjustmentTypes_611935(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611937 = query.getOrDefault("Action")
  valid_611937 = validateParameter(valid_611937, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_611937 != nil:
    section.add "Action", valid_611937
  var valid_611938 = query.getOrDefault("Version")
  valid_611938 = validateParameter(valid_611938, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611938 != nil:
    section.add "Version", valid_611938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611939 = header.getOrDefault("X-Amz-Signature")
  valid_611939 = validateParameter(valid_611939, JString, required = false,
                                 default = nil)
  if valid_611939 != nil:
    section.add "X-Amz-Signature", valid_611939
  var valid_611940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611940 = validateParameter(valid_611940, JString, required = false,
                                 default = nil)
  if valid_611940 != nil:
    section.add "X-Amz-Content-Sha256", valid_611940
  var valid_611941 = header.getOrDefault("X-Amz-Date")
  valid_611941 = validateParameter(valid_611941, JString, required = false,
                                 default = nil)
  if valid_611941 != nil:
    section.add "X-Amz-Date", valid_611941
  var valid_611942 = header.getOrDefault("X-Amz-Credential")
  valid_611942 = validateParameter(valid_611942, JString, required = false,
                                 default = nil)
  if valid_611942 != nil:
    section.add "X-Amz-Credential", valid_611942
  var valid_611943 = header.getOrDefault("X-Amz-Security-Token")
  valid_611943 = validateParameter(valid_611943, JString, required = false,
                                 default = nil)
  if valid_611943 != nil:
    section.add "X-Amz-Security-Token", valid_611943
  var valid_611944 = header.getOrDefault("X-Amz-Algorithm")
  valid_611944 = validateParameter(valid_611944, JString, required = false,
                                 default = nil)
  if valid_611944 != nil:
    section.add "X-Amz-Algorithm", valid_611944
  var valid_611945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611945 = validateParameter(valid_611945, JString, required = false,
                                 default = nil)
  if valid_611945 != nil:
    section.add "X-Amz-SignedHeaders", valid_611945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611946: Call_PostDescribeAdjustmentTypes_611934; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_611946.validator(path, query, header, formData, body)
  let scheme = call_611946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611946.url(scheme.get, call_611946.host, call_611946.base,
                         call_611946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611946, url, valid)

proc call*(call_611947: Call_PostDescribeAdjustmentTypes_611934;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611948 = newJObject()
  add(query_611948, "Action", newJString(Action))
  add(query_611948, "Version", newJString(Version))
  result = call_611947.call(nil, query_611948, nil, nil, nil)

var postDescribeAdjustmentTypes* = Call_PostDescribeAdjustmentTypes_611934(
    name: "postDescribeAdjustmentTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_PostDescribeAdjustmentTypes_611935, base: "/",
    url: url_PostDescribeAdjustmentTypes_611936,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAdjustmentTypes_611919 = ref object of OpenApiRestCall_610658
proc url_GetDescribeAdjustmentTypes_611921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAdjustmentTypes_611920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611922 = query.getOrDefault("Action")
  valid_611922 = validateParameter(valid_611922, JString, required = true, default = newJString(
      "DescribeAdjustmentTypes"))
  if valid_611922 != nil:
    section.add "Action", valid_611922
  var valid_611923 = query.getOrDefault("Version")
  valid_611923 = validateParameter(valid_611923, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611923 != nil:
    section.add "Version", valid_611923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611924 = header.getOrDefault("X-Amz-Signature")
  valid_611924 = validateParameter(valid_611924, JString, required = false,
                                 default = nil)
  if valid_611924 != nil:
    section.add "X-Amz-Signature", valid_611924
  var valid_611925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611925 = validateParameter(valid_611925, JString, required = false,
                                 default = nil)
  if valid_611925 != nil:
    section.add "X-Amz-Content-Sha256", valid_611925
  var valid_611926 = header.getOrDefault("X-Amz-Date")
  valid_611926 = validateParameter(valid_611926, JString, required = false,
                                 default = nil)
  if valid_611926 != nil:
    section.add "X-Amz-Date", valid_611926
  var valid_611927 = header.getOrDefault("X-Amz-Credential")
  valid_611927 = validateParameter(valid_611927, JString, required = false,
                                 default = nil)
  if valid_611927 != nil:
    section.add "X-Amz-Credential", valid_611927
  var valid_611928 = header.getOrDefault("X-Amz-Security-Token")
  valid_611928 = validateParameter(valid_611928, JString, required = false,
                                 default = nil)
  if valid_611928 != nil:
    section.add "X-Amz-Security-Token", valid_611928
  var valid_611929 = header.getOrDefault("X-Amz-Algorithm")
  valid_611929 = validateParameter(valid_611929, JString, required = false,
                                 default = nil)
  if valid_611929 != nil:
    section.add "X-Amz-Algorithm", valid_611929
  var valid_611930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611930 = validateParameter(valid_611930, JString, required = false,
                                 default = nil)
  if valid_611930 != nil:
    section.add "X-Amz-SignedHeaders", valid_611930
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611931: Call_GetDescribeAdjustmentTypes_611919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ## 
  let valid = call_611931.validator(path, query, header, formData, body)
  let scheme = call_611931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611931.url(scheme.get, call_611931.host, call_611931.base,
                         call_611931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611931, url, valid)

proc call*(call_611932: Call_GetDescribeAdjustmentTypes_611919;
          Action: string = "DescribeAdjustmentTypes"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeAdjustmentTypes
  ## Describes the policy adjustment types for use with <a>PutScalingPolicy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611933 = newJObject()
  add(query_611933, "Action", newJString(Action))
  add(query_611933, "Version", newJString(Version))
  result = call_611932.call(nil, query_611933, nil, nil, nil)

var getDescribeAdjustmentTypes* = Call_GetDescribeAdjustmentTypes_611919(
    name: "getDescribeAdjustmentTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeAdjustmentTypes",
    validator: validate_GetDescribeAdjustmentTypes_611920, base: "/",
    url: url_GetDescribeAdjustmentTypes_611921,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingGroups_611967 = ref object of OpenApiRestCall_610658
proc url_PostDescribeAutoScalingGroups_611969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingGroups_611968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611970 = query.getOrDefault("Action")
  valid_611970 = validateParameter(valid_611970, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_611970 != nil:
    section.add "Action", valid_611970
  var valid_611971 = query.getOrDefault("Version")
  valid_611971 = validateParameter(valid_611971, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611971 != nil:
    section.add "Version", valid_611971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611972 = header.getOrDefault("X-Amz-Signature")
  valid_611972 = validateParameter(valid_611972, JString, required = false,
                                 default = nil)
  if valid_611972 != nil:
    section.add "X-Amz-Signature", valid_611972
  var valid_611973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611973 = validateParameter(valid_611973, JString, required = false,
                                 default = nil)
  if valid_611973 != nil:
    section.add "X-Amz-Content-Sha256", valid_611973
  var valid_611974 = header.getOrDefault("X-Amz-Date")
  valid_611974 = validateParameter(valid_611974, JString, required = false,
                                 default = nil)
  if valid_611974 != nil:
    section.add "X-Amz-Date", valid_611974
  var valid_611975 = header.getOrDefault("X-Amz-Credential")
  valid_611975 = validateParameter(valid_611975, JString, required = false,
                                 default = nil)
  if valid_611975 != nil:
    section.add "X-Amz-Credential", valid_611975
  var valid_611976 = header.getOrDefault("X-Amz-Security-Token")
  valid_611976 = validateParameter(valid_611976, JString, required = false,
                                 default = nil)
  if valid_611976 != nil:
    section.add "X-Amz-Security-Token", valid_611976
  var valid_611977 = header.getOrDefault("X-Amz-Algorithm")
  valid_611977 = validateParameter(valid_611977, JString, required = false,
                                 default = nil)
  if valid_611977 != nil:
    section.add "X-Amz-Algorithm", valid_611977
  var valid_611978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611978 = validateParameter(valid_611978, JString, required = false,
                                 default = nil)
  if valid_611978 != nil:
    section.add "X-Amz-SignedHeaders", valid_611978
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  section = newJObject()
  var valid_611979 = formData.getOrDefault("NextToken")
  valid_611979 = validateParameter(valid_611979, JString, required = false,
                                 default = nil)
  if valid_611979 != nil:
    section.add "NextToken", valid_611979
  var valid_611980 = formData.getOrDefault("MaxRecords")
  valid_611980 = validateParameter(valid_611980, JInt, required = false, default = nil)
  if valid_611980 != nil:
    section.add "MaxRecords", valid_611980
  var valid_611981 = formData.getOrDefault("AutoScalingGroupNames")
  valid_611981 = validateParameter(valid_611981, JArray, required = false,
                                 default = nil)
  if valid_611981 != nil:
    section.add "AutoScalingGroupNames", valid_611981
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611982: Call_PostDescribeAutoScalingGroups_611967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_611982.validator(path, query, header, formData, body)
  let scheme = call_611982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611982.url(scheme.get, call_611982.host, call_611982.base,
                         call_611982.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611982, url, valid)

proc call*(call_611983: Call_PostDescribeAutoScalingGroups_611967;
          NextToken: string = ""; MaxRecords: int = 0;
          AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeAutoScalingGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611984 = newJObject()
  var formData_611985 = newJObject()
  add(formData_611985, "NextToken", newJString(NextToken))
  add(formData_611985, "MaxRecords", newJInt(MaxRecords))
  if AutoScalingGroupNames != nil:
    formData_611985.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_611984, "Action", newJString(Action))
  add(query_611984, "Version", newJString(Version))
  result = call_611983.call(nil, query_611984, nil, formData_611985, nil)

var postDescribeAutoScalingGroups* = Call_PostDescribeAutoScalingGroups_611967(
    name: "postDescribeAutoScalingGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_PostDescribeAutoScalingGroups_611968, base: "/",
    url: url_PostDescribeAutoScalingGroups_611969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingGroups_611949 = ref object of OpenApiRestCall_610658
proc url_GetDescribeAutoScalingGroups_611951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingGroups_611950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_611952 = query.getOrDefault("NextToken")
  valid_611952 = validateParameter(valid_611952, JString, required = false,
                                 default = nil)
  if valid_611952 != nil:
    section.add "NextToken", valid_611952
  var valid_611953 = query.getOrDefault("AutoScalingGroupNames")
  valid_611953 = validateParameter(valid_611953, JArray, required = false,
                                 default = nil)
  if valid_611953 != nil:
    section.add "AutoScalingGroupNames", valid_611953
  var valid_611954 = query.getOrDefault("Action")
  valid_611954 = validateParameter(valid_611954, JString, required = true, default = newJString(
      "DescribeAutoScalingGroups"))
  if valid_611954 != nil:
    section.add "Action", valid_611954
  var valid_611955 = query.getOrDefault("Version")
  valid_611955 = validateParameter(valid_611955, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611955 != nil:
    section.add "Version", valid_611955
  var valid_611956 = query.getOrDefault("MaxRecords")
  valid_611956 = validateParameter(valid_611956, JInt, required = false, default = nil)
  if valid_611956 != nil:
    section.add "MaxRecords", valid_611956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611957 = header.getOrDefault("X-Amz-Signature")
  valid_611957 = validateParameter(valid_611957, JString, required = false,
                                 default = nil)
  if valid_611957 != nil:
    section.add "X-Amz-Signature", valid_611957
  var valid_611958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611958 = validateParameter(valid_611958, JString, required = false,
                                 default = nil)
  if valid_611958 != nil:
    section.add "X-Amz-Content-Sha256", valid_611958
  var valid_611959 = header.getOrDefault("X-Amz-Date")
  valid_611959 = validateParameter(valid_611959, JString, required = false,
                                 default = nil)
  if valid_611959 != nil:
    section.add "X-Amz-Date", valid_611959
  var valid_611960 = header.getOrDefault("X-Amz-Credential")
  valid_611960 = validateParameter(valid_611960, JString, required = false,
                                 default = nil)
  if valid_611960 != nil:
    section.add "X-Amz-Credential", valid_611960
  var valid_611961 = header.getOrDefault("X-Amz-Security-Token")
  valid_611961 = validateParameter(valid_611961, JString, required = false,
                                 default = nil)
  if valid_611961 != nil:
    section.add "X-Amz-Security-Token", valid_611961
  var valid_611962 = header.getOrDefault("X-Amz-Algorithm")
  valid_611962 = validateParameter(valid_611962, JString, required = false,
                                 default = nil)
  if valid_611962 != nil:
    section.add "X-Amz-Algorithm", valid_611962
  var valid_611963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611963 = validateParameter(valid_611963, JString, required = false,
                                 default = nil)
  if valid_611963 != nil:
    section.add "X-Amz-SignedHeaders", valid_611963
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611964: Call_GetDescribeAutoScalingGroups_611949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling groups.
  ## 
  let valid = call_611964.validator(path, query, header, formData, body)
  let scheme = call_611964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611964.url(scheme.get, call_611964.host, call_611964.base,
                         call_611964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611964, url, valid)

proc call*(call_611965: Call_GetDescribeAutoScalingGroups_611949;
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeAutoScalingGroups";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeAutoScalingGroups
  ## Describes one or more Auto Scaling groups.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : <p>The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> parameter.</p> <p>If you omit this parameter, all Auto Scaling groups are described.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_611966 = newJObject()
  add(query_611966, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_611966.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_611966, "Action", newJString(Action))
  add(query_611966, "Version", newJString(Version))
  add(query_611966, "MaxRecords", newJInt(MaxRecords))
  result = call_611965.call(nil, query_611966, nil, nil, nil)

var getDescribeAutoScalingGroups* = Call_GetDescribeAutoScalingGroups_611949(
    name: "getDescribeAutoScalingGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingGroups",
    validator: validate_GetDescribeAutoScalingGroups_611950, base: "/",
    url: url_GetDescribeAutoScalingGroups_611951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingInstances_612004 = ref object of OpenApiRestCall_610658
proc url_PostDescribeAutoScalingInstances_612006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingInstances_612005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612007 = query.getOrDefault("Action")
  valid_612007 = validateParameter(valid_612007, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_612007 != nil:
    section.add "Action", valid_612007
  var valid_612008 = query.getOrDefault("Version")
  valid_612008 = validateParameter(valid_612008, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612008 != nil:
    section.add "Version", valid_612008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612009 = header.getOrDefault("X-Amz-Signature")
  valid_612009 = validateParameter(valid_612009, JString, required = false,
                                 default = nil)
  if valid_612009 != nil:
    section.add "X-Amz-Signature", valid_612009
  var valid_612010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612010 = validateParameter(valid_612010, JString, required = false,
                                 default = nil)
  if valid_612010 != nil:
    section.add "X-Amz-Content-Sha256", valid_612010
  var valid_612011 = header.getOrDefault("X-Amz-Date")
  valid_612011 = validateParameter(valid_612011, JString, required = false,
                                 default = nil)
  if valid_612011 != nil:
    section.add "X-Amz-Date", valid_612011
  var valid_612012 = header.getOrDefault("X-Amz-Credential")
  valid_612012 = validateParameter(valid_612012, JString, required = false,
                                 default = nil)
  if valid_612012 != nil:
    section.add "X-Amz-Credential", valid_612012
  var valid_612013 = header.getOrDefault("X-Amz-Security-Token")
  valid_612013 = validateParameter(valid_612013, JString, required = false,
                                 default = nil)
  if valid_612013 != nil:
    section.add "X-Amz-Security-Token", valid_612013
  var valid_612014 = header.getOrDefault("X-Amz-Algorithm")
  valid_612014 = validateParameter(valid_612014, JString, required = false,
                                 default = nil)
  if valid_612014 != nil:
    section.add "X-Amz-Algorithm", valid_612014
  var valid_612015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612015 = validateParameter(valid_612015, JString, required = false,
                                 default = nil)
  if valid_612015 != nil:
    section.add "X-Amz-SignedHeaders", valid_612015
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  section = newJObject()
  var valid_612016 = formData.getOrDefault("NextToken")
  valid_612016 = validateParameter(valid_612016, JString, required = false,
                                 default = nil)
  if valid_612016 != nil:
    section.add "NextToken", valid_612016
  var valid_612017 = formData.getOrDefault("MaxRecords")
  valid_612017 = validateParameter(valid_612017, JInt, required = false, default = nil)
  if valid_612017 != nil:
    section.add "MaxRecords", valid_612017
  var valid_612018 = formData.getOrDefault("InstanceIds")
  valid_612018 = validateParameter(valid_612018, JArray, required = false,
                                 default = nil)
  if valid_612018 != nil:
    section.add "InstanceIds", valid_612018
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612019: Call_PostDescribeAutoScalingInstances_612004;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_612019.validator(path, query, header, formData, body)
  let scheme = call_612019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612019.url(scheme.get, call_612019.host, call_612019.base,
                         call_612019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612019, url, valid)

proc call*(call_612020: Call_PostDescribeAutoScalingInstances_612004;
          NextToken: string = ""; MaxRecords: int = 0; InstanceIds: JsonNode = nil;
          Action: string = "DescribeAutoScalingInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612021 = newJObject()
  var formData_612022 = newJObject()
  add(formData_612022, "NextToken", newJString(NextToken))
  add(formData_612022, "MaxRecords", newJInt(MaxRecords))
  if InstanceIds != nil:
    formData_612022.add "InstanceIds", InstanceIds
  add(query_612021, "Action", newJString(Action))
  add(query_612021, "Version", newJString(Version))
  result = call_612020.call(nil, query_612021, nil, formData_612022, nil)

var postDescribeAutoScalingInstances* = Call_PostDescribeAutoScalingInstances_612004(
    name: "postDescribeAutoScalingInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_PostDescribeAutoScalingInstances_612005, base: "/",
    url: url_PostDescribeAutoScalingInstances_612006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingInstances_611986 = ref object of OpenApiRestCall_610658
proc url_GetDescribeAutoScalingInstances_611988(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingInstances_611987(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more Auto Scaling instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  section = newJObject()
  var valid_611989 = query.getOrDefault("InstanceIds")
  valid_611989 = validateParameter(valid_611989, JArray, required = false,
                                 default = nil)
  if valid_611989 != nil:
    section.add "InstanceIds", valid_611989
  var valid_611990 = query.getOrDefault("NextToken")
  valid_611990 = validateParameter(valid_611990, JString, required = false,
                                 default = nil)
  if valid_611990 != nil:
    section.add "NextToken", valid_611990
  var valid_611991 = query.getOrDefault("Action")
  valid_611991 = validateParameter(valid_611991, JString, required = true, default = newJString(
      "DescribeAutoScalingInstances"))
  if valid_611991 != nil:
    section.add "Action", valid_611991
  var valid_611992 = query.getOrDefault("Version")
  valid_611992 = validateParameter(valid_611992, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_611992 != nil:
    section.add "Version", valid_611992
  var valid_611993 = query.getOrDefault("MaxRecords")
  valid_611993 = validateParameter(valid_611993, JInt, required = false, default = nil)
  if valid_611993 != nil:
    section.add "MaxRecords", valid_611993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611994 = header.getOrDefault("X-Amz-Signature")
  valid_611994 = validateParameter(valid_611994, JString, required = false,
                                 default = nil)
  if valid_611994 != nil:
    section.add "X-Amz-Signature", valid_611994
  var valid_611995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611995 = validateParameter(valid_611995, JString, required = false,
                                 default = nil)
  if valid_611995 != nil:
    section.add "X-Amz-Content-Sha256", valid_611995
  var valid_611996 = header.getOrDefault("X-Amz-Date")
  valid_611996 = validateParameter(valid_611996, JString, required = false,
                                 default = nil)
  if valid_611996 != nil:
    section.add "X-Amz-Date", valid_611996
  var valid_611997 = header.getOrDefault("X-Amz-Credential")
  valid_611997 = validateParameter(valid_611997, JString, required = false,
                                 default = nil)
  if valid_611997 != nil:
    section.add "X-Amz-Credential", valid_611997
  var valid_611998 = header.getOrDefault("X-Amz-Security-Token")
  valid_611998 = validateParameter(valid_611998, JString, required = false,
                                 default = nil)
  if valid_611998 != nil:
    section.add "X-Amz-Security-Token", valid_611998
  var valid_611999 = header.getOrDefault("X-Amz-Algorithm")
  valid_611999 = validateParameter(valid_611999, JString, required = false,
                                 default = nil)
  if valid_611999 != nil:
    section.add "X-Amz-Algorithm", valid_611999
  var valid_612000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612000 = validateParameter(valid_612000, JString, required = false,
                                 default = nil)
  if valid_612000 != nil:
    section.add "X-Amz-SignedHeaders", valid_612000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612001: Call_GetDescribeAutoScalingInstances_611986;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more Auto Scaling instances.
  ## 
  let valid = call_612001.validator(path, query, header, formData, body)
  let scheme = call_612001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612001.url(scheme.get, call_612001.host, call_612001.base,
                         call_612001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612001, url, valid)

proc call*(call_612002: Call_GetDescribeAutoScalingInstances_611986;
          InstanceIds: JsonNode = nil; NextToken: string = "";
          Action: string = "DescribeAutoScalingInstances";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeAutoScalingInstances
  ## Describes one or more Auto Scaling instances.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to <code>MaxRecords</code> IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.
  var query_612003 = newJObject()
  if InstanceIds != nil:
    query_612003.add "InstanceIds", InstanceIds
  add(query_612003, "NextToken", newJString(NextToken))
  add(query_612003, "Action", newJString(Action))
  add(query_612003, "Version", newJString(Version))
  add(query_612003, "MaxRecords", newJInt(MaxRecords))
  result = call_612002.call(nil, query_612003, nil, nil, nil)

var getDescribeAutoScalingInstances* = Call_GetDescribeAutoScalingInstances_611986(
    name: "getDescribeAutoScalingInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingInstances",
    validator: validate_GetDescribeAutoScalingInstances_611987, base: "/",
    url: url_GetDescribeAutoScalingInstances_611988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAutoScalingNotificationTypes_612038 = ref object of OpenApiRestCall_610658
proc url_PostDescribeAutoScalingNotificationTypes_612040(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAutoScalingNotificationTypes_612039(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612041 = query.getOrDefault("Action")
  valid_612041 = validateParameter(valid_612041, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_612041 != nil:
    section.add "Action", valid_612041
  var valid_612042 = query.getOrDefault("Version")
  valid_612042 = validateParameter(valid_612042, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612042 != nil:
    section.add "Version", valid_612042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612043 = header.getOrDefault("X-Amz-Signature")
  valid_612043 = validateParameter(valid_612043, JString, required = false,
                                 default = nil)
  if valid_612043 != nil:
    section.add "X-Amz-Signature", valid_612043
  var valid_612044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612044 = validateParameter(valid_612044, JString, required = false,
                                 default = nil)
  if valid_612044 != nil:
    section.add "X-Amz-Content-Sha256", valid_612044
  var valid_612045 = header.getOrDefault("X-Amz-Date")
  valid_612045 = validateParameter(valid_612045, JString, required = false,
                                 default = nil)
  if valid_612045 != nil:
    section.add "X-Amz-Date", valid_612045
  var valid_612046 = header.getOrDefault("X-Amz-Credential")
  valid_612046 = validateParameter(valid_612046, JString, required = false,
                                 default = nil)
  if valid_612046 != nil:
    section.add "X-Amz-Credential", valid_612046
  var valid_612047 = header.getOrDefault("X-Amz-Security-Token")
  valid_612047 = validateParameter(valid_612047, JString, required = false,
                                 default = nil)
  if valid_612047 != nil:
    section.add "X-Amz-Security-Token", valid_612047
  var valid_612048 = header.getOrDefault("X-Amz-Algorithm")
  valid_612048 = validateParameter(valid_612048, JString, required = false,
                                 default = nil)
  if valid_612048 != nil:
    section.add "X-Amz-Algorithm", valid_612048
  var valid_612049 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612049 = validateParameter(valid_612049, JString, required = false,
                                 default = nil)
  if valid_612049 != nil:
    section.add "X-Amz-SignedHeaders", valid_612049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612050: Call_PostDescribeAutoScalingNotificationTypes_612038;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_612050.validator(path, query, header, formData, body)
  let scheme = call_612050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612050.url(scheme.get, call_612050.host, call_612050.base,
                         call_612050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612050, url, valid)

proc call*(call_612051: Call_PostDescribeAutoScalingNotificationTypes_612038;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612052 = newJObject()
  add(query_612052, "Action", newJString(Action))
  add(query_612052, "Version", newJString(Version))
  result = call_612051.call(nil, query_612052, nil, nil, nil)

var postDescribeAutoScalingNotificationTypes* = Call_PostDescribeAutoScalingNotificationTypes_612038(
    name: "postDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_PostDescribeAutoScalingNotificationTypes_612039,
    base: "/", url: url_PostDescribeAutoScalingNotificationTypes_612040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAutoScalingNotificationTypes_612023 = ref object of OpenApiRestCall_610658
proc url_GetDescribeAutoScalingNotificationTypes_612025(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAutoScalingNotificationTypes_612024(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612026 = query.getOrDefault("Action")
  valid_612026 = validateParameter(valid_612026, JString, required = true, default = newJString(
      "DescribeAutoScalingNotificationTypes"))
  if valid_612026 != nil:
    section.add "Action", valid_612026
  var valid_612027 = query.getOrDefault("Version")
  valid_612027 = validateParameter(valid_612027, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612027 != nil:
    section.add "Version", valid_612027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612028 = header.getOrDefault("X-Amz-Signature")
  valid_612028 = validateParameter(valid_612028, JString, required = false,
                                 default = nil)
  if valid_612028 != nil:
    section.add "X-Amz-Signature", valid_612028
  var valid_612029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612029 = validateParameter(valid_612029, JString, required = false,
                                 default = nil)
  if valid_612029 != nil:
    section.add "X-Amz-Content-Sha256", valid_612029
  var valid_612030 = header.getOrDefault("X-Amz-Date")
  valid_612030 = validateParameter(valid_612030, JString, required = false,
                                 default = nil)
  if valid_612030 != nil:
    section.add "X-Amz-Date", valid_612030
  var valid_612031 = header.getOrDefault("X-Amz-Credential")
  valid_612031 = validateParameter(valid_612031, JString, required = false,
                                 default = nil)
  if valid_612031 != nil:
    section.add "X-Amz-Credential", valid_612031
  var valid_612032 = header.getOrDefault("X-Amz-Security-Token")
  valid_612032 = validateParameter(valid_612032, JString, required = false,
                                 default = nil)
  if valid_612032 != nil:
    section.add "X-Amz-Security-Token", valid_612032
  var valid_612033 = header.getOrDefault("X-Amz-Algorithm")
  valid_612033 = validateParameter(valid_612033, JString, required = false,
                                 default = nil)
  if valid_612033 != nil:
    section.add "X-Amz-Algorithm", valid_612033
  var valid_612034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612034 = validateParameter(valid_612034, JString, required = false,
                                 default = nil)
  if valid_612034 != nil:
    section.add "X-Amz-SignedHeaders", valid_612034
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612035: Call_GetDescribeAutoScalingNotificationTypes_612023;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ## 
  let valid = call_612035.validator(path, query, header, formData, body)
  let scheme = call_612035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612035.url(scheme.get, call_612035.host, call_612035.base,
                         call_612035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612035, url, valid)

proc call*(call_612036: Call_GetDescribeAutoScalingNotificationTypes_612023;
          Action: string = "DescribeAutoScalingNotificationTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeAutoScalingNotificationTypes
  ## Describes the notification types that are supported by Amazon EC2 Auto Scaling.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612037 = newJObject()
  add(query_612037, "Action", newJString(Action))
  add(query_612037, "Version", newJString(Version))
  result = call_612036.call(nil, query_612037, nil, nil, nil)

var getDescribeAutoScalingNotificationTypes* = Call_GetDescribeAutoScalingNotificationTypes_612023(
    name: "getDescribeAutoScalingNotificationTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeAutoScalingNotificationTypes",
    validator: validate_GetDescribeAutoScalingNotificationTypes_612024, base: "/",
    url: url_GetDescribeAutoScalingNotificationTypes_612025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLaunchConfigurations_612071 = ref object of OpenApiRestCall_610658
proc url_PostDescribeLaunchConfigurations_612073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLaunchConfigurations_612072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612074 = query.getOrDefault("Action")
  valid_612074 = validateParameter(valid_612074, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_612074 != nil:
    section.add "Action", valid_612074
  var valid_612075 = query.getOrDefault("Version")
  valid_612075 = validateParameter(valid_612075, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612075 != nil:
    section.add "Version", valid_612075
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612076 = header.getOrDefault("X-Amz-Signature")
  valid_612076 = validateParameter(valid_612076, JString, required = false,
                                 default = nil)
  if valid_612076 != nil:
    section.add "X-Amz-Signature", valid_612076
  var valid_612077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612077 = validateParameter(valid_612077, JString, required = false,
                                 default = nil)
  if valid_612077 != nil:
    section.add "X-Amz-Content-Sha256", valid_612077
  var valid_612078 = header.getOrDefault("X-Amz-Date")
  valid_612078 = validateParameter(valid_612078, JString, required = false,
                                 default = nil)
  if valid_612078 != nil:
    section.add "X-Amz-Date", valid_612078
  var valid_612079 = header.getOrDefault("X-Amz-Credential")
  valid_612079 = validateParameter(valid_612079, JString, required = false,
                                 default = nil)
  if valid_612079 != nil:
    section.add "X-Amz-Credential", valid_612079
  var valid_612080 = header.getOrDefault("X-Amz-Security-Token")
  valid_612080 = validateParameter(valid_612080, JString, required = false,
                                 default = nil)
  if valid_612080 != nil:
    section.add "X-Amz-Security-Token", valid_612080
  var valid_612081 = header.getOrDefault("X-Amz-Algorithm")
  valid_612081 = validateParameter(valid_612081, JString, required = false,
                                 default = nil)
  if valid_612081 != nil:
    section.add "X-Amz-Algorithm", valid_612081
  var valid_612082 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612082 = validateParameter(valid_612082, JString, required = false,
                                 default = nil)
  if valid_612082 != nil:
    section.add "X-Amz-SignedHeaders", valid_612082
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  section = newJObject()
  var valid_612083 = formData.getOrDefault("NextToken")
  valid_612083 = validateParameter(valid_612083, JString, required = false,
                                 default = nil)
  if valid_612083 != nil:
    section.add "NextToken", valid_612083
  var valid_612084 = formData.getOrDefault("MaxRecords")
  valid_612084 = validateParameter(valid_612084, JInt, required = false, default = nil)
  if valid_612084 != nil:
    section.add "MaxRecords", valid_612084
  var valid_612085 = formData.getOrDefault("LaunchConfigurationNames")
  valid_612085 = validateParameter(valid_612085, JArray, required = false,
                                 default = nil)
  if valid_612085 != nil:
    section.add "LaunchConfigurationNames", valid_612085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612086: Call_PostDescribeLaunchConfigurations_612071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_612086.validator(path, query, header, formData, body)
  let scheme = call_612086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612086.url(scheme.get, call_612086.host, call_612086.base,
                         call_612086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612086, url, valid)

proc call*(call_612087: Call_PostDescribeLaunchConfigurations_612071;
          NextToken: string = ""; MaxRecords: int = 0;
          LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612088 = newJObject()
  var formData_612089 = newJObject()
  add(formData_612089, "NextToken", newJString(NextToken))
  add(formData_612089, "MaxRecords", newJInt(MaxRecords))
  if LaunchConfigurationNames != nil:
    formData_612089.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_612088, "Action", newJString(Action))
  add(query_612088, "Version", newJString(Version))
  result = call_612087.call(nil, query_612088, nil, formData_612089, nil)

var postDescribeLaunchConfigurations* = Call_PostDescribeLaunchConfigurations_612071(
    name: "postDescribeLaunchConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_PostDescribeLaunchConfigurations_612072, base: "/",
    url: url_PostDescribeLaunchConfigurations_612073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLaunchConfigurations_612053 = ref object of OpenApiRestCall_610658
proc url_GetDescribeLaunchConfigurations_612055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLaunchConfigurations_612054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more launch configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612056 = query.getOrDefault("NextToken")
  valid_612056 = validateParameter(valid_612056, JString, required = false,
                                 default = nil)
  if valid_612056 != nil:
    section.add "NextToken", valid_612056
  var valid_612057 = query.getOrDefault("LaunchConfigurationNames")
  valid_612057 = validateParameter(valid_612057, JArray, required = false,
                                 default = nil)
  if valid_612057 != nil:
    section.add "LaunchConfigurationNames", valid_612057
  var valid_612058 = query.getOrDefault("Action")
  valid_612058 = validateParameter(valid_612058, JString, required = true, default = newJString(
      "DescribeLaunchConfigurations"))
  if valid_612058 != nil:
    section.add "Action", valid_612058
  var valid_612059 = query.getOrDefault("Version")
  valid_612059 = validateParameter(valid_612059, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612059 != nil:
    section.add "Version", valid_612059
  var valid_612060 = query.getOrDefault("MaxRecords")
  valid_612060 = validateParameter(valid_612060, JInt, required = false, default = nil)
  if valid_612060 != nil:
    section.add "MaxRecords", valid_612060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612061 = header.getOrDefault("X-Amz-Signature")
  valid_612061 = validateParameter(valid_612061, JString, required = false,
                                 default = nil)
  if valid_612061 != nil:
    section.add "X-Amz-Signature", valid_612061
  var valid_612062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612062 = validateParameter(valid_612062, JString, required = false,
                                 default = nil)
  if valid_612062 != nil:
    section.add "X-Amz-Content-Sha256", valid_612062
  var valid_612063 = header.getOrDefault("X-Amz-Date")
  valid_612063 = validateParameter(valid_612063, JString, required = false,
                                 default = nil)
  if valid_612063 != nil:
    section.add "X-Amz-Date", valid_612063
  var valid_612064 = header.getOrDefault("X-Amz-Credential")
  valid_612064 = validateParameter(valid_612064, JString, required = false,
                                 default = nil)
  if valid_612064 != nil:
    section.add "X-Amz-Credential", valid_612064
  var valid_612065 = header.getOrDefault("X-Amz-Security-Token")
  valid_612065 = validateParameter(valid_612065, JString, required = false,
                                 default = nil)
  if valid_612065 != nil:
    section.add "X-Amz-Security-Token", valid_612065
  var valid_612066 = header.getOrDefault("X-Amz-Algorithm")
  valid_612066 = validateParameter(valid_612066, JString, required = false,
                                 default = nil)
  if valid_612066 != nil:
    section.add "X-Amz-Algorithm", valid_612066
  var valid_612067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612067 = validateParameter(valid_612067, JString, required = false,
                                 default = nil)
  if valid_612067 != nil:
    section.add "X-Amz-SignedHeaders", valid_612067
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612068: Call_GetDescribeLaunchConfigurations_612053;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes one or more launch configurations.
  ## 
  let valid = call_612068.validator(path, query, header, formData, body)
  let scheme = call_612068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612068.url(scheme.get, call_612068.host, call_612068.base,
                         call_612068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612068, url, valid)

proc call*(call_612069: Call_GetDescribeLaunchConfigurations_612053;
          NextToken: string = ""; LaunchConfigurationNames: JsonNode = nil;
          Action: string = "DescribeLaunchConfigurations";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeLaunchConfigurations
  ## Describes one or more launch configurations.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   LaunchConfigurationNames: JArray
  ##                           : The launch configuration names. If you omit this parameter, all launch configurations are described.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_612070 = newJObject()
  add(query_612070, "NextToken", newJString(NextToken))
  if LaunchConfigurationNames != nil:
    query_612070.add "LaunchConfigurationNames", LaunchConfigurationNames
  add(query_612070, "Action", newJString(Action))
  add(query_612070, "Version", newJString(Version))
  add(query_612070, "MaxRecords", newJInt(MaxRecords))
  result = call_612069.call(nil, query_612070, nil, nil, nil)

var getDescribeLaunchConfigurations* = Call_GetDescribeLaunchConfigurations_612053(
    name: "getDescribeLaunchConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLaunchConfigurations",
    validator: validate_GetDescribeLaunchConfigurations_612054, base: "/",
    url: url_GetDescribeLaunchConfigurations_612055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHookTypes_612105 = ref object of OpenApiRestCall_610658
proc url_PostDescribeLifecycleHookTypes_612107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHookTypes_612106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612108 = query.getOrDefault("Action")
  valid_612108 = validateParameter(valid_612108, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_612108 != nil:
    section.add "Action", valid_612108
  var valid_612109 = query.getOrDefault("Version")
  valid_612109 = validateParameter(valid_612109, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612109 != nil:
    section.add "Version", valid_612109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612110 = header.getOrDefault("X-Amz-Signature")
  valid_612110 = validateParameter(valid_612110, JString, required = false,
                                 default = nil)
  if valid_612110 != nil:
    section.add "X-Amz-Signature", valid_612110
  var valid_612111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612111 = validateParameter(valid_612111, JString, required = false,
                                 default = nil)
  if valid_612111 != nil:
    section.add "X-Amz-Content-Sha256", valid_612111
  var valid_612112 = header.getOrDefault("X-Amz-Date")
  valid_612112 = validateParameter(valid_612112, JString, required = false,
                                 default = nil)
  if valid_612112 != nil:
    section.add "X-Amz-Date", valid_612112
  var valid_612113 = header.getOrDefault("X-Amz-Credential")
  valid_612113 = validateParameter(valid_612113, JString, required = false,
                                 default = nil)
  if valid_612113 != nil:
    section.add "X-Amz-Credential", valid_612113
  var valid_612114 = header.getOrDefault("X-Amz-Security-Token")
  valid_612114 = validateParameter(valid_612114, JString, required = false,
                                 default = nil)
  if valid_612114 != nil:
    section.add "X-Amz-Security-Token", valid_612114
  var valid_612115 = header.getOrDefault("X-Amz-Algorithm")
  valid_612115 = validateParameter(valid_612115, JString, required = false,
                                 default = nil)
  if valid_612115 != nil:
    section.add "X-Amz-Algorithm", valid_612115
  var valid_612116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612116 = validateParameter(valid_612116, JString, required = false,
                                 default = nil)
  if valid_612116 != nil:
    section.add "X-Amz-SignedHeaders", valid_612116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612117: Call_PostDescribeLifecycleHookTypes_612105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_612117.validator(path, query, header, formData, body)
  let scheme = call_612117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612117.url(scheme.get, call_612117.host, call_612117.base,
                         call_612117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612117, url, valid)

proc call*(call_612118: Call_PostDescribeLifecycleHookTypes_612105;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612119 = newJObject()
  add(query_612119, "Action", newJString(Action))
  add(query_612119, "Version", newJString(Version))
  result = call_612118.call(nil, query_612119, nil, nil, nil)

var postDescribeLifecycleHookTypes* = Call_PostDescribeLifecycleHookTypes_612105(
    name: "postDescribeLifecycleHookTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_PostDescribeLifecycleHookTypes_612106, base: "/",
    url: url_PostDescribeLifecycleHookTypes_612107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHookTypes_612090 = ref object of OpenApiRestCall_610658
proc url_GetDescribeLifecycleHookTypes_612092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHookTypes_612091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612093 = query.getOrDefault("Action")
  valid_612093 = validateParameter(valid_612093, JString, required = true, default = newJString(
      "DescribeLifecycleHookTypes"))
  if valid_612093 != nil:
    section.add "Action", valid_612093
  var valid_612094 = query.getOrDefault("Version")
  valid_612094 = validateParameter(valid_612094, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612094 != nil:
    section.add "Version", valid_612094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612095 = header.getOrDefault("X-Amz-Signature")
  valid_612095 = validateParameter(valid_612095, JString, required = false,
                                 default = nil)
  if valid_612095 != nil:
    section.add "X-Amz-Signature", valid_612095
  var valid_612096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612096 = validateParameter(valid_612096, JString, required = false,
                                 default = nil)
  if valid_612096 != nil:
    section.add "X-Amz-Content-Sha256", valid_612096
  var valid_612097 = header.getOrDefault("X-Amz-Date")
  valid_612097 = validateParameter(valid_612097, JString, required = false,
                                 default = nil)
  if valid_612097 != nil:
    section.add "X-Amz-Date", valid_612097
  var valid_612098 = header.getOrDefault("X-Amz-Credential")
  valid_612098 = validateParameter(valid_612098, JString, required = false,
                                 default = nil)
  if valid_612098 != nil:
    section.add "X-Amz-Credential", valid_612098
  var valid_612099 = header.getOrDefault("X-Amz-Security-Token")
  valid_612099 = validateParameter(valid_612099, JString, required = false,
                                 default = nil)
  if valid_612099 != nil:
    section.add "X-Amz-Security-Token", valid_612099
  var valid_612100 = header.getOrDefault("X-Amz-Algorithm")
  valid_612100 = validateParameter(valid_612100, JString, required = false,
                                 default = nil)
  if valid_612100 != nil:
    section.add "X-Amz-Algorithm", valid_612100
  var valid_612101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612101 = validateParameter(valid_612101, JString, required = false,
                                 default = nil)
  if valid_612101 != nil:
    section.add "X-Amz-SignedHeaders", valid_612101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612102: Call_GetDescribeLifecycleHookTypes_612090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ## 
  let valid = call_612102.validator(path, query, header, formData, body)
  let scheme = call_612102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612102.url(scheme.get, call_612102.host, call_612102.base,
                         call_612102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612102, url, valid)

proc call*(call_612103: Call_GetDescribeLifecycleHookTypes_612090;
          Action: string = "DescribeLifecycleHookTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHookTypes
  ## <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612104 = newJObject()
  add(query_612104, "Action", newJString(Action))
  add(query_612104, "Version", newJString(Version))
  result = call_612103.call(nil, query_612104, nil, nil, nil)

var getDescribeLifecycleHookTypes* = Call_GetDescribeLifecycleHookTypes_612090(
    name: "getDescribeLifecycleHookTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLifecycleHookTypes",
    validator: validate_GetDescribeLifecycleHookTypes_612091, base: "/",
    url: url_GetDescribeLifecycleHookTypes_612092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLifecycleHooks_612137 = ref object of OpenApiRestCall_610658
proc url_PostDescribeLifecycleHooks_612139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLifecycleHooks_612138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612140 = query.getOrDefault("Action")
  valid_612140 = validateParameter(valid_612140, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_612140 != nil:
    section.add "Action", valid_612140
  var valid_612141 = query.getOrDefault("Version")
  valid_612141 = validateParameter(valid_612141, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612141 != nil:
    section.add "Version", valid_612141
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612142 = header.getOrDefault("X-Amz-Signature")
  valid_612142 = validateParameter(valid_612142, JString, required = false,
                                 default = nil)
  if valid_612142 != nil:
    section.add "X-Amz-Signature", valid_612142
  var valid_612143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612143 = validateParameter(valid_612143, JString, required = false,
                                 default = nil)
  if valid_612143 != nil:
    section.add "X-Amz-Content-Sha256", valid_612143
  var valid_612144 = header.getOrDefault("X-Amz-Date")
  valid_612144 = validateParameter(valid_612144, JString, required = false,
                                 default = nil)
  if valid_612144 != nil:
    section.add "X-Amz-Date", valid_612144
  var valid_612145 = header.getOrDefault("X-Amz-Credential")
  valid_612145 = validateParameter(valid_612145, JString, required = false,
                                 default = nil)
  if valid_612145 != nil:
    section.add "X-Amz-Credential", valid_612145
  var valid_612146 = header.getOrDefault("X-Amz-Security-Token")
  valid_612146 = validateParameter(valid_612146, JString, required = false,
                                 default = nil)
  if valid_612146 != nil:
    section.add "X-Amz-Security-Token", valid_612146
  var valid_612147 = header.getOrDefault("X-Amz-Algorithm")
  valid_612147 = validateParameter(valid_612147, JString, required = false,
                                 default = nil)
  if valid_612147 != nil:
    section.add "X-Amz-Algorithm", valid_612147
  var valid_612148 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612148 = validateParameter(valid_612148, JString, required = false,
                                 default = nil)
  if valid_612148 != nil:
    section.add "X-Amz-SignedHeaders", valid_612148
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612149 = formData.getOrDefault("AutoScalingGroupName")
  valid_612149 = validateParameter(valid_612149, JString, required = true,
                                 default = nil)
  if valid_612149 != nil:
    section.add "AutoScalingGroupName", valid_612149
  var valid_612150 = formData.getOrDefault("LifecycleHookNames")
  valid_612150 = validateParameter(valid_612150, JArray, required = false,
                                 default = nil)
  if valid_612150 != nil:
    section.add "LifecycleHookNames", valid_612150
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612151: Call_PostDescribeLifecycleHooks_612137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_612151.validator(path, query, header, formData, body)
  let scheme = call_612151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612151.url(scheme.get, call_612151.host, call_612151.base,
                         call_612151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612151, url, valid)

proc call*(call_612152: Call_PostDescribeLifecycleHooks_612137;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612153 = newJObject()
  var formData_612154 = newJObject()
  add(formData_612154, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LifecycleHookNames != nil:
    formData_612154.add "LifecycleHookNames", LifecycleHookNames
  add(query_612153, "Action", newJString(Action))
  add(query_612153, "Version", newJString(Version))
  result = call_612152.call(nil, query_612153, nil, formData_612154, nil)

var postDescribeLifecycleHooks* = Call_PostDescribeLifecycleHooks_612137(
    name: "postDescribeLifecycleHooks", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_PostDescribeLifecycleHooks_612138, base: "/",
    url: url_PostDescribeLifecycleHooks_612139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLifecycleHooks_612120 = ref object of OpenApiRestCall_610658
proc url_GetDescribeLifecycleHooks_612122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLifecycleHooks_612121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612123 = query.getOrDefault("LifecycleHookNames")
  valid_612123 = validateParameter(valid_612123, JArray, required = false,
                                 default = nil)
  if valid_612123 != nil:
    section.add "LifecycleHookNames", valid_612123
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612124 = query.getOrDefault("AutoScalingGroupName")
  valid_612124 = validateParameter(valid_612124, JString, required = true,
                                 default = nil)
  if valid_612124 != nil:
    section.add "AutoScalingGroupName", valid_612124
  var valid_612125 = query.getOrDefault("Action")
  valid_612125 = validateParameter(valid_612125, JString, required = true,
                                 default = newJString("DescribeLifecycleHooks"))
  if valid_612125 != nil:
    section.add "Action", valid_612125
  var valid_612126 = query.getOrDefault("Version")
  valid_612126 = validateParameter(valid_612126, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612126 != nil:
    section.add "Version", valid_612126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612127 = header.getOrDefault("X-Amz-Signature")
  valid_612127 = validateParameter(valid_612127, JString, required = false,
                                 default = nil)
  if valid_612127 != nil:
    section.add "X-Amz-Signature", valid_612127
  var valid_612128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612128 = validateParameter(valid_612128, JString, required = false,
                                 default = nil)
  if valid_612128 != nil:
    section.add "X-Amz-Content-Sha256", valid_612128
  var valid_612129 = header.getOrDefault("X-Amz-Date")
  valid_612129 = validateParameter(valid_612129, JString, required = false,
                                 default = nil)
  if valid_612129 != nil:
    section.add "X-Amz-Date", valid_612129
  var valid_612130 = header.getOrDefault("X-Amz-Credential")
  valid_612130 = validateParameter(valid_612130, JString, required = false,
                                 default = nil)
  if valid_612130 != nil:
    section.add "X-Amz-Credential", valid_612130
  var valid_612131 = header.getOrDefault("X-Amz-Security-Token")
  valid_612131 = validateParameter(valid_612131, JString, required = false,
                                 default = nil)
  if valid_612131 != nil:
    section.add "X-Amz-Security-Token", valid_612131
  var valid_612132 = header.getOrDefault("X-Amz-Algorithm")
  valid_612132 = validateParameter(valid_612132, JString, required = false,
                                 default = nil)
  if valid_612132 != nil:
    section.add "X-Amz-Algorithm", valid_612132
  var valid_612133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612133 = validateParameter(valid_612133, JString, required = false,
                                 default = nil)
  if valid_612133 != nil:
    section.add "X-Amz-SignedHeaders", valid_612133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612134: Call_GetDescribeLifecycleHooks_612120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ## 
  let valid = call_612134.validator(path, query, header, formData, body)
  let scheme = call_612134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612134.url(scheme.get, call_612134.host, call_612134.base,
                         call_612134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612134, url, valid)

proc call*(call_612135: Call_GetDescribeLifecycleHooks_612120;
          AutoScalingGroupName: string; LifecycleHookNames: JsonNode = nil;
          Action: string = "DescribeLifecycleHooks"; Version: string = "2011-01-01"): Recallable =
  ## getDescribeLifecycleHooks
  ## Describes the lifecycle hooks for the specified Auto Scaling group.
  ##   LifecycleHookNames: JArray
  ##                     : The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612136 = newJObject()
  if LifecycleHookNames != nil:
    query_612136.add "LifecycleHookNames", LifecycleHookNames
  add(query_612136, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612136, "Action", newJString(Action))
  add(query_612136, "Version", newJString(Version))
  result = call_612135.call(nil, query_612136, nil, nil, nil)

var getDescribeLifecycleHooks* = Call_GetDescribeLifecycleHooks_612120(
    name: "getDescribeLifecycleHooks", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLifecycleHooks",
    validator: validate_GetDescribeLifecycleHooks_612121, base: "/",
    url: url_GetDescribeLifecycleHooks_612122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancerTargetGroups_612173 = ref object of OpenApiRestCall_610658
proc url_PostDescribeLoadBalancerTargetGroups_612175(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancerTargetGroups_612174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612176 = query.getOrDefault("Action")
  valid_612176 = validateParameter(valid_612176, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_612176 != nil:
    section.add "Action", valid_612176
  var valid_612177 = query.getOrDefault("Version")
  valid_612177 = validateParameter(valid_612177, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612177 != nil:
    section.add "Version", valid_612177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612178 = header.getOrDefault("X-Amz-Signature")
  valid_612178 = validateParameter(valid_612178, JString, required = false,
                                 default = nil)
  if valid_612178 != nil:
    section.add "X-Amz-Signature", valid_612178
  var valid_612179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612179 = validateParameter(valid_612179, JString, required = false,
                                 default = nil)
  if valid_612179 != nil:
    section.add "X-Amz-Content-Sha256", valid_612179
  var valid_612180 = header.getOrDefault("X-Amz-Date")
  valid_612180 = validateParameter(valid_612180, JString, required = false,
                                 default = nil)
  if valid_612180 != nil:
    section.add "X-Amz-Date", valid_612180
  var valid_612181 = header.getOrDefault("X-Amz-Credential")
  valid_612181 = validateParameter(valid_612181, JString, required = false,
                                 default = nil)
  if valid_612181 != nil:
    section.add "X-Amz-Credential", valid_612181
  var valid_612182 = header.getOrDefault("X-Amz-Security-Token")
  valid_612182 = validateParameter(valid_612182, JString, required = false,
                                 default = nil)
  if valid_612182 != nil:
    section.add "X-Amz-Security-Token", valid_612182
  var valid_612183 = header.getOrDefault("X-Amz-Algorithm")
  valid_612183 = validateParameter(valid_612183, JString, required = false,
                                 default = nil)
  if valid_612183 != nil:
    section.add "X-Amz-Algorithm", valid_612183
  var valid_612184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612184 = validateParameter(valid_612184, JString, required = false,
                                 default = nil)
  if valid_612184 != nil:
    section.add "X-Amz-SignedHeaders", valid_612184
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612185 = formData.getOrDefault("AutoScalingGroupName")
  valid_612185 = validateParameter(valid_612185, JString, required = true,
                                 default = nil)
  if valid_612185 != nil:
    section.add "AutoScalingGroupName", valid_612185
  var valid_612186 = formData.getOrDefault("NextToken")
  valid_612186 = validateParameter(valid_612186, JString, required = false,
                                 default = nil)
  if valid_612186 != nil:
    section.add "NextToken", valid_612186
  var valid_612187 = formData.getOrDefault("MaxRecords")
  valid_612187 = validateParameter(valid_612187, JInt, required = false, default = nil)
  if valid_612187 != nil:
    section.add "MaxRecords", valid_612187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612188: Call_PostDescribeLoadBalancerTargetGroups_612173;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_612188.validator(path, query, header, formData, body)
  let scheme = call_612188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612188.url(scheme.get, call_612188.host, call_612188.base,
                         call_612188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612188, url, valid)

proc call*(call_612189: Call_PostDescribeLoadBalancerTargetGroups_612173;
          AutoScalingGroupName: string; NextToken: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612190 = newJObject()
  var formData_612191 = newJObject()
  add(formData_612191, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612191, "NextToken", newJString(NextToken))
  add(formData_612191, "MaxRecords", newJInt(MaxRecords))
  add(query_612190, "Action", newJString(Action))
  add(query_612190, "Version", newJString(Version))
  result = call_612189.call(nil, query_612190, nil, formData_612191, nil)

var postDescribeLoadBalancerTargetGroups* = Call_PostDescribeLoadBalancerTargetGroups_612173(
    name: "postDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_PostDescribeLoadBalancerTargetGroups_612174, base: "/",
    url: url_PostDescribeLoadBalancerTargetGroups_612175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancerTargetGroups_612155 = ref object of OpenApiRestCall_610658
proc url_GetDescribeLoadBalancerTargetGroups_612157(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancerTargetGroups_612156(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612158 = query.getOrDefault("NextToken")
  valid_612158 = validateParameter(valid_612158, JString, required = false,
                                 default = nil)
  if valid_612158 != nil:
    section.add "NextToken", valid_612158
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612159 = query.getOrDefault("AutoScalingGroupName")
  valid_612159 = validateParameter(valid_612159, JString, required = true,
                                 default = nil)
  if valid_612159 != nil:
    section.add "AutoScalingGroupName", valid_612159
  var valid_612160 = query.getOrDefault("Action")
  valid_612160 = validateParameter(valid_612160, JString, required = true, default = newJString(
      "DescribeLoadBalancerTargetGroups"))
  if valid_612160 != nil:
    section.add "Action", valid_612160
  var valid_612161 = query.getOrDefault("Version")
  valid_612161 = validateParameter(valid_612161, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612161 != nil:
    section.add "Version", valid_612161
  var valid_612162 = query.getOrDefault("MaxRecords")
  valid_612162 = validateParameter(valid_612162, JInt, required = false, default = nil)
  if valid_612162 != nil:
    section.add "MaxRecords", valid_612162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612163 = header.getOrDefault("X-Amz-Signature")
  valid_612163 = validateParameter(valid_612163, JString, required = false,
                                 default = nil)
  if valid_612163 != nil:
    section.add "X-Amz-Signature", valid_612163
  var valid_612164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612164 = validateParameter(valid_612164, JString, required = false,
                                 default = nil)
  if valid_612164 != nil:
    section.add "X-Amz-Content-Sha256", valid_612164
  var valid_612165 = header.getOrDefault("X-Amz-Date")
  valid_612165 = validateParameter(valid_612165, JString, required = false,
                                 default = nil)
  if valid_612165 != nil:
    section.add "X-Amz-Date", valid_612165
  var valid_612166 = header.getOrDefault("X-Amz-Credential")
  valid_612166 = validateParameter(valid_612166, JString, required = false,
                                 default = nil)
  if valid_612166 != nil:
    section.add "X-Amz-Credential", valid_612166
  var valid_612167 = header.getOrDefault("X-Amz-Security-Token")
  valid_612167 = validateParameter(valid_612167, JString, required = false,
                                 default = nil)
  if valid_612167 != nil:
    section.add "X-Amz-Security-Token", valid_612167
  var valid_612168 = header.getOrDefault("X-Amz-Algorithm")
  valid_612168 = validateParameter(valid_612168, JString, required = false,
                                 default = nil)
  if valid_612168 != nil:
    section.add "X-Amz-Algorithm", valid_612168
  var valid_612169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612169 = validateParameter(valid_612169, JString, required = false,
                                 default = nil)
  if valid_612169 != nil:
    section.add "X-Amz-SignedHeaders", valid_612169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612170: Call_GetDescribeLoadBalancerTargetGroups_612155;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the target groups for the specified Auto Scaling group.
  ## 
  let valid = call_612170.validator(path, query, header, formData, body)
  let scheme = call_612170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612170.url(scheme.get, call_612170.host, call_612170.base,
                         call_612170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612170, url, valid)

proc call*(call_612171: Call_GetDescribeLoadBalancerTargetGroups_612155;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancerTargetGroups";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeLoadBalancerTargetGroups
  ## Describes the target groups for the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_612172 = newJObject()
  add(query_612172, "NextToken", newJString(NextToken))
  add(query_612172, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612172, "Action", newJString(Action))
  add(query_612172, "Version", newJString(Version))
  add(query_612172, "MaxRecords", newJInt(MaxRecords))
  result = call_612171.call(nil, query_612172, nil, nil, nil)

var getDescribeLoadBalancerTargetGroups* = Call_GetDescribeLoadBalancerTargetGroups_612155(
    name: "getDescribeLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeLoadBalancerTargetGroups",
    validator: validate_GetDescribeLoadBalancerTargetGroups_612156, base: "/",
    url: url_GetDescribeLoadBalancerTargetGroups_612157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoadBalancers_612210 = ref object of OpenApiRestCall_610658
proc url_PostDescribeLoadBalancers_612212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoadBalancers_612211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612213 = query.getOrDefault("Action")
  valid_612213 = validateParameter(valid_612213, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_612213 != nil:
    section.add "Action", valid_612213
  var valid_612214 = query.getOrDefault("Version")
  valid_612214 = validateParameter(valid_612214, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612214 != nil:
    section.add "Version", valid_612214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612215 = header.getOrDefault("X-Amz-Signature")
  valid_612215 = validateParameter(valid_612215, JString, required = false,
                                 default = nil)
  if valid_612215 != nil:
    section.add "X-Amz-Signature", valid_612215
  var valid_612216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612216 = validateParameter(valid_612216, JString, required = false,
                                 default = nil)
  if valid_612216 != nil:
    section.add "X-Amz-Content-Sha256", valid_612216
  var valid_612217 = header.getOrDefault("X-Amz-Date")
  valid_612217 = validateParameter(valid_612217, JString, required = false,
                                 default = nil)
  if valid_612217 != nil:
    section.add "X-Amz-Date", valid_612217
  var valid_612218 = header.getOrDefault("X-Amz-Credential")
  valid_612218 = validateParameter(valid_612218, JString, required = false,
                                 default = nil)
  if valid_612218 != nil:
    section.add "X-Amz-Credential", valid_612218
  var valid_612219 = header.getOrDefault("X-Amz-Security-Token")
  valid_612219 = validateParameter(valid_612219, JString, required = false,
                                 default = nil)
  if valid_612219 != nil:
    section.add "X-Amz-Security-Token", valid_612219
  var valid_612220 = header.getOrDefault("X-Amz-Algorithm")
  valid_612220 = validateParameter(valid_612220, JString, required = false,
                                 default = nil)
  if valid_612220 != nil:
    section.add "X-Amz-Algorithm", valid_612220
  var valid_612221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612221 = validateParameter(valid_612221, JString, required = false,
                                 default = nil)
  if valid_612221 != nil:
    section.add "X-Amz-SignedHeaders", valid_612221
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612222 = formData.getOrDefault("AutoScalingGroupName")
  valid_612222 = validateParameter(valid_612222, JString, required = true,
                                 default = nil)
  if valid_612222 != nil:
    section.add "AutoScalingGroupName", valid_612222
  var valid_612223 = formData.getOrDefault("NextToken")
  valid_612223 = validateParameter(valid_612223, JString, required = false,
                                 default = nil)
  if valid_612223 != nil:
    section.add "NextToken", valid_612223
  var valid_612224 = formData.getOrDefault("MaxRecords")
  valid_612224 = validateParameter(valid_612224, JInt, required = false, default = nil)
  if valid_612224 != nil:
    section.add "MaxRecords", valid_612224
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612225: Call_PostDescribeLoadBalancers_612210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_612225.validator(path, query, header, formData, body)
  let scheme = call_612225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612225.url(scheme.get, call_612225.host, call_612225.base,
                         call_612225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612225, url, valid)

proc call*(call_612226: Call_PostDescribeLoadBalancers_612210;
          AutoScalingGroupName: string; NextToken: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612227 = newJObject()
  var formData_612228 = newJObject()
  add(formData_612228, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612228, "NextToken", newJString(NextToken))
  add(formData_612228, "MaxRecords", newJInt(MaxRecords))
  add(query_612227, "Action", newJString(Action))
  add(query_612227, "Version", newJString(Version))
  result = call_612226.call(nil, query_612227, nil, formData_612228, nil)

var postDescribeLoadBalancers* = Call_PostDescribeLoadBalancers_612210(
    name: "postDescribeLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_PostDescribeLoadBalancers_612211, base: "/",
    url: url_PostDescribeLoadBalancers_612212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoadBalancers_612192 = ref object of OpenApiRestCall_610658
proc url_GetDescribeLoadBalancers_612194(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoadBalancers_612193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612195 = query.getOrDefault("NextToken")
  valid_612195 = validateParameter(valid_612195, JString, required = false,
                                 default = nil)
  if valid_612195 != nil:
    section.add "NextToken", valid_612195
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612196 = query.getOrDefault("AutoScalingGroupName")
  valid_612196 = validateParameter(valid_612196, JString, required = true,
                                 default = nil)
  if valid_612196 != nil:
    section.add "AutoScalingGroupName", valid_612196
  var valid_612197 = query.getOrDefault("Action")
  valid_612197 = validateParameter(valid_612197, JString, required = true,
                                 default = newJString("DescribeLoadBalancers"))
  if valid_612197 != nil:
    section.add "Action", valid_612197
  var valid_612198 = query.getOrDefault("Version")
  valid_612198 = validateParameter(valid_612198, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612198 != nil:
    section.add "Version", valid_612198
  var valid_612199 = query.getOrDefault("MaxRecords")
  valid_612199 = validateParameter(valid_612199, JInt, required = false, default = nil)
  if valid_612199 != nil:
    section.add "MaxRecords", valid_612199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612200 = header.getOrDefault("X-Amz-Signature")
  valid_612200 = validateParameter(valid_612200, JString, required = false,
                                 default = nil)
  if valid_612200 != nil:
    section.add "X-Amz-Signature", valid_612200
  var valid_612201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612201 = validateParameter(valid_612201, JString, required = false,
                                 default = nil)
  if valid_612201 != nil:
    section.add "X-Amz-Content-Sha256", valid_612201
  var valid_612202 = header.getOrDefault("X-Amz-Date")
  valid_612202 = validateParameter(valid_612202, JString, required = false,
                                 default = nil)
  if valid_612202 != nil:
    section.add "X-Amz-Date", valid_612202
  var valid_612203 = header.getOrDefault("X-Amz-Credential")
  valid_612203 = validateParameter(valid_612203, JString, required = false,
                                 default = nil)
  if valid_612203 != nil:
    section.add "X-Amz-Credential", valid_612203
  var valid_612204 = header.getOrDefault("X-Amz-Security-Token")
  valid_612204 = validateParameter(valid_612204, JString, required = false,
                                 default = nil)
  if valid_612204 != nil:
    section.add "X-Amz-Security-Token", valid_612204
  var valid_612205 = header.getOrDefault("X-Amz-Algorithm")
  valid_612205 = validateParameter(valid_612205, JString, required = false,
                                 default = nil)
  if valid_612205 != nil:
    section.add "X-Amz-Algorithm", valid_612205
  var valid_612206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612206 = validateParameter(valid_612206, JString, required = false,
                                 default = nil)
  if valid_612206 != nil:
    section.add "X-Amz-SignedHeaders", valid_612206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612207: Call_GetDescribeLoadBalancers_612192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ## 
  let valid = call_612207.validator(path, query, header, formData, body)
  let scheme = call_612207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612207.url(scheme.get, call_612207.host, call_612207.base,
                         call_612207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612207, url, valid)

proc call*(call_612208: Call_GetDescribeLoadBalancers_612192;
          AutoScalingGroupName: string; NextToken: string = "";
          Action: string = "DescribeLoadBalancers"; Version: string = "2011-01-01";
          MaxRecords: int = 0): Recallable =
  ## getDescribeLoadBalancers
  ## <p>Describes the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DescribeLoadBalancerTargetGroups</a> instead.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_612209 = newJObject()
  add(query_612209, "NextToken", newJString(NextToken))
  add(query_612209, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612209, "Action", newJString(Action))
  add(query_612209, "Version", newJString(Version))
  add(query_612209, "MaxRecords", newJInt(MaxRecords))
  result = call_612208.call(nil, query_612209, nil, nil, nil)

var getDescribeLoadBalancers* = Call_GetDescribeLoadBalancers_612192(
    name: "getDescribeLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeLoadBalancers",
    validator: validate_GetDescribeLoadBalancers_612193, base: "/",
    url: url_GetDescribeLoadBalancers_612194, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeMetricCollectionTypes_612244 = ref object of OpenApiRestCall_610658
proc url_PostDescribeMetricCollectionTypes_612246(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeMetricCollectionTypes_612245(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612247 = query.getOrDefault("Action")
  valid_612247 = validateParameter(valid_612247, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_612247 != nil:
    section.add "Action", valid_612247
  var valid_612248 = query.getOrDefault("Version")
  valid_612248 = validateParameter(valid_612248, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612248 != nil:
    section.add "Version", valid_612248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612249 = header.getOrDefault("X-Amz-Signature")
  valid_612249 = validateParameter(valid_612249, JString, required = false,
                                 default = nil)
  if valid_612249 != nil:
    section.add "X-Amz-Signature", valid_612249
  var valid_612250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612250 = validateParameter(valid_612250, JString, required = false,
                                 default = nil)
  if valid_612250 != nil:
    section.add "X-Amz-Content-Sha256", valid_612250
  var valid_612251 = header.getOrDefault("X-Amz-Date")
  valid_612251 = validateParameter(valid_612251, JString, required = false,
                                 default = nil)
  if valid_612251 != nil:
    section.add "X-Amz-Date", valid_612251
  var valid_612252 = header.getOrDefault("X-Amz-Credential")
  valid_612252 = validateParameter(valid_612252, JString, required = false,
                                 default = nil)
  if valid_612252 != nil:
    section.add "X-Amz-Credential", valid_612252
  var valid_612253 = header.getOrDefault("X-Amz-Security-Token")
  valid_612253 = validateParameter(valid_612253, JString, required = false,
                                 default = nil)
  if valid_612253 != nil:
    section.add "X-Amz-Security-Token", valid_612253
  var valid_612254 = header.getOrDefault("X-Amz-Algorithm")
  valid_612254 = validateParameter(valid_612254, JString, required = false,
                                 default = nil)
  if valid_612254 != nil:
    section.add "X-Amz-Algorithm", valid_612254
  var valid_612255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612255 = validateParameter(valid_612255, JString, required = false,
                                 default = nil)
  if valid_612255 != nil:
    section.add "X-Amz-SignedHeaders", valid_612255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612256: Call_PostDescribeMetricCollectionTypes_612244;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_612256.validator(path, query, header, formData, body)
  let scheme = call_612256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612256.url(scheme.get, call_612256.host, call_612256.base,
                         call_612256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612256, url, valid)

proc call*(call_612257: Call_PostDescribeMetricCollectionTypes_612244;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612258 = newJObject()
  add(query_612258, "Action", newJString(Action))
  add(query_612258, "Version", newJString(Version))
  result = call_612257.call(nil, query_612258, nil, nil, nil)

var postDescribeMetricCollectionTypes* = Call_PostDescribeMetricCollectionTypes_612244(
    name: "postDescribeMetricCollectionTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_PostDescribeMetricCollectionTypes_612245, base: "/",
    url: url_PostDescribeMetricCollectionTypes_612246,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeMetricCollectionTypes_612229 = ref object of OpenApiRestCall_610658
proc url_GetDescribeMetricCollectionTypes_612231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeMetricCollectionTypes_612230(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612232 = query.getOrDefault("Action")
  valid_612232 = validateParameter(valid_612232, JString, required = true, default = newJString(
      "DescribeMetricCollectionTypes"))
  if valid_612232 != nil:
    section.add "Action", valid_612232
  var valid_612233 = query.getOrDefault("Version")
  valid_612233 = validateParameter(valid_612233, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612233 != nil:
    section.add "Version", valid_612233
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612234 = header.getOrDefault("X-Amz-Signature")
  valid_612234 = validateParameter(valid_612234, JString, required = false,
                                 default = nil)
  if valid_612234 != nil:
    section.add "X-Amz-Signature", valid_612234
  var valid_612235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612235 = validateParameter(valid_612235, JString, required = false,
                                 default = nil)
  if valid_612235 != nil:
    section.add "X-Amz-Content-Sha256", valid_612235
  var valid_612236 = header.getOrDefault("X-Amz-Date")
  valid_612236 = validateParameter(valid_612236, JString, required = false,
                                 default = nil)
  if valid_612236 != nil:
    section.add "X-Amz-Date", valid_612236
  var valid_612237 = header.getOrDefault("X-Amz-Credential")
  valid_612237 = validateParameter(valid_612237, JString, required = false,
                                 default = nil)
  if valid_612237 != nil:
    section.add "X-Amz-Credential", valid_612237
  var valid_612238 = header.getOrDefault("X-Amz-Security-Token")
  valid_612238 = validateParameter(valid_612238, JString, required = false,
                                 default = nil)
  if valid_612238 != nil:
    section.add "X-Amz-Security-Token", valid_612238
  var valid_612239 = header.getOrDefault("X-Amz-Algorithm")
  valid_612239 = validateParameter(valid_612239, JString, required = false,
                                 default = nil)
  if valid_612239 != nil:
    section.add "X-Amz-Algorithm", valid_612239
  var valid_612240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612240 = validateParameter(valid_612240, JString, required = false,
                                 default = nil)
  if valid_612240 != nil:
    section.add "X-Amz-SignedHeaders", valid_612240
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612241: Call_GetDescribeMetricCollectionTypes_612229;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ## 
  let valid = call_612241.validator(path, query, header, formData, body)
  let scheme = call_612241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612241.url(scheme.get, call_612241.host, call_612241.base,
                         call_612241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612241, url, valid)

proc call*(call_612242: Call_GetDescribeMetricCollectionTypes_612229;
          Action: string = "DescribeMetricCollectionTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeMetricCollectionTypes
  ## <p>Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.</p> <p>The <code>GroupStandbyInstances</code> metric is not returned by default. You must explicitly request this metric when calling <a>EnableMetricsCollection</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612243 = newJObject()
  add(query_612243, "Action", newJString(Action))
  add(query_612243, "Version", newJString(Version))
  result = call_612242.call(nil, query_612243, nil, nil, nil)

var getDescribeMetricCollectionTypes* = Call_GetDescribeMetricCollectionTypes_612229(
    name: "getDescribeMetricCollectionTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeMetricCollectionTypes",
    validator: validate_GetDescribeMetricCollectionTypes_612230, base: "/",
    url: url_GetDescribeMetricCollectionTypes_612231,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNotificationConfigurations_612277 = ref object of OpenApiRestCall_610658
proc url_PostDescribeNotificationConfigurations_612279(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeNotificationConfigurations_612278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612280 = query.getOrDefault("Action")
  valid_612280 = validateParameter(valid_612280, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_612280 != nil:
    section.add "Action", valid_612280
  var valid_612281 = query.getOrDefault("Version")
  valid_612281 = validateParameter(valid_612281, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612281 != nil:
    section.add "Version", valid_612281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612282 = header.getOrDefault("X-Amz-Signature")
  valid_612282 = validateParameter(valid_612282, JString, required = false,
                                 default = nil)
  if valid_612282 != nil:
    section.add "X-Amz-Signature", valid_612282
  var valid_612283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612283 = validateParameter(valid_612283, JString, required = false,
                                 default = nil)
  if valid_612283 != nil:
    section.add "X-Amz-Content-Sha256", valid_612283
  var valid_612284 = header.getOrDefault("X-Amz-Date")
  valid_612284 = validateParameter(valid_612284, JString, required = false,
                                 default = nil)
  if valid_612284 != nil:
    section.add "X-Amz-Date", valid_612284
  var valid_612285 = header.getOrDefault("X-Amz-Credential")
  valid_612285 = validateParameter(valid_612285, JString, required = false,
                                 default = nil)
  if valid_612285 != nil:
    section.add "X-Amz-Credential", valid_612285
  var valid_612286 = header.getOrDefault("X-Amz-Security-Token")
  valid_612286 = validateParameter(valid_612286, JString, required = false,
                                 default = nil)
  if valid_612286 != nil:
    section.add "X-Amz-Security-Token", valid_612286
  var valid_612287 = header.getOrDefault("X-Amz-Algorithm")
  valid_612287 = validateParameter(valid_612287, JString, required = false,
                                 default = nil)
  if valid_612287 != nil:
    section.add "X-Amz-Algorithm", valid_612287
  var valid_612288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612288 = validateParameter(valid_612288, JString, required = false,
                                 default = nil)
  if valid_612288 != nil:
    section.add "X-Amz-SignedHeaders", valid_612288
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  section = newJObject()
  var valid_612289 = formData.getOrDefault("NextToken")
  valid_612289 = validateParameter(valid_612289, JString, required = false,
                                 default = nil)
  if valid_612289 != nil:
    section.add "NextToken", valid_612289
  var valid_612290 = formData.getOrDefault("MaxRecords")
  valid_612290 = validateParameter(valid_612290, JInt, required = false, default = nil)
  if valid_612290 != nil:
    section.add "MaxRecords", valid_612290
  var valid_612291 = formData.getOrDefault("AutoScalingGroupNames")
  valid_612291 = validateParameter(valid_612291, JArray, required = false,
                                 default = nil)
  if valid_612291 != nil:
    section.add "AutoScalingGroupNames", valid_612291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612292: Call_PostDescribeNotificationConfigurations_612277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_612292.validator(path, query, header, formData, body)
  let scheme = call_612292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612292.url(scheme.get, call_612292.host, call_612292.base,
                         call_612292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612292, url, valid)

proc call*(call_612293: Call_PostDescribeNotificationConfigurations_612277;
          NextToken: string = ""; MaxRecords: int = 0;
          AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeNotificationConfigurations";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612294 = newJObject()
  var formData_612295 = newJObject()
  add(formData_612295, "NextToken", newJString(NextToken))
  add(formData_612295, "MaxRecords", newJInt(MaxRecords))
  if AutoScalingGroupNames != nil:
    formData_612295.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_612294, "Action", newJString(Action))
  add(query_612294, "Version", newJString(Version))
  result = call_612293.call(nil, query_612294, nil, formData_612295, nil)

var postDescribeNotificationConfigurations* = Call_PostDescribeNotificationConfigurations_612277(
    name: "postDescribeNotificationConfigurations", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_PostDescribeNotificationConfigurations_612278, base: "/",
    url: url_PostDescribeNotificationConfigurations_612279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNotificationConfigurations_612259 = ref object of OpenApiRestCall_610658
proc url_GetDescribeNotificationConfigurations_612261(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeNotificationConfigurations_612260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612262 = query.getOrDefault("NextToken")
  valid_612262 = validateParameter(valid_612262, JString, required = false,
                                 default = nil)
  if valid_612262 != nil:
    section.add "NextToken", valid_612262
  var valid_612263 = query.getOrDefault("AutoScalingGroupNames")
  valid_612263 = validateParameter(valid_612263, JArray, required = false,
                                 default = nil)
  if valid_612263 != nil:
    section.add "AutoScalingGroupNames", valid_612263
  var valid_612264 = query.getOrDefault("Action")
  valid_612264 = validateParameter(valid_612264, JString, required = true, default = newJString(
      "DescribeNotificationConfigurations"))
  if valid_612264 != nil:
    section.add "Action", valid_612264
  var valid_612265 = query.getOrDefault("Version")
  valid_612265 = validateParameter(valid_612265, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612265 != nil:
    section.add "Version", valid_612265
  var valid_612266 = query.getOrDefault("MaxRecords")
  valid_612266 = validateParameter(valid_612266, JInt, required = false, default = nil)
  if valid_612266 != nil:
    section.add "MaxRecords", valid_612266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612267 = header.getOrDefault("X-Amz-Signature")
  valid_612267 = validateParameter(valid_612267, JString, required = false,
                                 default = nil)
  if valid_612267 != nil:
    section.add "X-Amz-Signature", valid_612267
  var valid_612268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612268 = validateParameter(valid_612268, JString, required = false,
                                 default = nil)
  if valid_612268 != nil:
    section.add "X-Amz-Content-Sha256", valid_612268
  var valid_612269 = header.getOrDefault("X-Amz-Date")
  valid_612269 = validateParameter(valid_612269, JString, required = false,
                                 default = nil)
  if valid_612269 != nil:
    section.add "X-Amz-Date", valid_612269
  var valid_612270 = header.getOrDefault("X-Amz-Credential")
  valid_612270 = validateParameter(valid_612270, JString, required = false,
                                 default = nil)
  if valid_612270 != nil:
    section.add "X-Amz-Credential", valid_612270
  var valid_612271 = header.getOrDefault("X-Amz-Security-Token")
  valid_612271 = validateParameter(valid_612271, JString, required = false,
                                 default = nil)
  if valid_612271 != nil:
    section.add "X-Amz-Security-Token", valid_612271
  var valid_612272 = header.getOrDefault("X-Amz-Algorithm")
  valid_612272 = validateParameter(valid_612272, JString, required = false,
                                 default = nil)
  if valid_612272 != nil:
    section.add "X-Amz-Algorithm", valid_612272
  var valid_612273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612273 = validateParameter(valid_612273, JString, required = false,
                                 default = nil)
  if valid_612273 != nil:
    section.add "X-Amz-SignedHeaders", valid_612273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612274: Call_GetDescribeNotificationConfigurations_612259;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ## 
  let valid = call_612274.validator(path, query, header, formData, body)
  let scheme = call_612274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612274.url(scheme.get, call_612274.host, call_612274.base,
                         call_612274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612274, url, valid)

proc call*(call_612275: Call_GetDescribeNotificationConfigurations_612259;
          NextToken: string = ""; AutoScalingGroupNames: JsonNode = nil;
          Action: string = "DescribeNotificationConfigurations";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeNotificationConfigurations
  ## Describes the notification actions associated with the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupNames: JArray
  ##                        : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_612276 = newJObject()
  add(query_612276, "NextToken", newJString(NextToken))
  if AutoScalingGroupNames != nil:
    query_612276.add "AutoScalingGroupNames", AutoScalingGroupNames
  add(query_612276, "Action", newJString(Action))
  add(query_612276, "Version", newJString(Version))
  add(query_612276, "MaxRecords", newJInt(MaxRecords))
  result = call_612275.call(nil, query_612276, nil, nil, nil)

var getDescribeNotificationConfigurations* = Call_GetDescribeNotificationConfigurations_612259(
    name: "getDescribeNotificationConfigurations", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeNotificationConfigurations",
    validator: validate_GetDescribeNotificationConfigurations_612260, base: "/",
    url: url_GetDescribeNotificationConfigurations_612261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePolicies_612316 = ref object of OpenApiRestCall_610658
proc url_PostDescribePolicies_612318(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePolicies_612317(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612319 = query.getOrDefault("Action")
  valid_612319 = validateParameter(valid_612319, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_612319 != nil:
    section.add "Action", valid_612319
  var valid_612320 = query.getOrDefault("Version")
  valid_612320 = validateParameter(valid_612320, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612320 != nil:
    section.add "Version", valid_612320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612321 = header.getOrDefault("X-Amz-Signature")
  valid_612321 = validateParameter(valid_612321, JString, required = false,
                                 default = nil)
  if valid_612321 != nil:
    section.add "X-Amz-Signature", valid_612321
  var valid_612322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612322 = validateParameter(valid_612322, JString, required = false,
                                 default = nil)
  if valid_612322 != nil:
    section.add "X-Amz-Content-Sha256", valid_612322
  var valid_612323 = header.getOrDefault("X-Amz-Date")
  valid_612323 = validateParameter(valid_612323, JString, required = false,
                                 default = nil)
  if valid_612323 != nil:
    section.add "X-Amz-Date", valid_612323
  var valid_612324 = header.getOrDefault("X-Amz-Credential")
  valid_612324 = validateParameter(valid_612324, JString, required = false,
                                 default = nil)
  if valid_612324 != nil:
    section.add "X-Amz-Credential", valid_612324
  var valid_612325 = header.getOrDefault("X-Amz-Security-Token")
  valid_612325 = validateParameter(valid_612325, JString, required = false,
                                 default = nil)
  if valid_612325 != nil:
    section.add "X-Amz-Security-Token", valid_612325
  var valid_612326 = header.getOrDefault("X-Amz-Algorithm")
  valid_612326 = validateParameter(valid_612326, JString, required = false,
                                 default = nil)
  if valid_612326 != nil:
    section.add "X-Amz-Algorithm", valid_612326
  var valid_612327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612327 = validateParameter(valid_612327, JString, required = false,
                                 default = nil)
  if valid_612327 != nil:
    section.add "X-Amz-SignedHeaders", valid_612327
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  section = newJObject()
  var valid_612328 = formData.getOrDefault("AutoScalingGroupName")
  valid_612328 = validateParameter(valid_612328, JString, required = false,
                                 default = nil)
  if valid_612328 != nil:
    section.add "AutoScalingGroupName", valid_612328
  var valid_612329 = formData.getOrDefault("NextToken")
  valid_612329 = validateParameter(valid_612329, JString, required = false,
                                 default = nil)
  if valid_612329 != nil:
    section.add "NextToken", valid_612329
  var valid_612330 = formData.getOrDefault("MaxRecords")
  valid_612330 = validateParameter(valid_612330, JInt, required = false, default = nil)
  if valid_612330 != nil:
    section.add "MaxRecords", valid_612330
  var valid_612331 = formData.getOrDefault("PolicyTypes")
  valid_612331 = validateParameter(valid_612331, JArray, required = false,
                                 default = nil)
  if valid_612331 != nil:
    section.add "PolicyTypes", valid_612331
  var valid_612332 = formData.getOrDefault("PolicyNames")
  valid_612332 = validateParameter(valid_612332, JArray, required = false,
                                 default = nil)
  if valid_612332 != nil:
    section.add "PolicyNames", valid_612332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612333: Call_PostDescribePolicies_612316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_612333.validator(path, query, header, formData, body)
  let scheme = call_612333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612333.url(scheme.get, call_612333.host, call_612333.base,
                         call_612333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612333, url, valid)

proc call*(call_612334: Call_PostDescribePolicies_612316;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; PolicyTypes: JsonNode = nil; PolicyNames: JsonNode = nil;
          Action: string = "DescribePolicies"; Version: string = "2011-01-01"): Recallable =
  ## postDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612335 = newJObject()
  var formData_612336 = newJObject()
  add(formData_612336, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612336, "NextToken", newJString(NextToken))
  add(formData_612336, "MaxRecords", newJInt(MaxRecords))
  if PolicyTypes != nil:
    formData_612336.add "PolicyTypes", PolicyTypes
  if PolicyNames != nil:
    formData_612336.add "PolicyNames", PolicyNames
  add(query_612335, "Action", newJString(Action))
  add(query_612335, "Version", newJString(Version))
  result = call_612334.call(nil, query_612335, nil, formData_612336, nil)

var postDescribePolicies* = Call_PostDescribePolicies_612316(
    name: "postDescribePolicies", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_PostDescribePolicies_612317, base: "/",
    url: url_PostDescribePolicies_612318, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePolicies_612296 = ref object of OpenApiRestCall_610658
proc url_GetDescribePolicies_612298(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePolicies_612297(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  section = newJObject()
  var valid_612299 = query.getOrDefault("NextToken")
  valid_612299 = validateParameter(valid_612299, JString, required = false,
                                 default = nil)
  if valid_612299 != nil:
    section.add "NextToken", valid_612299
  var valid_612300 = query.getOrDefault("AutoScalingGroupName")
  valid_612300 = validateParameter(valid_612300, JString, required = false,
                                 default = nil)
  if valid_612300 != nil:
    section.add "AutoScalingGroupName", valid_612300
  var valid_612301 = query.getOrDefault("Action")
  valid_612301 = validateParameter(valid_612301, JString, required = true,
                                 default = newJString("DescribePolicies"))
  if valid_612301 != nil:
    section.add "Action", valid_612301
  var valid_612302 = query.getOrDefault("PolicyTypes")
  valid_612302 = validateParameter(valid_612302, JArray, required = false,
                                 default = nil)
  if valid_612302 != nil:
    section.add "PolicyTypes", valid_612302
  var valid_612303 = query.getOrDefault("Version")
  valid_612303 = validateParameter(valid_612303, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612303 != nil:
    section.add "Version", valid_612303
  var valid_612304 = query.getOrDefault("MaxRecords")
  valid_612304 = validateParameter(valid_612304, JInt, required = false, default = nil)
  if valid_612304 != nil:
    section.add "MaxRecords", valid_612304
  var valid_612305 = query.getOrDefault("PolicyNames")
  valid_612305 = validateParameter(valid_612305, JArray, required = false,
                                 default = nil)
  if valid_612305 != nil:
    section.add "PolicyNames", valid_612305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612306 = header.getOrDefault("X-Amz-Signature")
  valid_612306 = validateParameter(valid_612306, JString, required = false,
                                 default = nil)
  if valid_612306 != nil:
    section.add "X-Amz-Signature", valid_612306
  var valid_612307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612307 = validateParameter(valid_612307, JString, required = false,
                                 default = nil)
  if valid_612307 != nil:
    section.add "X-Amz-Content-Sha256", valid_612307
  var valid_612308 = header.getOrDefault("X-Amz-Date")
  valid_612308 = validateParameter(valid_612308, JString, required = false,
                                 default = nil)
  if valid_612308 != nil:
    section.add "X-Amz-Date", valid_612308
  var valid_612309 = header.getOrDefault("X-Amz-Credential")
  valid_612309 = validateParameter(valid_612309, JString, required = false,
                                 default = nil)
  if valid_612309 != nil:
    section.add "X-Amz-Credential", valid_612309
  var valid_612310 = header.getOrDefault("X-Amz-Security-Token")
  valid_612310 = validateParameter(valid_612310, JString, required = false,
                                 default = nil)
  if valid_612310 != nil:
    section.add "X-Amz-Security-Token", valid_612310
  var valid_612311 = header.getOrDefault("X-Amz-Algorithm")
  valid_612311 = validateParameter(valid_612311, JString, required = false,
                                 default = nil)
  if valid_612311 != nil:
    section.add "X-Amz-Algorithm", valid_612311
  var valid_612312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612312 = validateParameter(valid_612312, JString, required = false,
                                 default = nil)
  if valid_612312 != nil:
    section.add "X-Amz-SignedHeaders", valid_612312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612313: Call_GetDescribePolicies_612296; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the policies for the specified Auto Scaling group.
  ## 
  let valid = call_612313.validator(path, query, header, formData, body)
  let scheme = call_612313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612313.url(scheme.get, call_612313.host, call_612313.base,
                         call_612313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612313, url, valid)

proc call*(call_612314: Call_GetDescribePolicies_612296; NextToken: string = "";
          AutoScalingGroupName: string = ""; Action: string = "DescribePolicies";
          PolicyTypes: JsonNode = nil; Version: string = "2011-01-01";
          MaxRecords: int = 0; PolicyNames: JsonNode = nil): Recallable =
  ## getDescribePolicies
  ## Describes the policies for the specified Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   PolicyTypes: JArray
  ##              : One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   PolicyNames: JArray
  ##              : The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
  var query_612315 = newJObject()
  add(query_612315, "NextToken", newJString(NextToken))
  add(query_612315, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612315, "Action", newJString(Action))
  if PolicyTypes != nil:
    query_612315.add "PolicyTypes", PolicyTypes
  add(query_612315, "Version", newJString(Version))
  add(query_612315, "MaxRecords", newJInt(MaxRecords))
  if PolicyNames != nil:
    query_612315.add "PolicyNames", PolicyNames
  result = call_612314.call(nil, query_612315, nil, nil, nil)

var getDescribePolicies* = Call_GetDescribePolicies_612296(
    name: "getDescribePolicies", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribePolicies",
    validator: validate_GetDescribePolicies_612297, base: "/",
    url: url_GetDescribePolicies_612298, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingActivities_612356 = ref object of OpenApiRestCall_610658
proc url_PostDescribeScalingActivities_612358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingActivities_612357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612359 = query.getOrDefault("Action")
  valid_612359 = validateParameter(valid_612359, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_612359 != nil:
    section.add "Action", valid_612359
  var valid_612360 = query.getOrDefault("Version")
  valid_612360 = validateParameter(valid_612360, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612360 != nil:
    section.add "Version", valid_612360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612361 = header.getOrDefault("X-Amz-Signature")
  valid_612361 = validateParameter(valid_612361, JString, required = false,
                                 default = nil)
  if valid_612361 != nil:
    section.add "X-Amz-Signature", valid_612361
  var valid_612362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612362 = validateParameter(valid_612362, JString, required = false,
                                 default = nil)
  if valid_612362 != nil:
    section.add "X-Amz-Content-Sha256", valid_612362
  var valid_612363 = header.getOrDefault("X-Amz-Date")
  valid_612363 = validateParameter(valid_612363, JString, required = false,
                                 default = nil)
  if valid_612363 != nil:
    section.add "X-Amz-Date", valid_612363
  var valid_612364 = header.getOrDefault("X-Amz-Credential")
  valid_612364 = validateParameter(valid_612364, JString, required = false,
                                 default = nil)
  if valid_612364 != nil:
    section.add "X-Amz-Credential", valid_612364
  var valid_612365 = header.getOrDefault("X-Amz-Security-Token")
  valid_612365 = validateParameter(valid_612365, JString, required = false,
                                 default = nil)
  if valid_612365 != nil:
    section.add "X-Amz-Security-Token", valid_612365
  var valid_612366 = header.getOrDefault("X-Amz-Algorithm")
  valid_612366 = validateParameter(valid_612366, JString, required = false,
                                 default = nil)
  if valid_612366 != nil:
    section.add "X-Amz-Algorithm", valid_612366
  var valid_612367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612367 = validateParameter(valid_612367, JString, required = false,
                                 default = nil)
  if valid_612367 != nil:
    section.add "X-Amz-SignedHeaders", valid_612367
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  section = newJObject()
  var valid_612368 = formData.getOrDefault("AutoScalingGroupName")
  valid_612368 = validateParameter(valid_612368, JString, required = false,
                                 default = nil)
  if valid_612368 != nil:
    section.add "AutoScalingGroupName", valid_612368
  var valid_612369 = formData.getOrDefault("NextToken")
  valid_612369 = validateParameter(valid_612369, JString, required = false,
                                 default = nil)
  if valid_612369 != nil:
    section.add "NextToken", valid_612369
  var valid_612370 = formData.getOrDefault("MaxRecords")
  valid_612370 = validateParameter(valid_612370, JInt, required = false, default = nil)
  if valid_612370 != nil:
    section.add "MaxRecords", valid_612370
  var valid_612371 = formData.getOrDefault("ActivityIds")
  valid_612371 = validateParameter(valid_612371, JArray, required = false,
                                 default = nil)
  if valid_612371 != nil:
    section.add "ActivityIds", valid_612371
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612372: Call_PostDescribeScalingActivities_612356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_612372.validator(path, query, header, formData, body)
  let scheme = call_612372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612372.url(scheme.get, call_612372.host, call_612372.base,
                         call_612372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612372, url, valid)

proc call*(call_612373: Call_PostDescribeScalingActivities_612356;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; Action: string = "DescribeScalingActivities";
          Version: string = "2011-01-01"; ActivityIds: JsonNode = nil): Recallable =
  ## postDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  var query_612374 = newJObject()
  var formData_612375 = newJObject()
  add(formData_612375, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612375, "NextToken", newJString(NextToken))
  add(formData_612375, "MaxRecords", newJInt(MaxRecords))
  add(query_612374, "Action", newJString(Action))
  add(query_612374, "Version", newJString(Version))
  if ActivityIds != nil:
    formData_612375.add "ActivityIds", ActivityIds
  result = call_612373.call(nil, query_612374, nil, formData_612375, nil)

var postDescribeScalingActivities* = Call_PostDescribeScalingActivities_612356(
    name: "postDescribeScalingActivities", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_PostDescribeScalingActivities_612357, base: "/",
    url: url_PostDescribeScalingActivities_612358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingActivities_612337 = ref object of OpenApiRestCall_610658
proc url_GetDescribeScalingActivities_612339(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingActivities_612338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612340 = query.getOrDefault("ActivityIds")
  valid_612340 = validateParameter(valid_612340, JArray, required = false,
                                 default = nil)
  if valid_612340 != nil:
    section.add "ActivityIds", valid_612340
  var valid_612341 = query.getOrDefault("NextToken")
  valid_612341 = validateParameter(valid_612341, JString, required = false,
                                 default = nil)
  if valid_612341 != nil:
    section.add "NextToken", valid_612341
  var valid_612342 = query.getOrDefault("AutoScalingGroupName")
  valid_612342 = validateParameter(valid_612342, JString, required = false,
                                 default = nil)
  if valid_612342 != nil:
    section.add "AutoScalingGroupName", valid_612342
  var valid_612343 = query.getOrDefault("Action")
  valid_612343 = validateParameter(valid_612343, JString, required = true, default = newJString(
      "DescribeScalingActivities"))
  if valid_612343 != nil:
    section.add "Action", valid_612343
  var valid_612344 = query.getOrDefault("Version")
  valid_612344 = validateParameter(valid_612344, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612344 != nil:
    section.add "Version", valid_612344
  var valid_612345 = query.getOrDefault("MaxRecords")
  valid_612345 = validateParameter(valid_612345, JInt, required = false, default = nil)
  if valid_612345 != nil:
    section.add "MaxRecords", valid_612345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612346 = header.getOrDefault("X-Amz-Signature")
  valid_612346 = validateParameter(valid_612346, JString, required = false,
                                 default = nil)
  if valid_612346 != nil:
    section.add "X-Amz-Signature", valid_612346
  var valid_612347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612347 = validateParameter(valid_612347, JString, required = false,
                                 default = nil)
  if valid_612347 != nil:
    section.add "X-Amz-Content-Sha256", valid_612347
  var valid_612348 = header.getOrDefault("X-Amz-Date")
  valid_612348 = validateParameter(valid_612348, JString, required = false,
                                 default = nil)
  if valid_612348 != nil:
    section.add "X-Amz-Date", valid_612348
  var valid_612349 = header.getOrDefault("X-Amz-Credential")
  valid_612349 = validateParameter(valid_612349, JString, required = false,
                                 default = nil)
  if valid_612349 != nil:
    section.add "X-Amz-Credential", valid_612349
  var valid_612350 = header.getOrDefault("X-Amz-Security-Token")
  valid_612350 = validateParameter(valid_612350, JString, required = false,
                                 default = nil)
  if valid_612350 != nil:
    section.add "X-Amz-Security-Token", valid_612350
  var valid_612351 = header.getOrDefault("X-Amz-Algorithm")
  valid_612351 = validateParameter(valid_612351, JString, required = false,
                                 default = nil)
  if valid_612351 != nil:
    section.add "X-Amz-Algorithm", valid_612351
  var valid_612352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612352 = validateParameter(valid_612352, JString, required = false,
                                 default = nil)
  if valid_612352 != nil:
    section.add "X-Amz-SignedHeaders", valid_612352
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612353: Call_GetDescribeScalingActivities_612337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ## 
  let valid = call_612353.validator(path, query, header, formData, body)
  let scheme = call_612353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612353.url(scheme.get, call_612353.host, call_612353.base,
                         call_612353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612353, url, valid)

proc call*(call_612354: Call_GetDescribeScalingActivities_612337;
          ActivityIds: JsonNode = nil; NextToken: string = "";
          AutoScalingGroupName: string = "";
          Action: string = "DescribeScalingActivities";
          Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeScalingActivities
  ## Describes one or more scaling activities for the specified Auto Scaling group.
  ##   ActivityIds: JArray
  ##              : The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.
  var query_612355 = newJObject()
  if ActivityIds != nil:
    query_612355.add "ActivityIds", ActivityIds
  add(query_612355, "NextToken", newJString(NextToken))
  add(query_612355, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612355, "Action", newJString(Action))
  add(query_612355, "Version", newJString(Version))
  add(query_612355, "MaxRecords", newJInt(MaxRecords))
  result = call_612354.call(nil, query_612355, nil, nil, nil)

var getDescribeScalingActivities* = Call_GetDescribeScalingActivities_612337(
    name: "getDescribeScalingActivities", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingActivities",
    validator: validate_GetDescribeScalingActivities_612338, base: "/",
    url: url_GetDescribeScalingActivities_612339,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScalingProcessTypes_612391 = ref object of OpenApiRestCall_610658
proc url_PostDescribeScalingProcessTypes_612393(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScalingProcessTypes_612392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612394 = query.getOrDefault("Action")
  valid_612394 = validateParameter(valid_612394, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_612394 != nil:
    section.add "Action", valid_612394
  var valid_612395 = query.getOrDefault("Version")
  valid_612395 = validateParameter(valid_612395, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612395 != nil:
    section.add "Version", valid_612395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612396 = header.getOrDefault("X-Amz-Signature")
  valid_612396 = validateParameter(valid_612396, JString, required = false,
                                 default = nil)
  if valid_612396 != nil:
    section.add "X-Amz-Signature", valid_612396
  var valid_612397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612397 = validateParameter(valid_612397, JString, required = false,
                                 default = nil)
  if valid_612397 != nil:
    section.add "X-Amz-Content-Sha256", valid_612397
  var valid_612398 = header.getOrDefault("X-Amz-Date")
  valid_612398 = validateParameter(valid_612398, JString, required = false,
                                 default = nil)
  if valid_612398 != nil:
    section.add "X-Amz-Date", valid_612398
  var valid_612399 = header.getOrDefault("X-Amz-Credential")
  valid_612399 = validateParameter(valid_612399, JString, required = false,
                                 default = nil)
  if valid_612399 != nil:
    section.add "X-Amz-Credential", valid_612399
  var valid_612400 = header.getOrDefault("X-Amz-Security-Token")
  valid_612400 = validateParameter(valid_612400, JString, required = false,
                                 default = nil)
  if valid_612400 != nil:
    section.add "X-Amz-Security-Token", valid_612400
  var valid_612401 = header.getOrDefault("X-Amz-Algorithm")
  valid_612401 = validateParameter(valid_612401, JString, required = false,
                                 default = nil)
  if valid_612401 != nil:
    section.add "X-Amz-Algorithm", valid_612401
  var valid_612402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612402 = validateParameter(valid_612402, JString, required = false,
                                 default = nil)
  if valid_612402 != nil:
    section.add "X-Amz-SignedHeaders", valid_612402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612403: Call_PostDescribeScalingProcessTypes_612391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_612403.validator(path, query, header, formData, body)
  let scheme = call_612403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612403.url(scheme.get, call_612403.host, call_612403.base,
                         call_612403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612403, url, valid)

proc call*(call_612404: Call_PostDescribeScalingProcessTypes_612391;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612405 = newJObject()
  add(query_612405, "Action", newJString(Action))
  add(query_612405, "Version", newJString(Version))
  result = call_612404.call(nil, query_612405, nil, nil, nil)

var postDescribeScalingProcessTypes* = Call_PostDescribeScalingProcessTypes_612391(
    name: "postDescribeScalingProcessTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_PostDescribeScalingProcessTypes_612392, base: "/",
    url: url_PostDescribeScalingProcessTypes_612393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScalingProcessTypes_612376 = ref object of OpenApiRestCall_610658
proc url_GetDescribeScalingProcessTypes_612378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScalingProcessTypes_612377(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612379 = query.getOrDefault("Action")
  valid_612379 = validateParameter(valid_612379, JString, required = true, default = newJString(
      "DescribeScalingProcessTypes"))
  if valid_612379 != nil:
    section.add "Action", valid_612379
  var valid_612380 = query.getOrDefault("Version")
  valid_612380 = validateParameter(valid_612380, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612380 != nil:
    section.add "Version", valid_612380
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612381 = header.getOrDefault("X-Amz-Signature")
  valid_612381 = validateParameter(valid_612381, JString, required = false,
                                 default = nil)
  if valid_612381 != nil:
    section.add "X-Amz-Signature", valid_612381
  var valid_612382 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612382 = validateParameter(valid_612382, JString, required = false,
                                 default = nil)
  if valid_612382 != nil:
    section.add "X-Amz-Content-Sha256", valid_612382
  var valid_612383 = header.getOrDefault("X-Amz-Date")
  valid_612383 = validateParameter(valid_612383, JString, required = false,
                                 default = nil)
  if valid_612383 != nil:
    section.add "X-Amz-Date", valid_612383
  var valid_612384 = header.getOrDefault("X-Amz-Credential")
  valid_612384 = validateParameter(valid_612384, JString, required = false,
                                 default = nil)
  if valid_612384 != nil:
    section.add "X-Amz-Credential", valid_612384
  var valid_612385 = header.getOrDefault("X-Amz-Security-Token")
  valid_612385 = validateParameter(valid_612385, JString, required = false,
                                 default = nil)
  if valid_612385 != nil:
    section.add "X-Amz-Security-Token", valid_612385
  var valid_612386 = header.getOrDefault("X-Amz-Algorithm")
  valid_612386 = validateParameter(valid_612386, JString, required = false,
                                 default = nil)
  if valid_612386 != nil:
    section.add "X-Amz-Algorithm", valid_612386
  var valid_612387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612387 = validateParameter(valid_612387, JString, required = false,
                                 default = nil)
  if valid_612387 != nil:
    section.add "X-Amz-SignedHeaders", valid_612387
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612388: Call_GetDescribeScalingProcessTypes_612376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ## 
  let valid = call_612388.validator(path, query, header, formData, body)
  let scheme = call_612388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612388.url(scheme.get, call_612388.host, call_612388.base,
                         call_612388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612388, url, valid)

proc call*(call_612389: Call_GetDescribeScalingProcessTypes_612376;
          Action: string = "DescribeScalingProcessTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeScalingProcessTypes
  ## Describes the scaling process types for use with <a>ResumeProcesses</a> and <a>SuspendProcesses</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612390 = newJObject()
  add(query_612390, "Action", newJString(Action))
  add(query_612390, "Version", newJString(Version))
  result = call_612389.call(nil, query_612390, nil, nil, nil)

var getDescribeScalingProcessTypes* = Call_GetDescribeScalingProcessTypes_612376(
    name: "getDescribeScalingProcessTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeScalingProcessTypes",
    validator: validate_GetDescribeScalingProcessTypes_612377, base: "/",
    url: url_GetDescribeScalingProcessTypes_612378,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_612427 = ref object of OpenApiRestCall_610658
proc url_PostDescribeScheduledActions_612429(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScheduledActions_612428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612430 = query.getOrDefault("Action")
  valid_612430 = validateParameter(valid_612430, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_612430 != nil:
    section.add "Action", valid_612430
  var valid_612431 = query.getOrDefault("Version")
  valid_612431 = validateParameter(valid_612431, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612431 != nil:
    section.add "Version", valid_612431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612432 = header.getOrDefault("X-Amz-Signature")
  valid_612432 = validateParameter(valid_612432, JString, required = false,
                                 default = nil)
  if valid_612432 != nil:
    section.add "X-Amz-Signature", valid_612432
  var valid_612433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612433 = validateParameter(valid_612433, JString, required = false,
                                 default = nil)
  if valid_612433 != nil:
    section.add "X-Amz-Content-Sha256", valid_612433
  var valid_612434 = header.getOrDefault("X-Amz-Date")
  valid_612434 = validateParameter(valid_612434, JString, required = false,
                                 default = nil)
  if valid_612434 != nil:
    section.add "X-Amz-Date", valid_612434
  var valid_612435 = header.getOrDefault("X-Amz-Credential")
  valid_612435 = validateParameter(valid_612435, JString, required = false,
                                 default = nil)
  if valid_612435 != nil:
    section.add "X-Amz-Credential", valid_612435
  var valid_612436 = header.getOrDefault("X-Amz-Security-Token")
  valid_612436 = validateParameter(valid_612436, JString, required = false,
                                 default = nil)
  if valid_612436 != nil:
    section.add "X-Amz-Security-Token", valid_612436
  var valid_612437 = header.getOrDefault("X-Amz-Algorithm")
  valid_612437 = validateParameter(valid_612437, JString, required = false,
                                 default = nil)
  if valid_612437 != nil:
    section.add "X-Amz-Algorithm", valid_612437
  var valid_612438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612438 = validateParameter(valid_612438, JString, required = false,
                                 default = nil)
  if valid_612438 != nil:
    section.add "X-Amz-SignedHeaders", valid_612438
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  section = newJObject()
  var valid_612439 = formData.getOrDefault("AutoScalingGroupName")
  valid_612439 = validateParameter(valid_612439, JString, required = false,
                                 default = nil)
  if valid_612439 != nil:
    section.add "AutoScalingGroupName", valid_612439
  var valid_612440 = formData.getOrDefault("NextToken")
  valid_612440 = validateParameter(valid_612440, JString, required = false,
                                 default = nil)
  if valid_612440 != nil:
    section.add "NextToken", valid_612440
  var valid_612441 = formData.getOrDefault("MaxRecords")
  valid_612441 = validateParameter(valid_612441, JInt, required = false, default = nil)
  if valid_612441 != nil:
    section.add "MaxRecords", valid_612441
  var valid_612442 = formData.getOrDefault("EndTime")
  valid_612442 = validateParameter(valid_612442, JString, required = false,
                                 default = nil)
  if valid_612442 != nil:
    section.add "EndTime", valid_612442
  var valid_612443 = formData.getOrDefault("StartTime")
  valid_612443 = validateParameter(valid_612443, JString, required = false,
                                 default = nil)
  if valid_612443 != nil:
    section.add "StartTime", valid_612443
  var valid_612444 = formData.getOrDefault("ScheduledActionNames")
  valid_612444 = validateParameter(valid_612444, JArray, required = false,
                                 default = nil)
  if valid_612444 != nil:
    section.add "ScheduledActionNames", valid_612444
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612445: Call_PostDescribeScheduledActions_612427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_612445.validator(path, query, header, formData, body)
  let scheme = call_612445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612445.url(scheme.get, call_612445.host, call_612445.base,
                         call_612445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612445, url, valid)

proc call*(call_612446: Call_PostDescribeScheduledActions_612427;
          AutoScalingGroupName: string = ""; NextToken: string = "";
          MaxRecords: int = 0; EndTime: string = ""; StartTime: string = "";
          Action: string = "DescribeScheduledActions";
          Version: string = "2011-01-01"; ScheduledActionNames: JsonNode = nil): Recallable =
  ## postDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  var query_612447 = newJObject()
  var formData_612448 = newJObject()
  add(formData_612448, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612448, "NextToken", newJString(NextToken))
  add(formData_612448, "MaxRecords", newJInt(MaxRecords))
  add(formData_612448, "EndTime", newJString(EndTime))
  add(formData_612448, "StartTime", newJString(StartTime))
  add(query_612447, "Action", newJString(Action))
  add(query_612447, "Version", newJString(Version))
  if ScheduledActionNames != nil:
    formData_612448.add "ScheduledActionNames", ScheduledActionNames
  result = call_612446.call(nil, query_612447, nil, formData_612448, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_612427(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_612428, base: "/",
    url: url_PostDescribeScheduledActions_612429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_612406 = ref object of OpenApiRestCall_610658
proc url_GetDescribeScheduledActions_612408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScheduledActions_612407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   StartTime: JString
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: JString
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612409 = query.getOrDefault("NextToken")
  valid_612409 = validateParameter(valid_612409, JString, required = false,
                                 default = nil)
  if valid_612409 != nil:
    section.add "NextToken", valid_612409
  var valid_612410 = query.getOrDefault("AutoScalingGroupName")
  valid_612410 = validateParameter(valid_612410, JString, required = false,
                                 default = nil)
  if valid_612410 != nil:
    section.add "AutoScalingGroupName", valid_612410
  var valid_612411 = query.getOrDefault("Action")
  valid_612411 = validateParameter(valid_612411, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_612411 != nil:
    section.add "Action", valid_612411
  var valid_612412 = query.getOrDefault("ScheduledActionNames")
  valid_612412 = validateParameter(valid_612412, JArray, required = false,
                                 default = nil)
  if valid_612412 != nil:
    section.add "ScheduledActionNames", valid_612412
  var valid_612413 = query.getOrDefault("StartTime")
  valid_612413 = validateParameter(valid_612413, JString, required = false,
                                 default = nil)
  if valid_612413 != nil:
    section.add "StartTime", valid_612413
  var valid_612414 = query.getOrDefault("EndTime")
  valid_612414 = validateParameter(valid_612414, JString, required = false,
                                 default = nil)
  if valid_612414 != nil:
    section.add "EndTime", valid_612414
  var valid_612415 = query.getOrDefault("Version")
  valid_612415 = validateParameter(valid_612415, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612415 != nil:
    section.add "Version", valid_612415
  var valid_612416 = query.getOrDefault("MaxRecords")
  valid_612416 = validateParameter(valid_612416, JInt, required = false, default = nil)
  if valid_612416 != nil:
    section.add "MaxRecords", valid_612416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612417 = header.getOrDefault("X-Amz-Signature")
  valid_612417 = validateParameter(valid_612417, JString, required = false,
                                 default = nil)
  if valid_612417 != nil:
    section.add "X-Amz-Signature", valid_612417
  var valid_612418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612418 = validateParameter(valid_612418, JString, required = false,
                                 default = nil)
  if valid_612418 != nil:
    section.add "X-Amz-Content-Sha256", valid_612418
  var valid_612419 = header.getOrDefault("X-Amz-Date")
  valid_612419 = validateParameter(valid_612419, JString, required = false,
                                 default = nil)
  if valid_612419 != nil:
    section.add "X-Amz-Date", valid_612419
  var valid_612420 = header.getOrDefault("X-Amz-Credential")
  valid_612420 = validateParameter(valid_612420, JString, required = false,
                                 default = nil)
  if valid_612420 != nil:
    section.add "X-Amz-Credential", valid_612420
  var valid_612421 = header.getOrDefault("X-Amz-Security-Token")
  valid_612421 = validateParameter(valid_612421, JString, required = false,
                                 default = nil)
  if valid_612421 != nil:
    section.add "X-Amz-Security-Token", valid_612421
  var valid_612422 = header.getOrDefault("X-Amz-Algorithm")
  valid_612422 = validateParameter(valid_612422, JString, required = false,
                                 default = nil)
  if valid_612422 != nil:
    section.add "X-Amz-Algorithm", valid_612422
  var valid_612423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612423 = validateParameter(valid_612423, JString, required = false,
                                 default = nil)
  if valid_612423 != nil:
    section.add "X-Amz-SignedHeaders", valid_612423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612424: Call_GetDescribeScheduledActions_612406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ## 
  let valid = call_612424.validator(path, query, header, formData, body)
  let scheme = call_612424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612424.url(scheme.get, call_612424.host, call_612424.base,
                         call_612424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612424, url, valid)

proc call*(call_612425: Call_GetDescribeScheduledActions_612406;
          NextToken: string = ""; AutoScalingGroupName: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionNames: JsonNode = nil; StartTime: string = "";
          EndTime: string = ""; Version: string = "2011-01-01"; MaxRecords: int = 0): Recallable =
  ## getDescribeScheduledActions
  ## Describes the actions scheduled for your Auto Scaling group that haven't run or that have not reached their end time. To describe the actions that have already run, use <a>DescribeScalingActivities</a>.
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScheduledActionNames: JArray
  ##                       : The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
  ##   StartTime: string
  ##            : The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   EndTime: string
  ##          : The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_612426 = newJObject()
  add(query_612426, "NextToken", newJString(NextToken))
  add(query_612426, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612426, "Action", newJString(Action))
  if ScheduledActionNames != nil:
    query_612426.add "ScheduledActionNames", ScheduledActionNames
  add(query_612426, "StartTime", newJString(StartTime))
  add(query_612426, "EndTime", newJString(EndTime))
  add(query_612426, "Version", newJString(Version))
  add(query_612426, "MaxRecords", newJInt(MaxRecords))
  result = call_612425.call(nil, query_612426, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_612406(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_612407, base: "/",
    url: url_GetDescribeScheduledActions_612408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_612467 = ref object of OpenApiRestCall_610658
proc url_PostDescribeTags_612469(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTags_612468(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612470 = query.getOrDefault("Action")
  valid_612470 = validateParameter(valid_612470, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_612470 != nil:
    section.add "Action", valid_612470
  var valid_612471 = query.getOrDefault("Version")
  valid_612471 = validateParameter(valid_612471, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612471 != nil:
    section.add "Version", valid_612471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612472 = header.getOrDefault("X-Amz-Signature")
  valid_612472 = validateParameter(valid_612472, JString, required = false,
                                 default = nil)
  if valid_612472 != nil:
    section.add "X-Amz-Signature", valid_612472
  var valid_612473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612473 = validateParameter(valid_612473, JString, required = false,
                                 default = nil)
  if valid_612473 != nil:
    section.add "X-Amz-Content-Sha256", valid_612473
  var valid_612474 = header.getOrDefault("X-Amz-Date")
  valid_612474 = validateParameter(valid_612474, JString, required = false,
                                 default = nil)
  if valid_612474 != nil:
    section.add "X-Amz-Date", valid_612474
  var valid_612475 = header.getOrDefault("X-Amz-Credential")
  valid_612475 = validateParameter(valid_612475, JString, required = false,
                                 default = nil)
  if valid_612475 != nil:
    section.add "X-Amz-Credential", valid_612475
  var valid_612476 = header.getOrDefault("X-Amz-Security-Token")
  valid_612476 = validateParameter(valid_612476, JString, required = false,
                                 default = nil)
  if valid_612476 != nil:
    section.add "X-Amz-Security-Token", valid_612476
  var valid_612477 = header.getOrDefault("X-Amz-Algorithm")
  valid_612477 = validateParameter(valid_612477, JString, required = false,
                                 default = nil)
  if valid_612477 != nil:
    section.add "X-Amz-Algorithm", valid_612477
  var valid_612478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612478 = validateParameter(valid_612478, JString, required = false,
                                 default = nil)
  if valid_612478 != nil:
    section.add "X-Amz-SignedHeaders", valid_612478
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  section = newJObject()
  var valid_612479 = formData.getOrDefault("NextToken")
  valid_612479 = validateParameter(valid_612479, JString, required = false,
                                 default = nil)
  if valid_612479 != nil:
    section.add "NextToken", valid_612479
  var valid_612480 = formData.getOrDefault("MaxRecords")
  valid_612480 = validateParameter(valid_612480, JInt, required = false, default = nil)
  if valid_612480 != nil:
    section.add "MaxRecords", valid_612480
  var valid_612481 = formData.getOrDefault("Filters")
  valid_612481 = validateParameter(valid_612481, JArray, required = false,
                                 default = nil)
  if valid_612481 != nil:
    section.add "Filters", valid_612481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612482: Call_PostDescribeTags_612467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_612482.validator(path, query, header, formData, body)
  let scheme = call_612482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612482.url(scheme.get, call_612482.host, call_612482.base,
                         call_612482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612482, url, valid)

proc call*(call_612483: Call_PostDescribeTags_612467; NextToken: string = "";
          MaxRecords: int = 0; Action: string = "DescribeTags"; Filters: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   Version: string (required)
  var query_612484 = newJObject()
  var formData_612485 = newJObject()
  add(formData_612485, "NextToken", newJString(NextToken))
  add(formData_612485, "MaxRecords", newJInt(MaxRecords))
  add(query_612484, "Action", newJString(Action))
  if Filters != nil:
    formData_612485.add "Filters", Filters
  add(query_612484, "Version", newJString(Version))
  result = call_612483.call(nil, query_612484, nil, formData_612485, nil)

var postDescribeTags* = Call_PostDescribeTags_612467(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_612468,
    base: "/", url: url_PostDescribeTags_612469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_612449 = ref object of OpenApiRestCall_610658
proc url_GetDescribeTags_612451(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTags_612450(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: JInt
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  section = newJObject()
  var valid_612452 = query.getOrDefault("NextToken")
  valid_612452 = validateParameter(valid_612452, JString, required = false,
                                 default = nil)
  if valid_612452 != nil:
    section.add "NextToken", valid_612452
  var valid_612453 = query.getOrDefault("Action")
  valid_612453 = validateParameter(valid_612453, JString, required = true,
                                 default = newJString("DescribeTags"))
  if valid_612453 != nil:
    section.add "Action", valid_612453
  var valid_612454 = query.getOrDefault("Version")
  valid_612454 = validateParameter(valid_612454, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612454 != nil:
    section.add "Version", valid_612454
  var valid_612455 = query.getOrDefault("Filters")
  valid_612455 = validateParameter(valid_612455, JArray, required = false,
                                 default = nil)
  if valid_612455 != nil:
    section.add "Filters", valid_612455
  var valid_612456 = query.getOrDefault("MaxRecords")
  valid_612456 = validateParameter(valid_612456, JInt, required = false, default = nil)
  if valid_612456 != nil:
    section.add "MaxRecords", valid_612456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612457 = header.getOrDefault("X-Amz-Signature")
  valid_612457 = validateParameter(valid_612457, JString, required = false,
                                 default = nil)
  if valid_612457 != nil:
    section.add "X-Amz-Signature", valid_612457
  var valid_612458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612458 = validateParameter(valid_612458, JString, required = false,
                                 default = nil)
  if valid_612458 != nil:
    section.add "X-Amz-Content-Sha256", valid_612458
  var valid_612459 = header.getOrDefault("X-Amz-Date")
  valid_612459 = validateParameter(valid_612459, JString, required = false,
                                 default = nil)
  if valid_612459 != nil:
    section.add "X-Amz-Date", valid_612459
  var valid_612460 = header.getOrDefault("X-Amz-Credential")
  valid_612460 = validateParameter(valid_612460, JString, required = false,
                                 default = nil)
  if valid_612460 != nil:
    section.add "X-Amz-Credential", valid_612460
  var valid_612461 = header.getOrDefault("X-Amz-Security-Token")
  valid_612461 = validateParameter(valid_612461, JString, required = false,
                                 default = nil)
  if valid_612461 != nil:
    section.add "X-Amz-Security-Token", valid_612461
  var valid_612462 = header.getOrDefault("X-Amz-Algorithm")
  valid_612462 = validateParameter(valid_612462, JString, required = false,
                                 default = nil)
  if valid_612462 != nil:
    section.add "X-Amz-Algorithm", valid_612462
  var valid_612463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612463 = validateParameter(valid_612463, JString, required = false,
                                 default = nil)
  if valid_612463 != nil:
    section.add "X-Amz-SignedHeaders", valid_612463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612464: Call_GetDescribeTags_612449; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ## 
  let valid = call_612464.validator(path, query, header, formData, body)
  let scheme = call_612464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612464.url(scheme.get, call_612464.host, call_612464.base,
                         call_612464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612464, url, valid)

proc call*(call_612465: Call_GetDescribeTags_612449; NextToken: string = "";
          Action: string = "DescribeTags"; Version: string = "2011-01-01";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeTags
  ## <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p>
  ##   NextToken: string
  ##            : The token for the next set of items to return. (You received this token from a previous call.)
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.
  ##   MaxRecords: int
  ##             : The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.
  var query_612466 = newJObject()
  add(query_612466, "NextToken", newJString(NextToken))
  add(query_612466, "Action", newJString(Action))
  add(query_612466, "Version", newJString(Version))
  if Filters != nil:
    query_612466.add "Filters", Filters
  add(query_612466, "MaxRecords", newJInt(MaxRecords))
  result = call_612465.call(nil, query_612466, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_612449(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_612450,
    base: "/", url: url_GetDescribeTags_612451, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTerminationPolicyTypes_612501 = ref object of OpenApiRestCall_610658
proc url_PostDescribeTerminationPolicyTypes_612503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTerminationPolicyTypes_612502(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612504 = query.getOrDefault("Action")
  valid_612504 = validateParameter(valid_612504, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_612504 != nil:
    section.add "Action", valid_612504
  var valid_612505 = query.getOrDefault("Version")
  valid_612505 = validateParameter(valid_612505, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612505 != nil:
    section.add "Version", valid_612505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612506 = header.getOrDefault("X-Amz-Signature")
  valid_612506 = validateParameter(valid_612506, JString, required = false,
                                 default = nil)
  if valid_612506 != nil:
    section.add "X-Amz-Signature", valid_612506
  var valid_612507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612507 = validateParameter(valid_612507, JString, required = false,
                                 default = nil)
  if valid_612507 != nil:
    section.add "X-Amz-Content-Sha256", valid_612507
  var valid_612508 = header.getOrDefault("X-Amz-Date")
  valid_612508 = validateParameter(valid_612508, JString, required = false,
                                 default = nil)
  if valid_612508 != nil:
    section.add "X-Amz-Date", valid_612508
  var valid_612509 = header.getOrDefault("X-Amz-Credential")
  valid_612509 = validateParameter(valid_612509, JString, required = false,
                                 default = nil)
  if valid_612509 != nil:
    section.add "X-Amz-Credential", valid_612509
  var valid_612510 = header.getOrDefault("X-Amz-Security-Token")
  valid_612510 = validateParameter(valid_612510, JString, required = false,
                                 default = nil)
  if valid_612510 != nil:
    section.add "X-Amz-Security-Token", valid_612510
  var valid_612511 = header.getOrDefault("X-Amz-Algorithm")
  valid_612511 = validateParameter(valid_612511, JString, required = false,
                                 default = nil)
  if valid_612511 != nil:
    section.add "X-Amz-Algorithm", valid_612511
  var valid_612512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612512 = validateParameter(valid_612512, JString, required = false,
                                 default = nil)
  if valid_612512 != nil:
    section.add "X-Amz-SignedHeaders", valid_612512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612513: Call_PostDescribeTerminationPolicyTypes_612501;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612513.validator(path, query, header, formData, body)
  let scheme = call_612513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612513.url(scheme.get, call_612513.host, call_612513.base,
                         call_612513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612513, url, valid)

proc call*(call_612514: Call_PostDescribeTerminationPolicyTypes_612501;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## postDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612515 = newJObject()
  add(query_612515, "Action", newJString(Action))
  add(query_612515, "Version", newJString(Version))
  result = call_612514.call(nil, query_612515, nil, nil, nil)

var postDescribeTerminationPolicyTypes* = Call_PostDescribeTerminationPolicyTypes_612501(
    name: "postDescribeTerminationPolicyTypes", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_PostDescribeTerminationPolicyTypes_612502, base: "/",
    url: url_PostDescribeTerminationPolicyTypes_612503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTerminationPolicyTypes_612486 = ref object of OpenApiRestCall_610658
proc url_GetDescribeTerminationPolicyTypes_612488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTerminationPolicyTypes_612487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612489 = query.getOrDefault("Action")
  valid_612489 = validateParameter(valid_612489, JString, required = true, default = newJString(
      "DescribeTerminationPolicyTypes"))
  if valid_612489 != nil:
    section.add "Action", valid_612489
  var valid_612490 = query.getOrDefault("Version")
  valid_612490 = validateParameter(valid_612490, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612490 != nil:
    section.add "Version", valid_612490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612491 = header.getOrDefault("X-Amz-Signature")
  valid_612491 = validateParameter(valid_612491, JString, required = false,
                                 default = nil)
  if valid_612491 != nil:
    section.add "X-Amz-Signature", valid_612491
  var valid_612492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612492 = validateParameter(valid_612492, JString, required = false,
                                 default = nil)
  if valid_612492 != nil:
    section.add "X-Amz-Content-Sha256", valid_612492
  var valid_612493 = header.getOrDefault("X-Amz-Date")
  valid_612493 = validateParameter(valid_612493, JString, required = false,
                                 default = nil)
  if valid_612493 != nil:
    section.add "X-Amz-Date", valid_612493
  var valid_612494 = header.getOrDefault("X-Amz-Credential")
  valid_612494 = validateParameter(valid_612494, JString, required = false,
                                 default = nil)
  if valid_612494 != nil:
    section.add "X-Amz-Credential", valid_612494
  var valid_612495 = header.getOrDefault("X-Amz-Security-Token")
  valid_612495 = validateParameter(valid_612495, JString, required = false,
                                 default = nil)
  if valid_612495 != nil:
    section.add "X-Amz-Security-Token", valid_612495
  var valid_612496 = header.getOrDefault("X-Amz-Algorithm")
  valid_612496 = validateParameter(valid_612496, JString, required = false,
                                 default = nil)
  if valid_612496 != nil:
    section.add "X-Amz-Algorithm", valid_612496
  var valid_612497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612497 = validateParameter(valid_612497, JString, required = false,
                                 default = nil)
  if valid_612497 != nil:
    section.add "X-Amz-SignedHeaders", valid_612497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612498: Call_GetDescribeTerminationPolicyTypes_612486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612498.validator(path, query, header, formData, body)
  let scheme = call_612498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612498.url(scheme.get, call_612498.host, call_612498.base,
                         call_612498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612498, url, valid)

proc call*(call_612499: Call_GetDescribeTerminationPolicyTypes_612486;
          Action: string = "DescribeTerminationPolicyTypes";
          Version: string = "2011-01-01"): Recallable =
  ## getDescribeTerminationPolicyTypes
  ## <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Auto Scaling Instances Terminate During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612500 = newJObject()
  add(query_612500, "Action", newJString(Action))
  add(query_612500, "Version", newJString(Version))
  result = call_612499.call(nil, query_612500, nil, nil, nil)

var getDescribeTerminationPolicyTypes* = Call_GetDescribeTerminationPolicyTypes_612486(
    name: "getDescribeTerminationPolicyTypes", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DescribeTerminationPolicyTypes",
    validator: validate_GetDescribeTerminationPolicyTypes_612487, base: "/",
    url: url_GetDescribeTerminationPolicyTypes_612488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachInstances_612534 = ref object of OpenApiRestCall_610658
proc url_PostDetachInstances_612536(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachInstances_612535(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612537 = query.getOrDefault("Action")
  valid_612537 = validateParameter(valid_612537, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_612537 != nil:
    section.add "Action", valid_612537
  var valid_612538 = query.getOrDefault("Version")
  valid_612538 = validateParameter(valid_612538, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612538 != nil:
    section.add "Version", valid_612538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612539 = header.getOrDefault("X-Amz-Signature")
  valid_612539 = validateParameter(valid_612539, JString, required = false,
                                 default = nil)
  if valid_612539 != nil:
    section.add "X-Amz-Signature", valid_612539
  var valid_612540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612540 = validateParameter(valid_612540, JString, required = false,
                                 default = nil)
  if valid_612540 != nil:
    section.add "X-Amz-Content-Sha256", valid_612540
  var valid_612541 = header.getOrDefault("X-Amz-Date")
  valid_612541 = validateParameter(valid_612541, JString, required = false,
                                 default = nil)
  if valid_612541 != nil:
    section.add "X-Amz-Date", valid_612541
  var valid_612542 = header.getOrDefault("X-Amz-Credential")
  valid_612542 = validateParameter(valid_612542, JString, required = false,
                                 default = nil)
  if valid_612542 != nil:
    section.add "X-Amz-Credential", valid_612542
  var valid_612543 = header.getOrDefault("X-Amz-Security-Token")
  valid_612543 = validateParameter(valid_612543, JString, required = false,
                                 default = nil)
  if valid_612543 != nil:
    section.add "X-Amz-Security-Token", valid_612543
  var valid_612544 = header.getOrDefault("X-Amz-Algorithm")
  valid_612544 = validateParameter(valid_612544, JString, required = false,
                                 default = nil)
  if valid_612544 != nil:
    section.add "X-Amz-Algorithm", valid_612544
  var valid_612545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612545 = validateParameter(valid_612545, JString, required = false,
                                 default = nil)
  if valid_612545 != nil:
    section.add "X-Amz-SignedHeaders", valid_612545
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612546 = formData.getOrDefault("AutoScalingGroupName")
  valid_612546 = validateParameter(valid_612546, JString, required = true,
                                 default = nil)
  if valid_612546 != nil:
    section.add "AutoScalingGroupName", valid_612546
  var valid_612547 = formData.getOrDefault("InstanceIds")
  valid_612547 = validateParameter(valid_612547, JArray, required = false,
                                 default = nil)
  if valid_612547 != nil:
    section.add "InstanceIds", valid_612547
  var valid_612548 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_612548 = validateParameter(valid_612548, JBool, required = true, default = nil)
  if valid_612548 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_612548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612549: Call_PostDetachInstances_612534; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612549.validator(path, query, header, formData, body)
  let scheme = call_612549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612549.url(scheme.get, call_612549.host, call_612549.base,
                         call_612549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612549, url, valid)

proc call*(call_612550: Call_PostDetachInstances_612534;
          AutoScalingGroupName: string; ShouldDecrementDesiredCapacity: bool;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612551 = newJObject()
  var formData_612552 = newJObject()
  add(formData_612552, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_612552.add "InstanceIds", InstanceIds
  add(formData_612552, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_612551, "Action", newJString(Action))
  add(query_612551, "Version", newJString(Version))
  result = call_612550.call(nil, query_612551, nil, formData_612552, nil)

var postDetachInstances* = Call_PostDetachInstances_612534(
    name: "postDetachInstances", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_PostDetachInstances_612535, base: "/",
    url: url_PostDetachInstances_612536, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachInstances_612516 = ref object of OpenApiRestCall_610658
proc url_GetDetachInstances_612518(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachInstances_612517(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612519 = query.getOrDefault("InstanceIds")
  valid_612519 = validateParameter(valid_612519, JArray, required = false,
                                 default = nil)
  if valid_612519 != nil:
    section.add "InstanceIds", valid_612519
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_612520 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_612520 = validateParameter(valid_612520, JBool, required = true, default = nil)
  if valid_612520 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_612520
  var valid_612521 = query.getOrDefault("AutoScalingGroupName")
  valid_612521 = validateParameter(valid_612521, JString, required = true,
                                 default = nil)
  if valid_612521 != nil:
    section.add "AutoScalingGroupName", valid_612521
  var valid_612522 = query.getOrDefault("Action")
  valid_612522 = validateParameter(valid_612522, JString, required = true,
                                 default = newJString("DetachInstances"))
  if valid_612522 != nil:
    section.add "Action", valid_612522
  var valid_612523 = query.getOrDefault("Version")
  valid_612523 = validateParameter(valid_612523, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612523 != nil:
    section.add "Version", valid_612523
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612524 = header.getOrDefault("X-Amz-Signature")
  valid_612524 = validateParameter(valid_612524, JString, required = false,
                                 default = nil)
  if valid_612524 != nil:
    section.add "X-Amz-Signature", valid_612524
  var valid_612525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612525 = validateParameter(valid_612525, JString, required = false,
                                 default = nil)
  if valid_612525 != nil:
    section.add "X-Amz-Content-Sha256", valid_612525
  var valid_612526 = header.getOrDefault("X-Amz-Date")
  valid_612526 = validateParameter(valid_612526, JString, required = false,
                                 default = nil)
  if valid_612526 != nil:
    section.add "X-Amz-Date", valid_612526
  var valid_612527 = header.getOrDefault("X-Amz-Credential")
  valid_612527 = validateParameter(valid_612527, JString, required = false,
                                 default = nil)
  if valid_612527 != nil:
    section.add "X-Amz-Credential", valid_612527
  var valid_612528 = header.getOrDefault("X-Amz-Security-Token")
  valid_612528 = validateParameter(valid_612528, JString, required = false,
                                 default = nil)
  if valid_612528 != nil:
    section.add "X-Amz-Security-Token", valid_612528
  var valid_612529 = header.getOrDefault("X-Amz-Algorithm")
  valid_612529 = validateParameter(valid_612529, JString, required = false,
                                 default = nil)
  if valid_612529 != nil:
    section.add "X-Amz-Algorithm", valid_612529
  var valid_612530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612530 = validateParameter(valid_612530, JString, required = false,
                                 default = nil)
  if valid_612530 != nil:
    section.add "X-Amz-SignedHeaders", valid_612530
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612531: Call_GetDetachInstances_612516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612531.validator(path, query, header, formData, body)
  let scheme = call_612531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612531.url(scheme.get, call_612531.host, call_612531.base,
                         call_612531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612531, url, valid)

proc call*(call_612532: Call_GetDetachInstances_612516;
          ShouldDecrementDesiredCapacity: bool; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "DetachInstances";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachInstances
  ## <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612533 = newJObject()
  if InstanceIds != nil:
    query_612533.add "InstanceIds", InstanceIds
  add(query_612533, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_612533, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612533, "Action", newJString(Action))
  add(query_612533, "Version", newJString(Version))
  result = call_612532.call(nil, query_612533, nil, nil, nil)

var getDetachInstances* = Call_GetDetachInstances_612516(
    name: "getDetachInstances", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachInstances",
    validator: validate_GetDetachInstances_612517, base: "/",
    url: url_GetDetachInstances_612518, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancerTargetGroups_612570 = ref object of OpenApiRestCall_610658
proc url_PostDetachLoadBalancerTargetGroups_612572(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancerTargetGroups_612571(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612573 = query.getOrDefault("Action")
  valid_612573 = validateParameter(valid_612573, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_612573 != nil:
    section.add "Action", valid_612573
  var valid_612574 = query.getOrDefault("Version")
  valid_612574 = validateParameter(valid_612574, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612574 != nil:
    section.add "Version", valid_612574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612575 = header.getOrDefault("X-Amz-Signature")
  valid_612575 = validateParameter(valid_612575, JString, required = false,
                                 default = nil)
  if valid_612575 != nil:
    section.add "X-Amz-Signature", valid_612575
  var valid_612576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612576 = validateParameter(valid_612576, JString, required = false,
                                 default = nil)
  if valid_612576 != nil:
    section.add "X-Amz-Content-Sha256", valid_612576
  var valid_612577 = header.getOrDefault("X-Amz-Date")
  valid_612577 = validateParameter(valid_612577, JString, required = false,
                                 default = nil)
  if valid_612577 != nil:
    section.add "X-Amz-Date", valid_612577
  var valid_612578 = header.getOrDefault("X-Amz-Credential")
  valid_612578 = validateParameter(valid_612578, JString, required = false,
                                 default = nil)
  if valid_612578 != nil:
    section.add "X-Amz-Credential", valid_612578
  var valid_612579 = header.getOrDefault("X-Amz-Security-Token")
  valid_612579 = validateParameter(valid_612579, JString, required = false,
                                 default = nil)
  if valid_612579 != nil:
    section.add "X-Amz-Security-Token", valid_612579
  var valid_612580 = header.getOrDefault("X-Amz-Algorithm")
  valid_612580 = validateParameter(valid_612580, JString, required = false,
                                 default = nil)
  if valid_612580 != nil:
    section.add "X-Amz-Algorithm", valid_612580
  var valid_612581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612581 = validateParameter(valid_612581, JString, required = false,
                                 default = nil)
  if valid_612581 != nil:
    section.add "X-Amz-SignedHeaders", valid_612581
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612582 = formData.getOrDefault("AutoScalingGroupName")
  valid_612582 = validateParameter(valid_612582, JString, required = true,
                                 default = nil)
  if valid_612582 != nil:
    section.add "AutoScalingGroupName", valid_612582
  var valid_612583 = formData.getOrDefault("TargetGroupARNs")
  valid_612583 = validateParameter(valid_612583, JArray, required = true, default = nil)
  if valid_612583 != nil:
    section.add "TargetGroupARNs", valid_612583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612584: Call_PostDetachLoadBalancerTargetGroups_612570;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_612584.validator(path, query, header, formData, body)
  let scheme = call_612584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612584.url(scheme.get, call_612584.host, call_612584.base,
                         call_612584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612584, url, valid)

proc call*(call_612585: Call_PostDetachLoadBalancerTargetGroups_612570;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612586 = newJObject()
  var formData_612587 = newJObject()
  add(formData_612587, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    formData_612587.add "TargetGroupARNs", TargetGroupARNs
  add(query_612586, "Action", newJString(Action))
  add(query_612586, "Version", newJString(Version))
  result = call_612585.call(nil, query_612586, nil, formData_612587, nil)

var postDetachLoadBalancerTargetGroups* = Call_PostDetachLoadBalancerTargetGroups_612570(
    name: "postDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_PostDetachLoadBalancerTargetGroups_612571, base: "/",
    url: url_PostDetachLoadBalancerTargetGroups_612572,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancerTargetGroups_612553 = ref object of OpenApiRestCall_610658
proc url_GetDetachLoadBalancerTargetGroups_612555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancerTargetGroups_612554(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612556 = query.getOrDefault("AutoScalingGroupName")
  valid_612556 = validateParameter(valid_612556, JString, required = true,
                                 default = nil)
  if valid_612556 != nil:
    section.add "AutoScalingGroupName", valid_612556
  var valid_612557 = query.getOrDefault("TargetGroupARNs")
  valid_612557 = validateParameter(valid_612557, JArray, required = true, default = nil)
  if valid_612557 != nil:
    section.add "TargetGroupARNs", valid_612557
  var valid_612558 = query.getOrDefault("Action")
  valid_612558 = validateParameter(valid_612558, JString, required = true, default = newJString(
      "DetachLoadBalancerTargetGroups"))
  if valid_612558 != nil:
    section.add "Action", valid_612558
  var valid_612559 = query.getOrDefault("Version")
  valid_612559 = validateParameter(valid_612559, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612559 != nil:
    section.add "Version", valid_612559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612560 = header.getOrDefault("X-Amz-Signature")
  valid_612560 = validateParameter(valid_612560, JString, required = false,
                                 default = nil)
  if valid_612560 != nil:
    section.add "X-Amz-Signature", valid_612560
  var valid_612561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612561 = validateParameter(valid_612561, JString, required = false,
                                 default = nil)
  if valid_612561 != nil:
    section.add "X-Amz-Content-Sha256", valid_612561
  var valid_612562 = header.getOrDefault("X-Amz-Date")
  valid_612562 = validateParameter(valid_612562, JString, required = false,
                                 default = nil)
  if valid_612562 != nil:
    section.add "X-Amz-Date", valid_612562
  var valid_612563 = header.getOrDefault("X-Amz-Credential")
  valid_612563 = validateParameter(valid_612563, JString, required = false,
                                 default = nil)
  if valid_612563 != nil:
    section.add "X-Amz-Credential", valid_612563
  var valid_612564 = header.getOrDefault("X-Amz-Security-Token")
  valid_612564 = validateParameter(valid_612564, JString, required = false,
                                 default = nil)
  if valid_612564 != nil:
    section.add "X-Amz-Security-Token", valid_612564
  var valid_612565 = header.getOrDefault("X-Amz-Algorithm")
  valid_612565 = validateParameter(valid_612565, JString, required = false,
                                 default = nil)
  if valid_612565 != nil:
    section.add "X-Amz-Algorithm", valid_612565
  var valid_612566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612566 = validateParameter(valid_612566, JString, required = false,
                                 default = nil)
  if valid_612566 != nil:
    section.add "X-Amz-SignedHeaders", valid_612566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612567: Call_GetDetachLoadBalancerTargetGroups_612553;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ## 
  let valid = call_612567.validator(path, query, header, formData, body)
  let scheme = call_612567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612567.url(scheme.get, call_612567.host, call_612567.base,
                         call_612567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612567, url, valid)

proc call*(call_612568: Call_GetDetachLoadBalancerTargetGroups_612553;
          AutoScalingGroupName: string; TargetGroupARNs: JsonNode;
          Action: string = "DetachLoadBalancerTargetGroups";
          Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancerTargetGroups
  ## Detaches one or more target groups from the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetGroupARNs: JArray (required)
  ##                  : The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612569 = newJObject()
  add(query_612569, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if TargetGroupARNs != nil:
    query_612569.add "TargetGroupARNs", TargetGroupARNs
  add(query_612569, "Action", newJString(Action))
  add(query_612569, "Version", newJString(Version))
  result = call_612568.call(nil, query_612569, nil, nil, nil)

var getDetachLoadBalancerTargetGroups* = Call_GetDetachLoadBalancerTargetGroups_612553(
    name: "getDetachLoadBalancerTargetGroups", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=DetachLoadBalancerTargetGroups",
    validator: validate_GetDetachLoadBalancerTargetGroups_612554, base: "/",
    url: url_GetDetachLoadBalancerTargetGroups_612555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachLoadBalancers_612605 = ref object of OpenApiRestCall_610658
proc url_PostDetachLoadBalancers_612607(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachLoadBalancers_612606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612608 = query.getOrDefault("Action")
  valid_612608 = validateParameter(valid_612608, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_612608 != nil:
    section.add "Action", valid_612608
  var valid_612609 = query.getOrDefault("Version")
  valid_612609 = validateParameter(valid_612609, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612609 != nil:
    section.add "Version", valid_612609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612610 = header.getOrDefault("X-Amz-Signature")
  valid_612610 = validateParameter(valid_612610, JString, required = false,
                                 default = nil)
  if valid_612610 != nil:
    section.add "X-Amz-Signature", valid_612610
  var valid_612611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612611 = validateParameter(valid_612611, JString, required = false,
                                 default = nil)
  if valid_612611 != nil:
    section.add "X-Amz-Content-Sha256", valid_612611
  var valid_612612 = header.getOrDefault("X-Amz-Date")
  valid_612612 = validateParameter(valid_612612, JString, required = false,
                                 default = nil)
  if valid_612612 != nil:
    section.add "X-Amz-Date", valid_612612
  var valid_612613 = header.getOrDefault("X-Amz-Credential")
  valid_612613 = validateParameter(valid_612613, JString, required = false,
                                 default = nil)
  if valid_612613 != nil:
    section.add "X-Amz-Credential", valid_612613
  var valid_612614 = header.getOrDefault("X-Amz-Security-Token")
  valid_612614 = validateParameter(valid_612614, JString, required = false,
                                 default = nil)
  if valid_612614 != nil:
    section.add "X-Amz-Security-Token", valid_612614
  var valid_612615 = header.getOrDefault("X-Amz-Algorithm")
  valid_612615 = validateParameter(valid_612615, JString, required = false,
                                 default = nil)
  if valid_612615 != nil:
    section.add "X-Amz-Algorithm", valid_612615
  var valid_612616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612616 = validateParameter(valid_612616, JString, required = false,
                                 default = nil)
  if valid_612616 != nil:
    section.add "X-Amz-SignedHeaders", valid_612616
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612617 = formData.getOrDefault("AutoScalingGroupName")
  valid_612617 = validateParameter(valid_612617, JString, required = true,
                                 default = nil)
  if valid_612617 != nil:
    section.add "AutoScalingGroupName", valid_612617
  var valid_612618 = formData.getOrDefault("LoadBalancerNames")
  valid_612618 = validateParameter(valid_612618, JArray, required = true, default = nil)
  if valid_612618 != nil:
    section.add "LoadBalancerNames", valid_612618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612619: Call_PostDetachLoadBalancers_612605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_612619.validator(path, query, header, formData, body)
  let scheme = call_612619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612619.url(scheme.get, call_612619.host, call_612619.base,
                         call_612619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612619, url, valid)

proc call*(call_612620: Call_PostDetachLoadBalancers_612605;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## postDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612621 = newJObject()
  var formData_612622 = newJObject()
  add(formData_612622, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if LoadBalancerNames != nil:
    formData_612622.add "LoadBalancerNames", LoadBalancerNames
  add(query_612621, "Action", newJString(Action))
  add(query_612621, "Version", newJString(Version))
  result = call_612620.call(nil, query_612621, nil, formData_612622, nil)

var postDetachLoadBalancers* = Call_PostDetachLoadBalancers_612605(
    name: "postDetachLoadBalancers", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_PostDetachLoadBalancers_612606, base: "/",
    url: url_PostDetachLoadBalancers_612607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachLoadBalancers_612588 = ref object of OpenApiRestCall_610658
proc url_GetDetachLoadBalancers_612590(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachLoadBalancers_612589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612591 = query.getOrDefault("AutoScalingGroupName")
  valid_612591 = validateParameter(valid_612591, JString, required = true,
                                 default = nil)
  if valid_612591 != nil:
    section.add "AutoScalingGroupName", valid_612591
  var valid_612592 = query.getOrDefault("Action")
  valid_612592 = validateParameter(valid_612592, JString, required = true,
                                 default = newJString("DetachLoadBalancers"))
  if valid_612592 != nil:
    section.add "Action", valid_612592
  var valid_612593 = query.getOrDefault("Version")
  valid_612593 = validateParameter(valid_612593, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612593 != nil:
    section.add "Version", valid_612593
  var valid_612594 = query.getOrDefault("LoadBalancerNames")
  valid_612594 = validateParameter(valid_612594, JArray, required = true, default = nil)
  if valid_612594 != nil:
    section.add "LoadBalancerNames", valid_612594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612595 = header.getOrDefault("X-Amz-Signature")
  valid_612595 = validateParameter(valid_612595, JString, required = false,
                                 default = nil)
  if valid_612595 != nil:
    section.add "X-Amz-Signature", valid_612595
  var valid_612596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612596 = validateParameter(valid_612596, JString, required = false,
                                 default = nil)
  if valid_612596 != nil:
    section.add "X-Amz-Content-Sha256", valid_612596
  var valid_612597 = header.getOrDefault("X-Amz-Date")
  valid_612597 = validateParameter(valid_612597, JString, required = false,
                                 default = nil)
  if valid_612597 != nil:
    section.add "X-Amz-Date", valid_612597
  var valid_612598 = header.getOrDefault("X-Amz-Credential")
  valid_612598 = validateParameter(valid_612598, JString, required = false,
                                 default = nil)
  if valid_612598 != nil:
    section.add "X-Amz-Credential", valid_612598
  var valid_612599 = header.getOrDefault("X-Amz-Security-Token")
  valid_612599 = validateParameter(valid_612599, JString, required = false,
                                 default = nil)
  if valid_612599 != nil:
    section.add "X-Amz-Security-Token", valid_612599
  var valid_612600 = header.getOrDefault("X-Amz-Algorithm")
  valid_612600 = validateParameter(valid_612600, JString, required = false,
                                 default = nil)
  if valid_612600 != nil:
    section.add "X-Amz-Algorithm", valid_612600
  var valid_612601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612601 = validateParameter(valid_612601, JString, required = false,
                                 default = nil)
  if valid_612601 != nil:
    section.add "X-Amz-SignedHeaders", valid_612601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612602: Call_GetDetachLoadBalancers_612588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ## 
  let valid = call_612602.validator(path, query, header, formData, body)
  let scheme = call_612602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612602.url(scheme.get, call_612602.host, call_612602.base,
                         call_612602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612602, url, valid)

proc call*(call_612603: Call_GetDetachLoadBalancers_612588;
          AutoScalingGroupName: string; LoadBalancerNames: JsonNode;
          Action: string = "DetachLoadBalancers"; Version: string = "2011-01-01"): Recallable =
  ## getDetachLoadBalancers
  ## <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers or Network Load Balancers, use <a>DetachLoadBalancerTargetGroups</a> instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using <a>DescribeLoadBalancers</a>. The instances remain running.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   LoadBalancerNames: JArray (required)
  ##                    : The names of the load balancers. You can specify up to 10 load balancers.
  var query_612604 = newJObject()
  add(query_612604, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612604, "Action", newJString(Action))
  add(query_612604, "Version", newJString(Version))
  if LoadBalancerNames != nil:
    query_612604.add "LoadBalancerNames", LoadBalancerNames
  result = call_612603.call(nil, query_612604, nil, nil, nil)

var getDetachLoadBalancers* = Call_GetDetachLoadBalancers_612588(
    name: "getDetachLoadBalancers", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DetachLoadBalancers",
    validator: validate_GetDetachLoadBalancers_612589, base: "/",
    url: url_GetDetachLoadBalancers_612590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableMetricsCollection_612640 = ref object of OpenApiRestCall_610658
proc url_PostDisableMetricsCollection_612642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableMetricsCollection_612641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612643 = query.getOrDefault("Action")
  valid_612643 = validateParameter(valid_612643, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_612643 != nil:
    section.add "Action", valid_612643
  var valid_612644 = query.getOrDefault("Version")
  valid_612644 = validateParameter(valid_612644, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612644 != nil:
    section.add "Version", valid_612644
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612645 = header.getOrDefault("X-Amz-Signature")
  valid_612645 = validateParameter(valid_612645, JString, required = false,
                                 default = nil)
  if valid_612645 != nil:
    section.add "X-Amz-Signature", valid_612645
  var valid_612646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612646 = validateParameter(valid_612646, JString, required = false,
                                 default = nil)
  if valid_612646 != nil:
    section.add "X-Amz-Content-Sha256", valid_612646
  var valid_612647 = header.getOrDefault("X-Amz-Date")
  valid_612647 = validateParameter(valid_612647, JString, required = false,
                                 default = nil)
  if valid_612647 != nil:
    section.add "X-Amz-Date", valid_612647
  var valid_612648 = header.getOrDefault("X-Amz-Credential")
  valid_612648 = validateParameter(valid_612648, JString, required = false,
                                 default = nil)
  if valid_612648 != nil:
    section.add "X-Amz-Credential", valid_612648
  var valid_612649 = header.getOrDefault("X-Amz-Security-Token")
  valid_612649 = validateParameter(valid_612649, JString, required = false,
                                 default = nil)
  if valid_612649 != nil:
    section.add "X-Amz-Security-Token", valid_612649
  var valid_612650 = header.getOrDefault("X-Amz-Algorithm")
  valid_612650 = validateParameter(valid_612650, JString, required = false,
                                 default = nil)
  if valid_612650 != nil:
    section.add "X-Amz-Algorithm", valid_612650
  var valid_612651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612651 = validateParameter(valid_612651, JString, required = false,
                                 default = nil)
  if valid_612651 != nil:
    section.add "X-Amz-SignedHeaders", valid_612651
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612652 = formData.getOrDefault("AutoScalingGroupName")
  valid_612652 = validateParameter(valid_612652, JString, required = true,
                                 default = nil)
  if valid_612652 != nil:
    section.add "AutoScalingGroupName", valid_612652
  var valid_612653 = formData.getOrDefault("Metrics")
  valid_612653 = validateParameter(valid_612653, JArray, required = false,
                                 default = nil)
  if valid_612653 != nil:
    section.add "Metrics", valid_612653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612654: Call_PostDisableMetricsCollection_612640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_612654.validator(path, query, header, formData, body)
  let scheme = call_612654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612654.url(scheme.get, call_612654.host, call_612654.base,
                         call_612654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612654, url, valid)

proc call*(call_612655: Call_PostDisableMetricsCollection_612640;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection";
          Version: string = "2011-01-01"; Metrics: JsonNode = nil): Recallable =
  ## postDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  var query_612656 = newJObject()
  var formData_612657 = newJObject()
  add(formData_612657, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612656, "Action", newJString(Action))
  add(query_612656, "Version", newJString(Version))
  if Metrics != nil:
    formData_612657.add "Metrics", Metrics
  result = call_612655.call(nil, query_612656, nil, formData_612657, nil)

var postDisableMetricsCollection* = Call_PostDisableMetricsCollection_612640(
    name: "postDisableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_PostDisableMetricsCollection_612641, base: "/",
    url: url_PostDisableMetricsCollection_612642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableMetricsCollection_612623 = ref object of OpenApiRestCall_610658
proc url_GetDisableMetricsCollection_612625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableMetricsCollection_612624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612626 = query.getOrDefault("AutoScalingGroupName")
  valid_612626 = validateParameter(valid_612626, JString, required = true,
                                 default = nil)
  if valid_612626 != nil:
    section.add "AutoScalingGroupName", valid_612626
  var valid_612627 = query.getOrDefault("Action")
  valid_612627 = validateParameter(valid_612627, JString, required = true, default = newJString(
      "DisableMetricsCollection"))
  if valid_612627 != nil:
    section.add "Action", valid_612627
  var valid_612628 = query.getOrDefault("Metrics")
  valid_612628 = validateParameter(valid_612628, JArray, required = false,
                                 default = nil)
  if valid_612628 != nil:
    section.add "Metrics", valid_612628
  var valid_612629 = query.getOrDefault("Version")
  valid_612629 = validateParameter(valid_612629, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612629 != nil:
    section.add "Version", valid_612629
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612630 = header.getOrDefault("X-Amz-Signature")
  valid_612630 = validateParameter(valid_612630, JString, required = false,
                                 default = nil)
  if valid_612630 != nil:
    section.add "X-Amz-Signature", valid_612630
  var valid_612631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612631 = validateParameter(valid_612631, JString, required = false,
                                 default = nil)
  if valid_612631 != nil:
    section.add "X-Amz-Content-Sha256", valid_612631
  var valid_612632 = header.getOrDefault("X-Amz-Date")
  valid_612632 = validateParameter(valid_612632, JString, required = false,
                                 default = nil)
  if valid_612632 != nil:
    section.add "X-Amz-Date", valid_612632
  var valid_612633 = header.getOrDefault("X-Amz-Credential")
  valid_612633 = validateParameter(valid_612633, JString, required = false,
                                 default = nil)
  if valid_612633 != nil:
    section.add "X-Amz-Credential", valid_612633
  var valid_612634 = header.getOrDefault("X-Amz-Security-Token")
  valid_612634 = validateParameter(valid_612634, JString, required = false,
                                 default = nil)
  if valid_612634 != nil:
    section.add "X-Amz-Security-Token", valid_612634
  var valid_612635 = header.getOrDefault("X-Amz-Algorithm")
  valid_612635 = validateParameter(valid_612635, JString, required = false,
                                 default = nil)
  if valid_612635 != nil:
    section.add "X-Amz-Algorithm", valid_612635
  var valid_612636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612636 = validateParameter(valid_612636, JString, required = false,
                                 default = nil)
  if valid_612636 != nil:
    section.add "X-Amz-SignedHeaders", valid_612636
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612637: Call_GetDisableMetricsCollection_612623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables group metrics for the specified Auto Scaling group.
  ## 
  let valid = call_612637.validator(path, query, header, formData, body)
  let scheme = call_612637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612637.url(scheme.get, call_612637.host, call_612637.base,
                         call_612637.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612637, url, valid)

proc call*(call_612638: Call_GetDisableMetricsCollection_612623;
          AutoScalingGroupName: string;
          Action: string = "DisableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getDisableMetricsCollection
  ## Disables group metrics for the specified Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are disabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_612639 = newJObject()
  add(query_612639, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612639, "Action", newJString(Action))
  if Metrics != nil:
    query_612639.add "Metrics", Metrics
  add(query_612639, "Version", newJString(Version))
  result = call_612638.call(nil, query_612639, nil, nil, nil)

var getDisableMetricsCollection* = Call_GetDisableMetricsCollection_612623(
    name: "getDisableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=DisableMetricsCollection",
    validator: validate_GetDisableMetricsCollection_612624, base: "/",
    url: url_GetDisableMetricsCollection_612625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMetricsCollection_612676 = ref object of OpenApiRestCall_610658
proc url_PostEnableMetricsCollection_612678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMetricsCollection_612677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612679 = query.getOrDefault("Action")
  valid_612679 = validateParameter(valid_612679, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_612679 != nil:
    section.add "Action", valid_612679
  var valid_612680 = query.getOrDefault("Version")
  valid_612680 = validateParameter(valid_612680, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612680 != nil:
    section.add "Version", valid_612680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612681 = header.getOrDefault("X-Amz-Signature")
  valid_612681 = validateParameter(valid_612681, JString, required = false,
                                 default = nil)
  if valid_612681 != nil:
    section.add "X-Amz-Signature", valid_612681
  var valid_612682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612682 = validateParameter(valid_612682, JString, required = false,
                                 default = nil)
  if valid_612682 != nil:
    section.add "X-Amz-Content-Sha256", valid_612682
  var valid_612683 = header.getOrDefault("X-Amz-Date")
  valid_612683 = validateParameter(valid_612683, JString, required = false,
                                 default = nil)
  if valid_612683 != nil:
    section.add "X-Amz-Date", valid_612683
  var valid_612684 = header.getOrDefault("X-Amz-Credential")
  valid_612684 = validateParameter(valid_612684, JString, required = false,
                                 default = nil)
  if valid_612684 != nil:
    section.add "X-Amz-Credential", valid_612684
  var valid_612685 = header.getOrDefault("X-Amz-Security-Token")
  valid_612685 = validateParameter(valid_612685, JString, required = false,
                                 default = nil)
  if valid_612685 != nil:
    section.add "X-Amz-Security-Token", valid_612685
  var valid_612686 = header.getOrDefault("X-Amz-Algorithm")
  valid_612686 = validateParameter(valid_612686, JString, required = false,
                                 default = nil)
  if valid_612686 != nil:
    section.add "X-Amz-Algorithm", valid_612686
  var valid_612687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612687 = validateParameter(valid_612687, JString, required = false,
                                 default = nil)
  if valid_612687 != nil:
    section.add "X-Amz-SignedHeaders", valid_612687
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612688 = formData.getOrDefault("AutoScalingGroupName")
  valid_612688 = validateParameter(valid_612688, JString, required = true,
                                 default = nil)
  if valid_612688 != nil:
    section.add "AutoScalingGroupName", valid_612688
  var valid_612689 = formData.getOrDefault("Granularity")
  valid_612689 = validateParameter(valid_612689, JString, required = true,
                                 default = nil)
  if valid_612689 != nil:
    section.add "Granularity", valid_612689
  var valid_612690 = formData.getOrDefault("Metrics")
  valid_612690 = validateParameter(valid_612690, JArray, required = false,
                                 default = nil)
  if valid_612690 != nil:
    section.add "Metrics", valid_612690
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612691: Call_PostEnableMetricsCollection_612676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_612691.validator(path, query, header, formData, body)
  let scheme = call_612691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612691.url(scheme.get, call_612691.host, call_612691.base,
                         call_612691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612691, url, valid)

proc call*(call_612692: Call_PostEnableMetricsCollection_612676;
          AutoScalingGroupName: string; Granularity: string;
          Action: string = "EnableMetricsCollection";
          Version: string = "2011-01-01"; Metrics: JsonNode = nil): Recallable =
  ## postEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  var query_612693 = newJObject()
  var formData_612694 = newJObject()
  add(formData_612694, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612694, "Granularity", newJString(Granularity))
  add(query_612693, "Action", newJString(Action))
  add(query_612693, "Version", newJString(Version))
  if Metrics != nil:
    formData_612694.add "Metrics", Metrics
  result = call_612692.call(nil, query_612693, nil, formData_612694, nil)

var postEnableMetricsCollection* = Call_PostEnableMetricsCollection_612676(
    name: "postEnableMetricsCollection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_PostEnableMetricsCollection_612677, base: "/",
    url: url_PostEnableMetricsCollection_612678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMetricsCollection_612658 = ref object of OpenApiRestCall_610658
proc url_GetEnableMetricsCollection_612660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMetricsCollection_612659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Granularity: JString (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612661 = query.getOrDefault("AutoScalingGroupName")
  valid_612661 = validateParameter(valid_612661, JString, required = true,
                                 default = nil)
  if valid_612661 != nil:
    section.add "AutoScalingGroupName", valid_612661
  var valid_612662 = query.getOrDefault("Action")
  valid_612662 = validateParameter(valid_612662, JString, required = true, default = newJString(
      "EnableMetricsCollection"))
  if valid_612662 != nil:
    section.add "Action", valid_612662
  var valid_612663 = query.getOrDefault("Granularity")
  valid_612663 = validateParameter(valid_612663, JString, required = true,
                                 default = nil)
  if valid_612663 != nil:
    section.add "Granularity", valid_612663
  var valid_612664 = query.getOrDefault("Metrics")
  valid_612664 = validateParameter(valid_612664, JArray, required = false,
                                 default = nil)
  if valid_612664 != nil:
    section.add "Metrics", valid_612664
  var valid_612665 = query.getOrDefault("Version")
  valid_612665 = validateParameter(valid_612665, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612665 != nil:
    section.add "Version", valid_612665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612666 = header.getOrDefault("X-Amz-Signature")
  valid_612666 = validateParameter(valid_612666, JString, required = false,
                                 default = nil)
  if valid_612666 != nil:
    section.add "X-Amz-Signature", valid_612666
  var valid_612667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612667 = validateParameter(valid_612667, JString, required = false,
                                 default = nil)
  if valid_612667 != nil:
    section.add "X-Amz-Content-Sha256", valid_612667
  var valid_612668 = header.getOrDefault("X-Amz-Date")
  valid_612668 = validateParameter(valid_612668, JString, required = false,
                                 default = nil)
  if valid_612668 != nil:
    section.add "X-Amz-Date", valid_612668
  var valid_612669 = header.getOrDefault("X-Amz-Credential")
  valid_612669 = validateParameter(valid_612669, JString, required = false,
                                 default = nil)
  if valid_612669 != nil:
    section.add "X-Amz-Credential", valid_612669
  var valid_612670 = header.getOrDefault("X-Amz-Security-Token")
  valid_612670 = validateParameter(valid_612670, JString, required = false,
                                 default = nil)
  if valid_612670 != nil:
    section.add "X-Amz-Security-Token", valid_612670
  var valid_612671 = header.getOrDefault("X-Amz-Algorithm")
  valid_612671 = validateParameter(valid_612671, JString, required = false,
                                 default = nil)
  if valid_612671 != nil:
    section.add "X-Amz-Algorithm", valid_612671
  var valid_612672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612672 = validateParameter(valid_612672, JString, required = false,
                                 default = nil)
  if valid_612672 != nil:
    section.add "X-Amz-SignedHeaders", valid_612672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612673: Call_GetEnableMetricsCollection_612658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ## 
  let valid = call_612673.validator(path, query, header, formData, body)
  let scheme = call_612673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612673.url(scheme.get, call_612673.host, call_612673.base,
                         call_612673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612673, url, valid)

proc call*(call_612674: Call_GetEnableMetricsCollection_612658;
          AutoScalingGroupName: string; Granularity: string;
          Action: string = "EnableMetricsCollection"; Metrics: JsonNode = nil;
          Version: string = "2011-01-01"): Recallable =
  ## getEnableMetricsCollection
  ## Enables group metrics for the specified Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html">Monitoring Your Auto Scaling Groups and Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Granularity: string (required)
  ##              : The granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>.
  ##   Metrics: JArray
  ##          : <p>One or more of the following metrics. If you omit this parameter, all metrics are enabled.</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_612675 = newJObject()
  add(query_612675, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612675, "Action", newJString(Action))
  add(query_612675, "Granularity", newJString(Granularity))
  if Metrics != nil:
    query_612675.add "Metrics", Metrics
  add(query_612675, "Version", newJString(Version))
  result = call_612674.call(nil, query_612675, nil, nil, nil)

var getEnableMetricsCollection* = Call_GetEnableMetricsCollection_612658(
    name: "getEnableMetricsCollection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=EnableMetricsCollection",
    validator: validate_GetEnableMetricsCollection_612659, base: "/",
    url: url_GetEnableMetricsCollection_612660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnterStandby_612713 = ref object of OpenApiRestCall_610658
proc url_PostEnterStandby_612715(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnterStandby_612714(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612716 = query.getOrDefault("Action")
  valid_612716 = validateParameter(valid_612716, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_612716 != nil:
    section.add "Action", valid_612716
  var valid_612717 = query.getOrDefault("Version")
  valid_612717 = validateParameter(valid_612717, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612717 != nil:
    section.add "Version", valid_612717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612718 = header.getOrDefault("X-Amz-Signature")
  valid_612718 = validateParameter(valid_612718, JString, required = false,
                                 default = nil)
  if valid_612718 != nil:
    section.add "X-Amz-Signature", valid_612718
  var valid_612719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612719 = validateParameter(valid_612719, JString, required = false,
                                 default = nil)
  if valid_612719 != nil:
    section.add "X-Amz-Content-Sha256", valid_612719
  var valid_612720 = header.getOrDefault("X-Amz-Date")
  valid_612720 = validateParameter(valid_612720, JString, required = false,
                                 default = nil)
  if valid_612720 != nil:
    section.add "X-Amz-Date", valid_612720
  var valid_612721 = header.getOrDefault("X-Amz-Credential")
  valid_612721 = validateParameter(valid_612721, JString, required = false,
                                 default = nil)
  if valid_612721 != nil:
    section.add "X-Amz-Credential", valid_612721
  var valid_612722 = header.getOrDefault("X-Amz-Security-Token")
  valid_612722 = validateParameter(valid_612722, JString, required = false,
                                 default = nil)
  if valid_612722 != nil:
    section.add "X-Amz-Security-Token", valid_612722
  var valid_612723 = header.getOrDefault("X-Amz-Algorithm")
  valid_612723 = validateParameter(valid_612723, JString, required = false,
                                 default = nil)
  if valid_612723 != nil:
    section.add "X-Amz-Algorithm", valid_612723
  var valid_612724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612724 = validateParameter(valid_612724, JString, required = false,
                                 default = nil)
  if valid_612724 != nil:
    section.add "X-Amz-SignedHeaders", valid_612724
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612725 = formData.getOrDefault("AutoScalingGroupName")
  valid_612725 = validateParameter(valid_612725, JString, required = true,
                                 default = nil)
  if valid_612725 != nil:
    section.add "AutoScalingGroupName", valid_612725
  var valid_612726 = formData.getOrDefault("InstanceIds")
  valid_612726 = validateParameter(valid_612726, JArray, required = false,
                                 default = nil)
  if valid_612726 != nil:
    section.add "InstanceIds", valid_612726
  var valid_612727 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_612727 = validateParameter(valid_612727, JBool, required = true, default = nil)
  if valid_612727 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_612727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612728: Call_PostEnterStandby_612713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612728.validator(path, query, header, formData, body)
  let scheme = call_612728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612728.url(scheme.get, call_612728.host, call_612728.base,
                         call_612728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612728, url, valid)

proc call*(call_612729: Call_PostEnterStandby_612713; AutoScalingGroupName: string;
          ShouldDecrementDesiredCapacity: bool; InstanceIds: JsonNode = nil;
          Action: string = "EnterStandby"; Version: string = "2011-01-01"): Recallable =
  ## postEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612730 = newJObject()
  var formData_612731 = newJObject()
  add(formData_612731, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_612731.add "InstanceIds", InstanceIds
  add(formData_612731, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_612730, "Action", newJString(Action))
  add(query_612730, "Version", newJString(Version))
  result = call_612729.call(nil, query_612730, nil, formData_612731, nil)

var postEnterStandby* = Call_PostEnterStandby_612713(name: "postEnterStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_PostEnterStandby_612714,
    base: "/", url: url_PostEnterStandby_612715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnterStandby_612695 = ref object of OpenApiRestCall_610658
proc url_GetEnterStandby_612697(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnterStandby_612696(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612698 = query.getOrDefault("InstanceIds")
  valid_612698 = validateParameter(valid_612698, JArray, required = false,
                                 default = nil)
  if valid_612698 != nil:
    section.add "InstanceIds", valid_612698
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_612699 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_612699 = validateParameter(valid_612699, JBool, required = true, default = nil)
  if valid_612699 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_612699
  var valid_612700 = query.getOrDefault("AutoScalingGroupName")
  valid_612700 = validateParameter(valid_612700, JString, required = true,
                                 default = nil)
  if valid_612700 != nil:
    section.add "AutoScalingGroupName", valid_612700
  var valid_612701 = query.getOrDefault("Action")
  valid_612701 = validateParameter(valid_612701, JString, required = true,
                                 default = newJString("EnterStandby"))
  if valid_612701 != nil:
    section.add "Action", valid_612701
  var valid_612702 = query.getOrDefault("Version")
  valid_612702 = validateParameter(valid_612702, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612702 != nil:
    section.add "Version", valid_612702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612703 = header.getOrDefault("X-Amz-Signature")
  valid_612703 = validateParameter(valid_612703, JString, required = false,
                                 default = nil)
  if valid_612703 != nil:
    section.add "X-Amz-Signature", valid_612703
  var valid_612704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612704 = validateParameter(valid_612704, JString, required = false,
                                 default = nil)
  if valid_612704 != nil:
    section.add "X-Amz-Content-Sha256", valid_612704
  var valid_612705 = header.getOrDefault("X-Amz-Date")
  valid_612705 = validateParameter(valid_612705, JString, required = false,
                                 default = nil)
  if valid_612705 != nil:
    section.add "X-Amz-Date", valid_612705
  var valid_612706 = header.getOrDefault("X-Amz-Credential")
  valid_612706 = validateParameter(valid_612706, JString, required = false,
                                 default = nil)
  if valid_612706 != nil:
    section.add "X-Amz-Credential", valid_612706
  var valid_612707 = header.getOrDefault("X-Amz-Security-Token")
  valid_612707 = validateParameter(valid_612707, JString, required = false,
                                 default = nil)
  if valid_612707 != nil:
    section.add "X-Amz-Security-Token", valid_612707
  var valid_612708 = header.getOrDefault("X-Amz-Algorithm")
  valid_612708 = validateParameter(valid_612708, JString, required = false,
                                 default = nil)
  if valid_612708 != nil:
    section.add "X-Amz-Algorithm", valid_612708
  var valid_612709 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612709 = validateParameter(valid_612709, JString, required = false,
                                 default = nil)
  if valid_612709 != nil:
    section.add "X-Amz-SignedHeaders", valid_612709
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612710: Call_GetEnterStandby_612695; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612710.validator(path, query, header, formData, body)
  let scheme = call_612710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612710.url(scheme.get, call_612710.host, call_612710.base,
                         call_612710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612710, url, valid)

proc call*(call_612711: Call_GetEnterStandby_612695;
          ShouldDecrementDesiredCapacity: bool; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "EnterStandby";
          Version: string = "2011-01-01"): Recallable =
  ## getEnterStandby
  ## <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612712 = newJObject()
  if InstanceIds != nil:
    query_612712.add "InstanceIds", InstanceIds
  add(query_612712, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_612712, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612712, "Action", newJString(Action))
  add(query_612712, "Version", newJString(Version))
  result = call_612711.call(nil, query_612712, nil, nil, nil)

var getEnterStandby* = Call_GetEnterStandby_612695(name: "getEnterStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=EnterStandby", validator: validate_GetEnterStandby_612696,
    base: "/", url: url_GetEnterStandby_612697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExecutePolicy_612752 = ref object of OpenApiRestCall_610658
proc url_PostExecutePolicy_612754(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExecutePolicy_612753(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612755 = query.getOrDefault("Action")
  valid_612755 = validateParameter(valid_612755, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_612755 != nil:
    section.add "Action", valid_612755
  var valid_612756 = query.getOrDefault("Version")
  valid_612756 = validateParameter(valid_612756, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612756 != nil:
    section.add "Version", valid_612756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612757 = header.getOrDefault("X-Amz-Signature")
  valid_612757 = validateParameter(valid_612757, JString, required = false,
                                 default = nil)
  if valid_612757 != nil:
    section.add "X-Amz-Signature", valid_612757
  var valid_612758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612758 = validateParameter(valid_612758, JString, required = false,
                                 default = nil)
  if valid_612758 != nil:
    section.add "X-Amz-Content-Sha256", valid_612758
  var valid_612759 = header.getOrDefault("X-Amz-Date")
  valid_612759 = validateParameter(valid_612759, JString, required = false,
                                 default = nil)
  if valid_612759 != nil:
    section.add "X-Amz-Date", valid_612759
  var valid_612760 = header.getOrDefault("X-Amz-Credential")
  valid_612760 = validateParameter(valid_612760, JString, required = false,
                                 default = nil)
  if valid_612760 != nil:
    section.add "X-Amz-Credential", valid_612760
  var valid_612761 = header.getOrDefault("X-Amz-Security-Token")
  valid_612761 = validateParameter(valid_612761, JString, required = false,
                                 default = nil)
  if valid_612761 != nil:
    section.add "X-Amz-Security-Token", valid_612761
  var valid_612762 = header.getOrDefault("X-Amz-Algorithm")
  valid_612762 = validateParameter(valid_612762, JString, required = false,
                                 default = nil)
  if valid_612762 != nil:
    section.add "X-Amz-Algorithm", valid_612762
  var valid_612763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612763 = validateParameter(valid_612763, JString, required = false,
                                 default = nil)
  if valid_612763 != nil:
    section.add "X-Amz-SignedHeaders", valid_612763
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  section = newJObject()
  var valid_612764 = formData.getOrDefault("AutoScalingGroupName")
  valid_612764 = validateParameter(valid_612764, JString, required = false,
                                 default = nil)
  if valid_612764 != nil:
    section.add "AutoScalingGroupName", valid_612764
  var valid_612765 = formData.getOrDefault("MetricValue")
  valid_612765 = validateParameter(valid_612765, JFloat, required = false,
                                 default = nil)
  if valid_612765 != nil:
    section.add "MetricValue", valid_612765
  var valid_612766 = formData.getOrDefault("BreachThreshold")
  valid_612766 = validateParameter(valid_612766, JFloat, required = false,
                                 default = nil)
  if valid_612766 != nil:
    section.add "BreachThreshold", valid_612766
  var valid_612767 = formData.getOrDefault("HonorCooldown")
  valid_612767 = validateParameter(valid_612767, JBool, required = false, default = nil)
  if valid_612767 != nil:
    section.add "HonorCooldown", valid_612767
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_612768 = formData.getOrDefault("PolicyName")
  valid_612768 = validateParameter(valid_612768, JString, required = true,
                                 default = nil)
  if valid_612768 != nil:
    section.add "PolicyName", valid_612768
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612769: Call_PostExecutePolicy_612752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_612769.validator(path, query, header, formData, body)
  let scheme = call_612769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612769.url(scheme.get, call_612769.host, call_612769.base,
                         call_612769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612769, url, valid)

proc call*(call_612770: Call_PostExecutePolicy_612752; PolicyName: string;
          AutoScalingGroupName: string = ""; MetricValue: float = 0.0;
          BreachThreshold: float = 0.0; HonorCooldown: bool = false;
          Action: string = "ExecutePolicy"; Version: string = "2011-01-01"): Recallable =
  ## postExecutePolicy
  ## Executes the specified policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  var query_612771 = newJObject()
  var formData_612772 = newJObject()
  add(formData_612772, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612772, "MetricValue", newJFloat(MetricValue))
  add(formData_612772, "BreachThreshold", newJFloat(BreachThreshold))
  add(formData_612772, "HonorCooldown", newJBool(HonorCooldown))
  add(query_612771, "Action", newJString(Action))
  add(query_612771, "Version", newJString(Version))
  add(formData_612772, "PolicyName", newJString(PolicyName))
  result = call_612770.call(nil, query_612771, nil, formData_612772, nil)

var postExecutePolicy* = Call_PostExecutePolicy_612752(name: "postExecutePolicy",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_PostExecutePolicy_612753,
    base: "/", url: url_PostExecutePolicy_612754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExecutePolicy_612732 = ref object of OpenApiRestCall_610658
proc url_GetExecutePolicy_612734(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExecutePolicy_612733(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Executes the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MetricValue: JFloat
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: JFloat
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   PolicyName: JString (required)
  ##             : The name or ARN of the policy.
  ##   AutoScalingGroupName: JString
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612735 = query.getOrDefault("MetricValue")
  valid_612735 = validateParameter(valid_612735, JFloat, required = false,
                                 default = nil)
  if valid_612735 != nil:
    section.add "MetricValue", valid_612735
  var valid_612736 = query.getOrDefault("BreachThreshold")
  valid_612736 = validateParameter(valid_612736, JFloat, required = false,
                                 default = nil)
  if valid_612736 != nil:
    section.add "BreachThreshold", valid_612736
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_612737 = query.getOrDefault("PolicyName")
  valid_612737 = validateParameter(valid_612737, JString, required = true,
                                 default = nil)
  if valid_612737 != nil:
    section.add "PolicyName", valid_612737
  var valid_612738 = query.getOrDefault("AutoScalingGroupName")
  valid_612738 = validateParameter(valid_612738, JString, required = false,
                                 default = nil)
  if valid_612738 != nil:
    section.add "AutoScalingGroupName", valid_612738
  var valid_612739 = query.getOrDefault("Action")
  valid_612739 = validateParameter(valid_612739, JString, required = true,
                                 default = newJString("ExecutePolicy"))
  if valid_612739 != nil:
    section.add "Action", valid_612739
  var valid_612740 = query.getOrDefault("HonorCooldown")
  valid_612740 = validateParameter(valid_612740, JBool, required = false, default = nil)
  if valid_612740 != nil:
    section.add "HonorCooldown", valid_612740
  var valid_612741 = query.getOrDefault("Version")
  valid_612741 = validateParameter(valid_612741, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612741 != nil:
    section.add "Version", valid_612741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612742 = header.getOrDefault("X-Amz-Signature")
  valid_612742 = validateParameter(valid_612742, JString, required = false,
                                 default = nil)
  if valid_612742 != nil:
    section.add "X-Amz-Signature", valid_612742
  var valid_612743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612743 = validateParameter(valid_612743, JString, required = false,
                                 default = nil)
  if valid_612743 != nil:
    section.add "X-Amz-Content-Sha256", valid_612743
  var valid_612744 = header.getOrDefault("X-Amz-Date")
  valid_612744 = validateParameter(valid_612744, JString, required = false,
                                 default = nil)
  if valid_612744 != nil:
    section.add "X-Amz-Date", valid_612744
  var valid_612745 = header.getOrDefault("X-Amz-Credential")
  valid_612745 = validateParameter(valid_612745, JString, required = false,
                                 default = nil)
  if valid_612745 != nil:
    section.add "X-Amz-Credential", valid_612745
  var valid_612746 = header.getOrDefault("X-Amz-Security-Token")
  valid_612746 = validateParameter(valid_612746, JString, required = false,
                                 default = nil)
  if valid_612746 != nil:
    section.add "X-Amz-Security-Token", valid_612746
  var valid_612747 = header.getOrDefault("X-Amz-Algorithm")
  valid_612747 = validateParameter(valid_612747, JString, required = false,
                                 default = nil)
  if valid_612747 != nil:
    section.add "X-Amz-Algorithm", valid_612747
  var valid_612748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612748 = validateParameter(valid_612748, JString, required = false,
                                 default = nil)
  if valid_612748 != nil:
    section.add "X-Amz-SignedHeaders", valid_612748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612749: Call_GetExecutePolicy_612732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Executes the specified policy.
  ## 
  let valid = call_612749.validator(path, query, header, formData, body)
  let scheme = call_612749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612749.url(scheme.get, call_612749.host, call_612749.base,
                         call_612749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612749, url, valid)

proc call*(call_612750: Call_GetExecutePolicy_612732; PolicyName: string;
          MetricValue: float = 0.0; BreachThreshold: float = 0.0;
          AutoScalingGroupName: string = ""; Action: string = "ExecutePolicy";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getExecutePolicy
  ## Executes the specified policy.
  ##   MetricValue: float
  ##              : <p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   BreachThreshold: float
  ##                  : <p>The breach threshold for the alarm.</p> <p>Conditional: This parameter is required if the policy type is <code>StepScaling</code> and not supported otherwise.</p>
  ##   PolicyName: string (required)
  ##             : The name or ARN of the policy.
  ##   AutoScalingGroupName: string
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : <p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>This parameter is not supported if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  var query_612751 = newJObject()
  add(query_612751, "MetricValue", newJFloat(MetricValue))
  add(query_612751, "BreachThreshold", newJFloat(BreachThreshold))
  add(query_612751, "PolicyName", newJString(PolicyName))
  add(query_612751, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612751, "Action", newJString(Action))
  add(query_612751, "HonorCooldown", newJBool(HonorCooldown))
  add(query_612751, "Version", newJString(Version))
  result = call_612750.call(nil, query_612751, nil, nil, nil)

var getExecutePolicy* = Call_GetExecutePolicy_612732(name: "getExecutePolicy",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExecutePolicy", validator: validate_GetExecutePolicy_612733,
    base: "/", url: url_GetExecutePolicy_612734,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostExitStandby_612790 = ref object of OpenApiRestCall_610658
proc url_PostExitStandby_612792(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostExitStandby_612791(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612793 = query.getOrDefault("Action")
  valid_612793 = validateParameter(valid_612793, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_612793 != nil:
    section.add "Action", valid_612793
  var valid_612794 = query.getOrDefault("Version")
  valid_612794 = validateParameter(valid_612794, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612794 != nil:
    section.add "Version", valid_612794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612795 = header.getOrDefault("X-Amz-Signature")
  valid_612795 = validateParameter(valid_612795, JString, required = false,
                                 default = nil)
  if valid_612795 != nil:
    section.add "X-Amz-Signature", valid_612795
  var valid_612796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612796 = validateParameter(valid_612796, JString, required = false,
                                 default = nil)
  if valid_612796 != nil:
    section.add "X-Amz-Content-Sha256", valid_612796
  var valid_612797 = header.getOrDefault("X-Amz-Date")
  valid_612797 = validateParameter(valid_612797, JString, required = false,
                                 default = nil)
  if valid_612797 != nil:
    section.add "X-Amz-Date", valid_612797
  var valid_612798 = header.getOrDefault("X-Amz-Credential")
  valid_612798 = validateParameter(valid_612798, JString, required = false,
                                 default = nil)
  if valid_612798 != nil:
    section.add "X-Amz-Credential", valid_612798
  var valid_612799 = header.getOrDefault("X-Amz-Security-Token")
  valid_612799 = validateParameter(valid_612799, JString, required = false,
                                 default = nil)
  if valid_612799 != nil:
    section.add "X-Amz-Security-Token", valid_612799
  var valid_612800 = header.getOrDefault("X-Amz-Algorithm")
  valid_612800 = validateParameter(valid_612800, JString, required = false,
                                 default = nil)
  if valid_612800 != nil:
    section.add "X-Amz-Algorithm", valid_612800
  var valid_612801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612801 = validateParameter(valid_612801, JString, required = false,
                                 default = nil)
  if valid_612801 != nil:
    section.add "X-Amz-SignedHeaders", valid_612801
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612802 = formData.getOrDefault("AutoScalingGroupName")
  valid_612802 = validateParameter(valid_612802, JString, required = true,
                                 default = nil)
  if valid_612802 != nil:
    section.add "AutoScalingGroupName", valid_612802
  var valid_612803 = formData.getOrDefault("InstanceIds")
  valid_612803 = validateParameter(valid_612803, JArray, required = false,
                                 default = nil)
  if valid_612803 != nil:
    section.add "InstanceIds", valid_612803
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612804: Call_PostExitStandby_612790; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612804.validator(path, query, header, formData, body)
  let scheme = call_612804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612804.url(scheme.get, call_612804.host, call_612804.base,
                         call_612804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612804, url, valid)

proc call*(call_612805: Call_PostExitStandby_612790; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## postExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612806 = newJObject()
  var formData_612807 = newJObject()
  add(formData_612807, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if InstanceIds != nil:
    formData_612807.add "InstanceIds", InstanceIds
  add(query_612806, "Action", newJString(Action))
  add(query_612806, "Version", newJString(Version))
  result = call_612805.call(nil, query_612806, nil, formData_612807, nil)

var postExitStandby* = Call_PostExitStandby_612790(name: "postExitStandby",
    meth: HttpMethod.HttpPost, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_PostExitStandby_612791,
    base: "/", url: url_PostExitStandby_612792, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExitStandby_612773 = ref object of OpenApiRestCall_610658
proc url_GetExitStandby_612775(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetExitStandby_612774(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612776 = query.getOrDefault("InstanceIds")
  valid_612776 = validateParameter(valid_612776, JArray, required = false,
                                 default = nil)
  if valid_612776 != nil:
    section.add "InstanceIds", valid_612776
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612777 = query.getOrDefault("AutoScalingGroupName")
  valid_612777 = validateParameter(valid_612777, JString, required = true,
                                 default = nil)
  if valid_612777 != nil:
    section.add "AutoScalingGroupName", valid_612777
  var valid_612778 = query.getOrDefault("Action")
  valid_612778 = validateParameter(valid_612778, JString, required = true,
                                 default = newJString("ExitStandby"))
  if valid_612778 != nil:
    section.add "Action", valid_612778
  var valid_612779 = query.getOrDefault("Version")
  valid_612779 = validateParameter(valid_612779, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612779 != nil:
    section.add "Version", valid_612779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612780 = header.getOrDefault("X-Amz-Signature")
  valid_612780 = validateParameter(valid_612780, JString, required = false,
                                 default = nil)
  if valid_612780 != nil:
    section.add "X-Amz-Signature", valid_612780
  var valid_612781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612781 = validateParameter(valid_612781, JString, required = false,
                                 default = nil)
  if valid_612781 != nil:
    section.add "X-Amz-Content-Sha256", valid_612781
  var valid_612782 = header.getOrDefault("X-Amz-Date")
  valid_612782 = validateParameter(valid_612782, JString, required = false,
                                 default = nil)
  if valid_612782 != nil:
    section.add "X-Amz-Date", valid_612782
  var valid_612783 = header.getOrDefault("X-Amz-Credential")
  valid_612783 = validateParameter(valid_612783, JString, required = false,
                                 default = nil)
  if valid_612783 != nil:
    section.add "X-Amz-Credential", valid_612783
  var valid_612784 = header.getOrDefault("X-Amz-Security-Token")
  valid_612784 = validateParameter(valid_612784, JString, required = false,
                                 default = nil)
  if valid_612784 != nil:
    section.add "X-Amz-Security-Token", valid_612784
  var valid_612785 = header.getOrDefault("X-Amz-Algorithm")
  valid_612785 = validateParameter(valid_612785, JString, required = false,
                                 default = nil)
  if valid_612785 != nil:
    section.add "X-Amz-Algorithm", valid_612785
  var valid_612786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612786 = validateParameter(valid_612786, JString, required = false,
                                 default = nil)
  if valid_612786 != nil:
    section.add "X-Amz-SignedHeaders", valid_612786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612787: Call_GetExitStandby_612773; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612787.validator(path, query, header, formData, body)
  let scheme = call_612787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612787.url(scheme.get, call_612787.host, call_612787.base,
                         call_612787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612787, url, valid)

proc call*(call_612788: Call_GetExitStandby_612773; AutoScalingGroupName: string;
          InstanceIds: JsonNode = nil; Action: string = "ExitStandby";
          Version: string = "2011-01-01"): Recallable =
  ## getExitStandby
  ## <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily Removing Instances from Your Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray
  ##              : The IDs of the instances. You can specify up to 20 instances.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612789 = newJObject()
  if InstanceIds != nil:
    query_612789.add "InstanceIds", InstanceIds
  add(query_612789, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612789, "Action", newJString(Action))
  add(query_612789, "Version", newJString(Version))
  result = call_612788.call(nil, query_612789, nil, nil, nil)

var getExitStandby* = Call_GetExitStandby_612773(name: "getExitStandby",
    meth: HttpMethod.HttpGet, host: "autoscaling.amazonaws.com",
    route: "/#Action=ExitStandby", validator: validate_GetExitStandby_612774,
    base: "/", url: url_GetExitStandby_612775, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutLifecycleHook_612831 = ref object of OpenApiRestCall_610658
proc url_PostPutLifecycleHook_612833(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutLifecycleHook_612832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612834 = query.getOrDefault("Action")
  valid_612834 = validateParameter(valid_612834, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_612834 != nil:
    section.add "Action", valid_612834
  var valid_612835 = query.getOrDefault("Version")
  valid_612835 = validateParameter(valid_612835, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612835 != nil:
    section.add "Version", valid_612835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612836 = header.getOrDefault("X-Amz-Signature")
  valid_612836 = validateParameter(valid_612836, JString, required = false,
                                 default = nil)
  if valid_612836 != nil:
    section.add "X-Amz-Signature", valid_612836
  var valid_612837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612837 = validateParameter(valid_612837, JString, required = false,
                                 default = nil)
  if valid_612837 != nil:
    section.add "X-Amz-Content-Sha256", valid_612837
  var valid_612838 = header.getOrDefault("X-Amz-Date")
  valid_612838 = validateParameter(valid_612838, JString, required = false,
                                 default = nil)
  if valid_612838 != nil:
    section.add "X-Amz-Date", valid_612838
  var valid_612839 = header.getOrDefault("X-Amz-Credential")
  valid_612839 = validateParameter(valid_612839, JString, required = false,
                                 default = nil)
  if valid_612839 != nil:
    section.add "X-Amz-Credential", valid_612839
  var valid_612840 = header.getOrDefault("X-Amz-Security-Token")
  valid_612840 = validateParameter(valid_612840, JString, required = false,
                                 default = nil)
  if valid_612840 != nil:
    section.add "X-Amz-Security-Token", valid_612840
  var valid_612841 = header.getOrDefault("X-Amz-Algorithm")
  valid_612841 = validateParameter(valid_612841, JString, required = false,
                                 default = nil)
  if valid_612841 != nil:
    section.add "X-Amz-Algorithm", valid_612841
  var valid_612842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612842 = validateParameter(valid_612842, JString, required = false,
                                 default = nil)
  if valid_612842 != nil:
    section.add "X-Amz-SignedHeaders", valid_612842
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612843 = formData.getOrDefault("AutoScalingGroupName")
  valid_612843 = validateParameter(valid_612843, JString, required = true,
                                 default = nil)
  if valid_612843 != nil:
    section.add "AutoScalingGroupName", valid_612843
  var valid_612844 = formData.getOrDefault("HeartbeatTimeout")
  valid_612844 = validateParameter(valid_612844, JInt, required = false, default = nil)
  if valid_612844 != nil:
    section.add "HeartbeatTimeout", valid_612844
  var valid_612845 = formData.getOrDefault("NotificationMetadata")
  valid_612845 = validateParameter(valid_612845, JString, required = false,
                                 default = nil)
  if valid_612845 != nil:
    section.add "NotificationMetadata", valid_612845
  var valid_612846 = formData.getOrDefault("NotificationTargetARN")
  valid_612846 = validateParameter(valid_612846, JString, required = false,
                                 default = nil)
  if valid_612846 != nil:
    section.add "NotificationTargetARN", valid_612846
  var valid_612847 = formData.getOrDefault("LifecycleTransition")
  valid_612847 = validateParameter(valid_612847, JString, required = false,
                                 default = nil)
  if valid_612847 != nil:
    section.add "LifecycleTransition", valid_612847
  var valid_612848 = formData.getOrDefault("LifecycleHookName")
  valid_612848 = validateParameter(valid_612848, JString, required = true,
                                 default = nil)
  if valid_612848 != nil:
    section.add "LifecycleHookName", valid_612848
  var valid_612849 = formData.getOrDefault("RoleARN")
  valid_612849 = validateParameter(valid_612849, JString, required = false,
                                 default = nil)
  if valid_612849 != nil:
    section.add "RoleARN", valid_612849
  var valid_612850 = formData.getOrDefault("DefaultResult")
  valid_612850 = validateParameter(valid_612850, JString, required = false,
                                 default = nil)
  if valid_612850 != nil:
    section.add "DefaultResult", valid_612850
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612851: Call_PostPutLifecycleHook_612831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_612851.validator(path, query, header, formData, body)
  let scheme = call_612851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612851.url(scheme.get, call_612851.host, call_612851.base,
                         call_612851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612851, url, valid)

proc call*(call_612852: Call_PostPutLifecycleHook_612831;
          AutoScalingGroupName: string; LifecycleHookName: string;
          HeartbeatTimeout: int = 0; NotificationMetadata: string = "";
          NotificationTargetARN: string = ""; LifecycleTransition: string = "";
          RoleARN: string = ""; Action: string = "PutLifecycleHook";
          Version: string = "2011-01-01"; DefaultResult: string = ""): Recallable =
  ## postPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  var query_612853 = newJObject()
  var formData_612854 = newJObject()
  add(formData_612854, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_612854, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(formData_612854, "NotificationMetadata", newJString(NotificationMetadata))
  add(formData_612854, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(formData_612854, "LifecycleTransition", newJString(LifecycleTransition))
  add(formData_612854, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_612854, "RoleARN", newJString(RoleARN))
  add(query_612853, "Action", newJString(Action))
  add(query_612853, "Version", newJString(Version))
  add(formData_612854, "DefaultResult", newJString(DefaultResult))
  result = call_612852.call(nil, query_612853, nil, formData_612854, nil)

var postPutLifecycleHook* = Call_PostPutLifecycleHook_612831(
    name: "postPutLifecycleHook", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_PostPutLifecycleHook_612832, base: "/",
    url: url_PostPutLifecycleHook_612833, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutLifecycleHook_612808 = ref object of OpenApiRestCall_610658
proc url_GetPutLifecycleHook_612810(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutLifecycleHook_612809(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTargetARN: JString
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: JString
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: JInt
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultResult: JString
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   NotificationMetadata: JString
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   Version: JString (required)
  ##   RoleARN: JString
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  section = newJObject()
  var valid_612811 = query.getOrDefault("NotificationTargetARN")
  valid_612811 = validateParameter(valid_612811, JString, required = false,
                                 default = nil)
  if valid_612811 != nil:
    section.add "NotificationTargetARN", valid_612811
  var valid_612812 = query.getOrDefault("LifecycleTransition")
  valid_612812 = validateParameter(valid_612812, JString, required = false,
                                 default = nil)
  if valid_612812 != nil:
    section.add "LifecycleTransition", valid_612812
  var valid_612813 = query.getOrDefault("HeartbeatTimeout")
  valid_612813 = validateParameter(valid_612813, JInt, required = false, default = nil)
  if valid_612813 != nil:
    section.add "HeartbeatTimeout", valid_612813
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612814 = query.getOrDefault("AutoScalingGroupName")
  valid_612814 = validateParameter(valid_612814, JString, required = true,
                                 default = nil)
  if valid_612814 != nil:
    section.add "AutoScalingGroupName", valid_612814
  var valid_612815 = query.getOrDefault("DefaultResult")
  valid_612815 = validateParameter(valid_612815, JString, required = false,
                                 default = nil)
  if valid_612815 != nil:
    section.add "DefaultResult", valid_612815
  var valid_612816 = query.getOrDefault("LifecycleHookName")
  valid_612816 = validateParameter(valid_612816, JString, required = true,
                                 default = nil)
  if valid_612816 != nil:
    section.add "LifecycleHookName", valid_612816
  var valid_612817 = query.getOrDefault("Action")
  valid_612817 = validateParameter(valid_612817, JString, required = true,
                                 default = newJString("PutLifecycleHook"))
  if valid_612817 != nil:
    section.add "Action", valid_612817
  var valid_612818 = query.getOrDefault("NotificationMetadata")
  valid_612818 = validateParameter(valid_612818, JString, required = false,
                                 default = nil)
  if valid_612818 != nil:
    section.add "NotificationMetadata", valid_612818
  var valid_612819 = query.getOrDefault("Version")
  valid_612819 = validateParameter(valid_612819, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612819 != nil:
    section.add "Version", valid_612819
  var valid_612820 = query.getOrDefault("RoleARN")
  valid_612820 = validateParameter(valid_612820, JString, required = false,
                                 default = nil)
  if valid_612820 != nil:
    section.add "RoleARN", valid_612820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612821 = header.getOrDefault("X-Amz-Signature")
  valid_612821 = validateParameter(valid_612821, JString, required = false,
                                 default = nil)
  if valid_612821 != nil:
    section.add "X-Amz-Signature", valid_612821
  var valid_612822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612822 = validateParameter(valid_612822, JString, required = false,
                                 default = nil)
  if valid_612822 != nil:
    section.add "X-Amz-Content-Sha256", valid_612822
  var valid_612823 = header.getOrDefault("X-Amz-Date")
  valid_612823 = validateParameter(valid_612823, JString, required = false,
                                 default = nil)
  if valid_612823 != nil:
    section.add "X-Amz-Date", valid_612823
  var valid_612824 = header.getOrDefault("X-Amz-Credential")
  valid_612824 = validateParameter(valid_612824, JString, required = false,
                                 default = nil)
  if valid_612824 != nil:
    section.add "X-Amz-Credential", valid_612824
  var valid_612825 = header.getOrDefault("X-Amz-Security-Token")
  valid_612825 = validateParameter(valid_612825, JString, required = false,
                                 default = nil)
  if valid_612825 != nil:
    section.add "X-Amz-Security-Token", valid_612825
  var valid_612826 = header.getOrDefault("X-Amz-Algorithm")
  valid_612826 = validateParameter(valid_612826, JString, required = false,
                                 default = nil)
  if valid_612826 != nil:
    section.add "X-Amz-Algorithm", valid_612826
  var valid_612827 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612827 = validateParameter(valid_612827, JString, required = false,
                                 default = nil)
  if valid_612827 != nil:
    section.add "X-Amz-SignedHeaders", valid_612827
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612828: Call_GetPutLifecycleHook_612808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ## 
  let valid = call_612828.validator(path, query, header, formData, body)
  let scheme = call_612828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612828.url(scheme.get, call_612828.host, call_612828.base,
                         call_612828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612828, url, valid)

proc call*(call_612829: Call_GetPutLifecycleHook_612808;
          AutoScalingGroupName: string; LifecycleHookName: string;
          NotificationTargetARN: string = ""; LifecycleTransition: string = "";
          HeartbeatTimeout: int = 0; DefaultResult: string = "";
          Action: string = "PutLifecycleHook"; NotificationMetadata: string = "";
          Version: string = "2011-01-01"; RoleARN: string = ""): Recallable =
  ## getPutLifecycleHook
  ## <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the instance terminates (before it is fully terminated).</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state using <a>RecordLifecycleActionHeartbeat</a>.</p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action using <a>CompleteLifecycleAction</a>.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling Lifecycle Hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using <a>DescribeLifecycleHooks</a>. If you are no longer using a lifecycle hook, you can delete it using <a>DeleteLifecycleHook</a>.</p>
  ##   NotificationTargetARN: string
  ##                        : <p>The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
  ##   LifecycleTransition: string
  ##                      : <p>The instance state to which you want to attach the lifecycle hook. The valid values are:</p> <ul> <li> <p>autoscaling:EC2_INSTANCE_LAUNCHING</p> </li> <li> <p>autoscaling:EC2_INSTANCE_TERMINATING</p> </li> </ul> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  ##   HeartbeatTimeout: int
  ##                   : <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p> <p>If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> parameter. You can prevent the lifecycle hook from timing out by calling <a>RecordLifecycleActionHeartbeat</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultResult: string
  ##                : Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either <code>CONTINUE</code> or <code>ABANDON</code>. The default value is <code>ABANDON</code>.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   NotificationMetadata: string
  ##                       : Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
  ##   Version: string (required)
  ##   RoleARN: string
  ##          : <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.</p> <p>Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.</p>
  var query_612830 = newJObject()
  add(query_612830, "NotificationTargetARN", newJString(NotificationTargetARN))
  add(query_612830, "LifecycleTransition", newJString(LifecycleTransition))
  add(query_612830, "HeartbeatTimeout", newJInt(HeartbeatTimeout))
  add(query_612830, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612830, "DefaultResult", newJString(DefaultResult))
  add(query_612830, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_612830, "Action", newJString(Action))
  add(query_612830, "NotificationMetadata", newJString(NotificationMetadata))
  add(query_612830, "Version", newJString(Version))
  add(query_612830, "RoleARN", newJString(RoleARN))
  result = call_612829.call(nil, query_612830, nil, nil, nil)

var getPutLifecycleHook* = Call_GetPutLifecycleHook_612808(
    name: "getPutLifecycleHook", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutLifecycleHook",
    validator: validate_GetPutLifecycleHook_612809, base: "/",
    url: url_GetPutLifecycleHook_612810, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutNotificationConfiguration_612873 = ref object of OpenApiRestCall_610658
proc url_PostPutNotificationConfiguration_612875(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutNotificationConfiguration_612874(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612876 = query.getOrDefault("Action")
  valid_612876 = validateParameter(valid_612876, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_612876 != nil:
    section.add "Action", valid_612876
  var valid_612877 = query.getOrDefault("Version")
  valid_612877 = validateParameter(valid_612877, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612877 != nil:
    section.add "Version", valid_612877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612878 = header.getOrDefault("X-Amz-Signature")
  valid_612878 = validateParameter(valid_612878, JString, required = false,
                                 default = nil)
  if valid_612878 != nil:
    section.add "X-Amz-Signature", valid_612878
  var valid_612879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612879 = validateParameter(valid_612879, JString, required = false,
                                 default = nil)
  if valid_612879 != nil:
    section.add "X-Amz-Content-Sha256", valid_612879
  var valid_612880 = header.getOrDefault("X-Amz-Date")
  valid_612880 = validateParameter(valid_612880, JString, required = false,
                                 default = nil)
  if valid_612880 != nil:
    section.add "X-Amz-Date", valid_612880
  var valid_612881 = header.getOrDefault("X-Amz-Credential")
  valid_612881 = validateParameter(valid_612881, JString, required = false,
                                 default = nil)
  if valid_612881 != nil:
    section.add "X-Amz-Credential", valid_612881
  var valid_612882 = header.getOrDefault("X-Amz-Security-Token")
  valid_612882 = validateParameter(valid_612882, JString, required = false,
                                 default = nil)
  if valid_612882 != nil:
    section.add "X-Amz-Security-Token", valid_612882
  var valid_612883 = header.getOrDefault("X-Amz-Algorithm")
  valid_612883 = validateParameter(valid_612883, JString, required = false,
                                 default = nil)
  if valid_612883 != nil:
    section.add "X-Amz-Algorithm", valid_612883
  var valid_612884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612884 = validateParameter(valid_612884, JString, required = false,
                                 default = nil)
  if valid_612884 != nil:
    section.add "X-Amz-SignedHeaders", valid_612884
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612885 = formData.getOrDefault("AutoScalingGroupName")
  valid_612885 = validateParameter(valid_612885, JString, required = true,
                                 default = nil)
  if valid_612885 != nil:
    section.add "AutoScalingGroupName", valid_612885
  var valid_612886 = formData.getOrDefault("NotificationTypes")
  valid_612886 = validateParameter(valid_612886, JArray, required = true, default = nil)
  if valid_612886 != nil:
    section.add "NotificationTypes", valid_612886
  var valid_612887 = formData.getOrDefault("TopicARN")
  valid_612887 = validateParameter(valid_612887, JString, required = true,
                                 default = nil)
  if valid_612887 != nil:
    section.add "TopicARN", valid_612887
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612888: Call_PostPutNotificationConfiguration_612873;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612888.validator(path, query, header, formData, body)
  let scheme = call_612888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612888.url(scheme.get, call_612888.host, call_612888.base,
                         call_612888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612888, url, valid)

proc call*(call_612889: Call_PostPutNotificationConfiguration_612873;
          AutoScalingGroupName: string; NotificationTypes: JsonNode;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## postPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   Action: string (required)
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Version: string (required)
  var query_612890 = newJObject()
  var formData_612891 = newJObject()
  add(formData_612891, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if NotificationTypes != nil:
    formData_612891.add "NotificationTypes", NotificationTypes
  add(query_612890, "Action", newJString(Action))
  add(formData_612891, "TopicARN", newJString(TopicARN))
  add(query_612890, "Version", newJString(Version))
  result = call_612889.call(nil, query_612890, nil, formData_612891, nil)

var postPutNotificationConfiguration* = Call_PostPutNotificationConfiguration_612873(
    name: "postPutNotificationConfiguration", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_PostPutNotificationConfiguration_612874, base: "/",
    url: url_PostPutNotificationConfiguration_612875,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutNotificationConfiguration_612855 = ref object of OpenApiRestCall_610658
proc url_GetPutNotificationConfiguration_612857(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutNotificationConfiguration_612856(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: JString (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NotificationTypes` field"
  var valid_612858 = query.getOrDefault("NotificationTypes")
  valid_612858 = validateParameter(valid_612858, JArray, required = true, default = nil)
  if valid_612858 != nil:
    section.add "NotificationTypes", valid_612858
  var valid_612859 = query.getOrDefault("AutoScalingGroupName")
  valid_612859 = validateParameter(valid_612859, JString, required = true,
                                 default = nil)
  if valid_612859 != nil:
    section.add "AutoScalingGroupName", valid_612859
  var valid_612860 = query.getOrDefault("TopicARN")
  valid_612860 = validateParameter(valid_612860, JString, required = true,
                                 default = nil)
  if valid_612860 != nil:
    section.add "TopicARN", valid_612860
  var valid_612861 = query.getOrDefault("Action")
  valid_612861 = validateParameter(valid_612861, JString, required = true, default = newJString(
      "PutNotificationConfiguration"))
  if valid_612861 != nil:
    section.add "Action", valid_612861
  var valid_612862 = query.getOrDefault("Version")
  valid_612862 = validateParameter(valid_612862, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612862 != nil:
    section.add "Version", valid_612862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612863 = header.getOrDefault("X-Amz-Signature")
  valid_612863 = validateParameter(valid_612863, JString, required = false,
                                 default = nil)
  if valid_612863 != nil:
    section.add "X-Amz-Signature", valid_612863
  var valid_612864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612864 = validateParameter(valid_612864, JString, required = false,
                                 default = nil)
  if valid_612864 != nil:
    section.add "X-Amz-Content-Sha256", valid_612864
  var valid_612865 = header.getOrDefault("X-Amz-Date")
  valid_612865 = validateParameter(valid_612865, JString, required = false,
                                 default = nil)
  if valid_612865 != nil:
    section.add "X-Amz-Date", valid_612865
  var valid_612866 = header.getOrDefault("X-Amz-Credential")
  valid_612866 = validateParameter(valid_612866, JString, required = false,
                                 default = nil)
  if valid_612866 != nil:
    section.add "X-Amz-Credential", valid_612866
  var valid_612867 = header.getOrDefault("X-Amz-Security-Token")
  valid_612867 = validateParameter(valid_612867, JString, required = false,
                                 default = nil)
  if valid_612867 != nil:
    section.add "X-Amz-Security-Token", valid_612867
  var valid_612868 = header.getOrDefault("X-Amz-Algorithm")
  valid_612868 = validateParameter(valid_612868, JString, required = false,
                                 default = nil)
  if valid_612868 != nil:
    section.add "X-Amz-Algorithm", valid_612868
  var valid_612869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612869 = validateParameter(valid_612869, JString, required = false,
                                 default = nil)
  if valid_612869 != nil:
    section.add "X-Amz-SignedHeaders", valid_612869
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612870: Call_GetPutNotificationConfiguration_612855;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612870.validator(path, query, header, formData, body)
  let scheme = call_612870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612870.url(scheme.get, call_612870.host, call_612870.base,
                         call_612870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612870, url, valid)

proc call*(call_612871: Call_GetPutNotificationConfiguration_612855;
          NotificationTypes: JsonNode; AutoScalingGroupName: string;
          TopicARN: string; Action: string = "PutNotificationConfiguration";
          Version: string = "2011-01-01"): Recallable =
  ## getPutNotificationConfiguration
  ## <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS Notifications When Your Auto Scaling Group Scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NotificationTypes: JArray (required)
  ##                    : The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see <a>DescribeAutoScalingNotificationTypes</a>.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TopicARN: string (required)
  ##           : The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612872 = newJObject()
  if NotificationTypes != nil:
    query_612872.add "NotificationTypes", NotificationTypes
  add(query_612872, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612872, "TopicARN", newJString(TopicARN))
  add(query_612872, "Action", newJString(Action))
  add(query_612872, "Version", newJString(Version))
  result = call_612871.call(nil, query_612872, nil, nil, nil)

var getPutNotificationConfiguration* = Call_GetPutNotificationConfiguration_612855(
    name: "getPutNotificationConfiguration", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutNotificationConfiguration",
    validator: validate_GetPutNotificationConfiguration_612856, base: "/",
    url: url_GetPutNotificationConfiguration_612857,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScalingPolicy_612922 = ref object of OpenApiRestCall_610658
proc url_PostPutScalingPolicy_612924(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScalingPolicy_612923(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612925 = query.getOrDefault("Action")
  valid_612925 = validateParameter(valid_612925, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_612925 != nil:
    section.add "Action", valid_612925
  var valid_612926 = query.getOrDefault("Version")
  valid_612926 = validateParameter(valid_612926, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612926 != nil:
    section.add "Version", valid_612926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612927 = header.getOrDefault("X-Amz-Signature")
  valid_612927 = validateParameter(valid_612927, JString, required = false,
                                 default = nil)
  if valid_612927 != nil:
    section.add "X-Amz-Signature", valid_612927
  var valid_612928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612928 = validateParameter(valid_612928, JString, required = false,
                                 default = nil)
  if valid_612928 != nil:
    section.add "X-Amz-Content-Sha256", valid_612928
  var valid_612929 = header.getOrDefault("X-Amz-Date")
  valid_612929 = validateParameter(valid_612929, JString, required = false,
                                 default = nil)
  if valid_612929 != nil:
    section.add "X-Amz-Date", valid_612929
  var valid_612930 = header.getOrDefault("X-Amz-Credential")
  valid_612930 = validateParameter(valid_612930, JString, required = false,
                                 default = nil)
  if valid_612930 != nil:
    section.add "X-Amz-Credential", valid_612930
  var valid_612931 = header.getOrDefault("X-Amz-Security-Token")
  valid_612931 = validateParameter(valid_612931, JString, required = false,
                                 default = nil)
  if valid_612931 != nil:
    section.add "X-Amz-Security-Token", valid_612931
  var valid_612932 = header.getOrDefault("X-Amz-Algorithm")
  valid_612932 = validateParameter(valid_612932, JString, required = false,
                                 default = nil)
  if valid_612932 != nil:
    section.add "X-Amz-Algorithm", valid_612932
  var valid_612933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612933 = validateParameter(valid_612933, JString, required = false,
                                 default = nil)
  if valid_612933 != nil:
    section.add "X-Amz-SignedHeaders", valid_612933
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612934 = formData.getOrDefault("AutoScalingGroupName")
  valid_612934 = validateParameter(valid_612934, JString, required = true,
                                 default = nil)
  if valid_612934 != nil:
    section.add "AutoScalingGroupName", valid_612934
  var valid_612935 = formData.getOrDefault("StepAdjustments")
  valid_612935 = validateParameter(valid_612935, JArray, required = false,
                                 default = nil)
  if valid_612935 != nil:
    section.add "StepAdjustments", valid_612935
  var valid_612936 = formData.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_612936 = validateParameter(valid_612936, JString, required = false,
                                 default = nil)
  if valid_612936 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_612936
  var valid_612937 = formData.getOrDefault("PolicyType")
  valid_612937 = validateParameter(valid_612937, JString, required = false,
                                 default = nil)
  if valid_612937 != nil:
    section.add "PolicyType", valid_612937
  var valid_612938 = formData.getOrDefault("ScalingAdjustment")
  valid_612938 = validateParameter(valid_612938, JInt, required = false, default = nil)
  if valid_612938 != nil:
    section.add "ScalingAdjustment", valid_612938
  var valid_612939 = formData.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_612939 = validateParameter(valid_612939, JString, required = false,
                                 default = nil)
  if valid_612939 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_612939
  var valid_612940 = formData.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_612940 = validateParameter(valid_612940, JString, required = false,
                                 default = nil)
  if valid_612940 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_612940
  var valid_612941 = formData.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_612941 = validateParameter(valid_612941, JString, required = false,
                                 default = nil)
  if valid_612941 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_612941
  var valid_612942 = formData.getOrDefault("Cooldown")
  valid_612942 = validateParameter(valid_612942, JInt, required = false, default = nil)
  if valid_612942 != nil:
    section.add "Cooldown", valid_612942
  var valid_612943 = formData.getOrDefault("MinAdjustmentStep")
  valid_612943 = validateParameter(valid_612943, JInt, required = false, default = nil)
  if valid_612943 != nil:
    section.add "MinAdjustmentStep", valid_612943
  var valid_612944 = formData.getOrDefault("AdjustmentType")
  valid_612944 = validateParameter(valid_612944, JString, required = false,
                                 default = nil)
  if valid_612944 != nil:
    section.add "AdjustmentType", valid_612944
  var valid_612945 = formData.getOrDefault("PolicyName")
  valid_612945 = validateParameter(valid_612945, JString, required = true,
                                 default = nil)
  if valid_612945 != nil:
    section.add "PolicyName", valid_612945
  var valid_612946 = formData.getOrDefault("MinAdjustmentMagnitude")
  valid_612946 = validateParameter(valid_612946, JInt, required = false, default = nil)
  if valid_612946 != nil:
    section.add "MinAdjustmentMagnitude", valid_612946
  var valid_612947 = formData.getOrDefault("EstimatedInstanceWarmup")
  valid_612947 = validateParameter(valid_612947, JInt, required = false, default = nil)
  if valid_612947 != nil:
    section.add "EstimatedInstanceWarmup", valid_612947
  var valid_612948 = formData.getOrDefault("MetricAggregationType")
  valid_612948 = validateParameter(valid_612948, JString, required = false,
                                 default = nil)
  if valid_612948 != nil:
    section.add "MetricAggregationType", valid_612948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612949: Call_PostPutScalingPolicy_612922; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612949.validator(path, query, header, formData, body)
  let scheme = call_612949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612949.url(scheme.get, call_612949.host, call_612949.base,
                         call_612949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612949, url, valid)

proc call*(call_612950: Call_PostPutScalingPolicy_612922;
          AutoScalingGroupName: string; PolicyName: string;
          StepAdjustments: JsonNode = nil;
          TargetTrackingConfigurationDisableScaleIn: string = "";
          PolicyType: string = ""; ScalingAdjustment: int = 0;
    TargetTrackingConfigurationPredefinedMetricSpecification: string = "";
    TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          TargetTrackingConfigurationTargetValue: string = ""; Cooldown: int = 0;
          Action: string = "PutScalingPolicy"; MinAdjustmentStep: int = 0;
          AdjustmentType: string = ""; Version: string = "2011-01-01";
          MinAdjustmentMagnitude: int = 0; EstimatedInstanceWarmup: int = 0;
          MetricAggregationType: string = ""): Recallable =
  ## postPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  var query_612951 = newJObject()
  var formData_612952 = newJObject()
  add(formData_612952, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  if StepAdjustments != nil:
    formData_612952.add "StepAdjustments", StepAdjustments
  add(formData_612952, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(formData_612952, "PolicyType", newJString(PolicyType))
  add(formData_612952, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(formData_612952,
      "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  add(formData_612952,
      "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(formData_612952, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(formData_612952, "Cooldown", newJInt(Cooldown))
  add(query_612951, "Action", newJString(Action))
  add(formData_612952, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(formData_612952, "AdjustmentType", newJString(AdjustmentType))
  add(query_612951, "Version", newJString(Version))
  add(formData_612952, "PolicyName", newJString(PolicyName))
  add(formData_612952, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  add(formData_612952, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(formData_612952, "MetricAggregationType", newJString(MetricAggregationType))
  result = call_612950.call(nil, query_612951, nil, formData_612952, nil)

var postPutScalingPolicy* = Call_PostPutScalingPolicy_612922(
    name: "postPutScalingPolicy", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_PostPutScalingPolicy_612923, base: "/",
    url: url_PostPutScalingPolicy_612924, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScalingPolicy_612892 = ref object of OpenApiRestCall_610658
proc url_GetPutScalingPolicy_612894(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScalingPolicy_612893(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyType: JString
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   MinAdjustmentMagnitude: JInt
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AdjustmentType: JString
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfiguration.CustomizedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: JString (required)
  ##             : The name of the policy.
  ##   Cooldown: JInt
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: JString
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   TargetTrackingConfiguration.DisableScaleIn: JString
  ##                                             : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: JInt
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfiguration.TargetValue: JString
  ##                                          : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Action: JString (required)
  ##   EstimatedInstanceWarmup: JInt
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: JInt
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Version: JString (required)
  ##   TargetTrackingConfiguration.PredefinedMetricSpecification: JString
  ##                                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  section = newJObject()
  var valid_612895 = query.getOrDefault("PolicyType")
  valid_612895 = validateParameter(valid_612895, JString, required = false,
                                 default = nil)
  if valid_612895 != nil:
    section.add "PolicyType", valid_612895
  var valid_612896 = query.getOrDefault("MinAdjustmentMagnitude")
  valid_612896 = validateParameter(valid_612896, JInt, required = false, default = nil)
  if valid_612896 != nil:
    section.add "MinAdjustmentMagnitude", valid_612896
  var valid_612897 = query.getOrDefault("StepAdjustments")
  valid_612897 = validateParameter(valid_612897, JArray, required = false,
                                 default = nil)
  if valid_612897 != nil:
    section.add "StepAdjustments", valid_612897
  var valid_612898 = query.getOrDefault("AdjustmentType")
  valid_612898 = validateParameter(valid_612898, JString, required = false,
                                 default = nil)
  if valid_612898 != nil:
    section.add "AdjustmentType", valid_612898
  var valid_612899 = query.getOrDefault("TargetTrackingConfiguration.CustomizedMetricSpecification")
  valid_612899 = validateParameter(valid_612899, JString, required = false,
                                 default = nil)
  if valid_612899 != nil:
    section.add "TargetTrackingConfiguration.CustomizedMetricSpecification", valid_612899
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_612900 = query.getOrDefault("PolicyName")
  valid_612900 = validateParameter(valid_612900, JString, required = true,
                                 default = nil)
  if valid_612900 != nil:
    section.add "PolicyName", valid_612900
  var valid_612901 = query.getOrDefault("Cooldown")
  valid_612901 = validateParameter(valid_612901, JInt, required = false, default = nil)
  if valid_612901 != nil:
    section.add "Cooldown", valid_612901
  var valid_612902 = query.getOrDefault("MetricAggregationType")
  valid_612902 = validateParameter(valid_612902, JString, required = false,
                                 default = nil)
  if valid_612902 != nil:
    section.add "MetricAggregationType", valid_612902
  var valid_612903 = query.getOrDefault("TargetTrackingConfiguration.DisableScaleIn")
  valid_612903 = validateParameter(valid_612903, JString, required = false,
                                 default = nil)
  if valid_612903 != nil:
    section.add "TargetTrackingConfiguration.DisableScaleIn", valid_612903
  var valid_612904 = query.getOrDefault("ScalingAdjustment")
  valid_612904 = validateParameter(valid_612904, JInt, required = false, default = nil)
  if valid_612904 != nil:
    section.add "ScalingAdjustment", valid_612904
  var valid_612905 = query.getOrDefault("AutoScalingGroupName")
  valid_612905 = validateParameter(valid_612905, JString, required = true,
                                 default = nil)
  if valid_612905 != nil:
    section.add "AutoScalingGroupName", valid_612905
  var valid_612906 = query.getOrDefault("TargetTrackingConfiguration.TargetValue")
  valid_612906 = validateParameter(valid_612906, JString, required = false,
                                 default = nil)
  if valid_612906 != nil:
    section.add "TargetTrackingConfiguration.TargetValue", valid_612906
  var valid_612907 = query.getOrDefault("Action")
  valid_612907 = validateParameter(valid_612907, JString, required = true,
                                 default = newJString("PutScalingPolicy"))
  if valid_612907 != nil:
    section.add "Action", valid_612907
  var valid_612908 = query.getOrDefault("EstimatedInstanceWarmup")
  valid_612908 = validateParameter(valid_612908, JInt, required = false, default = nil)
  if valid_612908 != nil:
    section.add "EstimatedInstanceWarmup", valid_612908
  var valid_612909 = query.getOrDefault("MinAdjustmentStep")
  valid_612909 = validateParameter(valid_612909, JInt, required = false, default = nil)
  if valid_612909 != nil:
    section.add "MinAdjustmentStep", valid_612909
  var valid_612910 = query.getOrDefault("Version")
  valid_612910 = validateParameter(valid_612910, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612910 != nil:
    section.add "Version", valid_612910
  var valid_612911 = query.getOrDefault("TargetTrackingConfiguration.PredefinedMetricSpecification")
  valid_612911 = validateParameter(valid_612911, JString, required = false,
                                 default = nil)
  if valid_612911 != nil:
    section.add "TargetTrackingConfiguration.PredefinedMetricSpecification", valid_612911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612912 = header.getOrDefault("X-Amz-Signature")
  valid_612912 = validateParameter(valid_612912, JString, required = false,
                                 default = nil)
  if valid_612912 != nil:
    section.add "X-Amz-Signature", valid_612912
  var valid_612913 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612913 = validateParameter(valid_612913, JString, required = false,
                                 default = nil)
  if valid_612913 != nil:
    section.add "X-Amz-Content-Sha256", valid_612913
  var valid_612914 = header.getOrDefault("X-Amz-Date")
  valid_612914 = validateParameter(valid_612914, JString, required = false,
                                 default = nil)
  if valid_612914 != nil:
    section.add "X-Amz-Date", valid_612914
  var valid_612915 = header.getOrDefault("X-Amz-Credential")
  valid_612915 = validateParameter(valid_612915, JString, required = false,
                                 default = nil)
  if valid_612915 != nil:
    section.add "X-Amz-Credential", valid_612915
  var valid_612916 = header.getOrDefault("X-Amz-Security-Token")
  valid_612916 = validateParameter(valid_612916, JString, required = false,
                                 default = nil)
  if valid_612916 != nil:
    section.add "X-Amz-Security-Token", valid_612916
  var valid_612917 = header.getOrDefault("X-Amz-Algorithm")
  valid_612917 = validateParameter(valid_612917, JString, required = false,
                                 default = nil)
  if valid_612917 != nil:
    section.add "X-Amz-Algorithm", valid_612917
  var valid_612918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612918 = validateParameter(valid_612918, JString, required = false,
                                 default = nil)
  if valid_612918 != nil:
    section.add "X-Amz-SignedHeaders", valid_612918
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612919: Call_GetPutScalingPolicy_612892; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612919.validator(path, query, header, formData, body)
  let scheme = call_612919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612919.url(scheme.get, call_612919.host, call_612919.base,
                         call_612919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612919, url, valid)

proc call*(call_612920: Call_GetPutScalingPolicy_612892; PolicyName: string;
          AutoScalingGroupName: string; PolicyType: string = "";
          MinAdjustmentMagnitude: int = 0; StepAdjustments: JsonNode = nil;
          AdjustmentType: string = ""; TargetTrackingConfigurationCustomizedMetricSpecification: string = "";
          Cooldown: int = 0; MetricAggregationType: string = "";
          TargetTrackingConfigurationDisableScaleIn: string = "";
          ScalingAdjustment: int = 0;
          TargetTrackingConfigurationTargetValue: string = "";
          Action: string = "PutScalingPolicy"; EstimatedInstanceWarmup: int = 0;
          MinAdjustmentStep: int = 0; Version: string = "2011-01-01";
          TargetTrackingConfigurationPredefinedMetricSpecification: string = ""): Recallable =
  ## getPutScalingPolicy
  ## <p>Creates or updates a scaling policy for an Auto Scaling group. To update an existing scaling policy, use the existing policy name and set the parameters to change. Any existing parameter not changed in an update to an existing policy is not changed in this update request.</p> <p>For more information about using scaling policies to scale your Auto Scaling group automatically, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html">Dynamic Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   PolicyType: string
  ##             : The policy type. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, and <code>TargetTrackingScaling</code>. If the policy type is null, the value is treated as <code>SimpleScaling</code>.
  ##   MinAdjustmentMagnitude: int
  ##                         : <p>The minimum number of instances to scale. If the value of <code>AdjustmentType</code> is <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least this many instances. Otherwise, the error is <code>ValidationError</code>.</p> <p>This property replaces the <code>MinAdjustmentStep</code> property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>SimpleScaling</code> or <code>StepScaling</code>.</p>
  ##   StepAdjustments: JArray
  ##                  : <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Conditional: If you specify <code>StepScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AdjustmentType: string
  ##                 : <p>Specifies whether the <code>ScalingAdjustment</code> parameter is an absolute number or a percentage of the current capacity. The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling Adjustment Types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   TargetTrackingConfigurationCustomizedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A customized metric. You must specify either a predefined metric or a customized metric.
  ##   PolicyName: string (required)
  ##             : The name of the policy.
  ##   Cooldown: int
  ##           : <p>The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MetricAggregationType: string
  ##                        : <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
  ##   TargetTrackingConfigurationDisableScaleIn: string
  ##                                            : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
  ##   ScalingAdjustment: int
  ##                    : <p>The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the <code>AdjustmentType</code> parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Conditional: If you specify <code>SimpleScaling</code> for the policy type, you must specify this parameter. (Not used with any other policy type.) </p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   TargetTrackingConfigurationTargetValue: string
  ##                                         : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## The target value for the metric.
  ##   Action: string (required)
  ##   EstimatedInstanceWarmup: int
  ##                          : <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>TargetTrackingScaling</code>.</p>
  ##   MinAdjustmentStep: int
  ##                    : Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
  ##   Version: string (required)
  ##   TargetTrackingConfigurationPredefinedMetricSpecification: string
  ##                                                           : Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
  ## A predefined metric. You must specify either a predefined metric or a customized metric.
  var query_612921 = newJObject()
  add(query_612921, "PolicyType", newJString(PolicyType))
  add(query_612921, "MinAdjustmentMagnitude", newJInt(MinAdjustmentMagnitude))
  if StepAdjustments != nil:
    query_612921.add "StepAdjustments", StepAdjustments
  add(query_612921, "AdjustmentType", newJString(AdjustmentType))
  add(query_612921, "TargetTrackingConfiguration.CustomizedMetricSpecification",
      newJString(TargetTrackingConfigurationCustomizedMetricSpecification))
  add(query_612921, "PolicyName", newJString(PolicyName))
  add(query_612921, "Cooldown", newJInt(Cooldown))
  add(query_612921, "MetricAggregationType", newJString(MetricAggregationType))
  add(query_612921, "TargetTrackingConfiguration.DisableScaleIn",
      newJString(TargetTrackingConfigurationDisableScaleIn))
  add(query_612921, "ScalingAdjustment", newJInt(ScalingAdjustment))
  add(query_612921, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612921, "TargetTrackingConfiguration.TargetValue",
      newJString(TargetTrackingConfigurationTargetValue))
  add(query_612921, "Action", newJString(Action))
  add(query_612921, "EstimatedInstanceWarmup", newJInt(EstimatedInstanceWarmup))
  add(query_612921, "MinAdjustmentStep", newJInt(MinAdjustmentStep))
  add(query_612921, "Version", newJString(Version))
  add(query_612921, "TargetTrackingConfiguration.PredefinedMetricSpecification",
      newJString(TargetTrackingConfigurationPredefinedMetricSpecification))
  result = call_612920.call(nil, query_612921, nil, nil, nil)

var getPutScalingPolicy* = Call_GetPutScalingPolicy_612892(
    name: "getPutScalingPolicy", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=PutScalingPolicy",
    validator: validate_GetPutScalingPolicy_612893, base: "/",
    url: url_GetPutScalingPolicy_612894, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutScheduledUpdateGroupAction_612977 = ref object of OpenApiRestCall_610658
proc url_PostPutScheduledUpdateGroupAction_612979(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutScheduledUpdateGroupAction_612978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612980 = query.getOrDefault("Action")
  valid_612980 = validateParameter(valid_612980, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_612980 != nil:
    section.add "Action", valid_612980
  var valid_612981 = query.getOrDefault("Version")
  valid_612981 = validateParameter(valid_612981, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612981 != nil:
    section.add "Version", valid_612981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612982 = header.getOrDefault("X-Amz-Signature")
  valid_612982 = validateParameter(valid_612982, JString, required = false,
                                 default = nil)
  if valid_612982 != nil:
    section.add "X-Amz-Signature", valid_612982
  var valid_612983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612983 = validateParameter(valid_612983, JString, required = false,
                                 default = nil)
  if valid_612983 != nil:
    section.add "X-Amz-Content-Sha256", valid_612983
  var valid_612984 = header.getOrDefault("X-Amz-Date")
  valid_612984 = validateParameter(valid_612984, JString, required = false,
                                 default = nil)
  if valid_612984 != nil:
    section.add "X-Amz-Date", valid_612984
  var valid_612985 = header.getOrDefault("X-Amz-Credential")
  valid_612985 = validateParameter(valid_612985, JString, required = false,
                                 default = nil)
  if valid_612985 != nil:
    section.add "X-Amz-Credential", valid_612985
  var valid_612986 = header.getOrDefault("X-Amz-Security-Token")
  valid_612986 = validateParameter(valid_612986, JString, required = false,
                                 default = nil)
  if valid_612986 != nil:
    section.add "X-Amz-Security-Token", valid_612986
  var valid_612987 = header.getOrDefault("X-Amz-Algorithm")
  valid_612987 = validateParameter(valid_612987, JString, required = false,
                                 default = nil)
  if valid_612987 != nil:
    section.add "X-Amz-Algorithm", valid_612987
  var valid_612988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612988 = validateParameter(valid_612988, JString, required = false,
                                 default = nil)
  if valid_612988 != nil:
    section.add "X-Amz-SignedHeaders", valid_612988
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Time: JString
  ##       : This parameter is no longer used.
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_612989 = formData.getOrDefault("AutoScalingGroupName")
  valid_612989 = validateParameter(valid_612989, JString, required = true,
                                 default = nil)
  if valid_612989 != nil:
    section.add "AutoScalingGroupName", valid_612989
  var valid_612990 = formData.getOrDefault("MinSize")
  valid_612990 = validateParameter(valid_612990, JInt, required = false, default = nil)
  if valid_612990 != nil:
    section.add "MinSize", valid_612990
  var valid_612991 = formData.getOrDefault("DesiredCapacity")
  valid_612991 = validateParameter(valid_612991, JInt, required = false, default = nil)
  if valid_612991 != nil:
    section.add "DesiredCapacity", valid_612991
  var valid_612992 = formData.getOrDefault("ScheduledActionName")
  valid_612992 = validateParameter(valid_612992, JString, required = true,
                                 default = nil)
  if valid_612992 != nil:
    section.add "ScheduledActionName", valid_612992
  var valid_612993 = formData.getOrDefault("Recurrence")
  valid_612993 = validateParameter(valid_612993, JString, required = false,
                                 default = nil)
  if valid_612993 != nil:
    section.add "Recurrence", valid_612993
  var valid_612994 = formData.getOrDefault("EndTime")
  valid_612994 = validateParameter(valid_612994, JString, required = false,
                                 default = nil)
  if valid_612994 != nil:
    section.add "EndTime", valid_612994
  var valid_612995 = formData.getOrDefault("StartTime")
  valid_612995 = validateParameter(valid_612995, JString, required = false,
                                 default = nil)
  if valid_612995 != nil:
    section.add "StartTime", valid_612995
  var valid_612996 = formData.getOrDefault("Time")
  valid_612996 = validateParameter(valid_612996, JString, required = false,
                                 default = nil)
  if valid_612996 != nil:
    section.add "Time", valid_612996
  var valid_612997 = formData.getOrDefault("MaxSize")
  valid_612997 = validateParameter(valid_612997, JInt, required = false, default = nil)
  if valid_612997 != nil:
    section.add "MaxSize", valid_612997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612998: Call_PostPutScheduledUpdateGroupAction_612977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612998.validator(path, query, header, formData, body)
  let scheme = call_612998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612998.url(scheme.get, call_612998.host, call_612998.base,
                         call_612998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612998, url, valid)

proc call*(call_612999: Call_PostPutScheduledUpdateGroupAction_612977;
          AutoScalingGroupName: string; ScheduledActionName: string;
          MinSize: int = 0; DesiredCapacity: int = 0; Recurrence: string = "";
          EndTime: string = ""; StartTime: string = "";
          Action: string = "PutScheduledUpdateGroupAction"; Time: string = "";
          MaxSize: int = 0; Version: string = "2011-01-01"): Recallable =
  ## postPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   Action: string (required)
  ##   Time: string
  ##       : This parameter is no longer used.
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   Version: string (required)
  var query_613000 = newJObject()
  var formData_613001 = newJObject()
  add(formData_613001, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613001, "MinSize", newJInt(MinSize))
  add(formData_613001, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_613001, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_613001, "Recurrence", newJString(Recurrence))
  add(formData_613001, "EndTime", newJString(EndTime))
  add(formData_613001, "StartTime", newJString(StartTime))
  add(query_613000, "Action", newJString(Action))
  add(formData_613001, "Time", newJString(Time))
  add(formData_613001, "MaxSize", newJInt(MaxSize))
  add(query_613000, "Version", newJString(Version))
  result = call_612999.call(nil, query_613000, nil, formData_613001, nil)

var postPutScheduledUpdateGroupAction* = Call_PostPutScheduledUpdateGroupAction_612977(
    name: "postPutScheduledUpdateGroupAction", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_PostPutScheduledUpdateGroupAction_612978, base: "/",
    url: url_PostPutScheduledUpdateGroupAction_612979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutScheduledUpdateGroupAction_612953 = ref object of OpenApiRestCall_610658
proc url_GetPutScheduledUpdateGroupAction_612955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutScheduledUpdateGroupAction_612954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Recurrence: JString
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   MaxSize: JInt
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of this scaling action.
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   MinSize: JInt
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   EndTime: JString
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: JString (required)
  ##   Time: JString
  ##       : This parameter is no longer used.
  section = newJObject()
  var valid_612956 = query.getOrDefault("Recurrence")
  valid_612956 = validateParameter(valid_612956, JString, required = false,
                                 default = nil)
  if valid_612956 != nil:
    section.add "Recurrence", valid_612956
  var valid_612957 = query.getOrDefault("MaxSize")
  valid_612957 = validateParameter(valid_612957, JInt, required = false, default = nil)
  if valid_612957 != nil:
    section.add "MaxSize", valid_612957
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_612958 = query.getOrDefault("ScheduledActionName")
  valid_612958 = validateParameter(valid_612958, JString, required = true,
                                 default = nil)
  if valid_612958 != nil:
    section.add "ScheduledActionName", valid_612958
  var valid_612959 = query.getOrDefault("DesiredCapacity")
  valid_612959 = validateParameter(valid_612959, JInt, required = false, default = nil)
  if valid_612959 != nil:
    section.add "DesiredCapacity", valid_612959
  var valid_612960 = query.getOrDefault("AutoScalingGroupName")
  valid_612960 = validateParameter(valid_612960, JString, required = true,
                                 default = nil)
  if valid_612960 != nil:
    section.add "AutoScalingGroupName", valid_612960
  var valid_612961 = query.getOrDefault("Action")
  valid_612961 = validateParameter(valid_612961, JString, required = true, default = newJString(
      "PutScheduledUpdateGroupAction"))
  if valid_612961 != nil:
    section.add "Action", valid_612961
  var valid_612962 = query.getOrDefault("StartTime")
  valid_612962 = validateParameter(valid_612962, JString, required = false,
                                 default = nil)
  if valid_612962 != nil:
    section.add "StartTime", valid_612962
  var valid_612963 = query.getOrDefault("MinSize")
  valid_612963 = validateParameter(valid_612963, JInt, required = false, default = nil)
  if valid_612963 != nil:
    section.add "MinSize", valid_612963
  var valid_612964 = query.getOrDefault("EndTime")
  valid_612964 = validateParameter(valid_612964, JString, required = false,
                                 default = nil)
  if valid_612964 != nil:
    section.add "EndTime", valid_612964
  var valid_612965 = query.getOrDefault("Version")
  valid_612965 = validateParameter(valid_612965, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_612965 != nil:
    section.add "Version", valid_612965
  var valid_612966 = query.getOrDefault("Time")
  valid_612966 = validateParameter(valid_612966, JString, required = false,
                                 default = nil)
  if valid_612966 != nil:
    section.add "Time", valid_612966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612967 = header.getOrDefault("X-Amz-Signature")
  valid_612967 = validateParameter(valid_612967, JString, required = false,
                                 default = nil)
  if valid_612967 != nil:
    section.add "X-Amz-Signature", valid_612967
  var valid_612968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612968 = validateParameter(valid_612968, JString, required = false,
                                 default = nil)
  if valid_612968 != nil:
    section.add "X-Amz-Content-Sha256", valid_612968
  var valid_612969 = header.getOrDefault("X-Amz-Date")
  valid_612969 = validateParameter(valid_612969, JString, required = false,
                                 default = nil)
  if valid_612969 != nil:
    section.add "X-Amz-Date", valid_612969
  var valid_612970 = header.getOrDefault("X-Amz-Credential")
  valid_612970 = validateParameter(valid_612970, JString, required = false,
                                 default = nil)
  if valid_612970 != nil:
    section.add "X-Amz-Credential", valid_612970
  var valid_612971 = header.getOrDefault("X-Amz-Security-Token")
  valid_612971 = validateParameter(valid_612971, JString, required = false,
                                 default = nil)
  if valid_612971 != nil:
    section.add "X-Amz-Security-Token", valid_612971
  var valid_612972 = header.getOrDefault("X-Amz-Algorithm")
  valid_612972 = validateParameter(valid_612972, JString, required = false,
                                 default = nil)
  if valid_612972 != nil:
    section.add "X-Amz-Algorithm", valid_612972
  var valid_612973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612973 = validateParameter(valid_612973, JString, required = false,
                                 default = nil)
  if valid_612973 != nil:
    section.add "X-Amz-SignedHeaders", valid_612973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612974: Call_GetPutScheduledUpdateGroupAction_612953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_612974.validator(path, query, header, formData, body)
  let scheme = call_612974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612974.url(scheme.get, call_612974.host, call_612974.base,
                         call_612974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612974, url, valid)

proc call*(call_612975: Call_GetPutScheduledUpdateGroupAction_612953;
          ScheduledActionName: string; AutoScalingGroupName: string;
          Recurrence: string = ""; MaxSize: int = 0; DesiredCapacity: int = 0;
          Action: string = "PutScheduledUpdateGroupAction"; StartTime: string = "";
          MinSize: int = 0; EndTime: string = ""; Version: string = "2011-01-01";
          Time: string = ""): Recallable =
  ## getPutScheduledUpdateGroupAction
  ## <p>Creates or updates a scheduled scaling action for an Auto Scaling group. If you leave a parameter unspecified when updating a scheduled scaling action, the corresponding value remains unchanged.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Recurrence: string
  ##             : <p>The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p>
  ##   MaxSize: int
  ##          : The maximum number of instances in the Auto Scaling group.
  ##   ScheduledActionName: string (required)
  ##                      : The name of this scaling action.
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2019-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
  ##   MinSize: int
  ##          : The minimum number of instances in the Auto Scaling group.
  ##   EndTime: string
  ##          : The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
  ##   Version: string (required)
  ##   Time: string
  ##       : This parameter is no longer used.
  var query_612976 = newJObject()
  add(query_612976, "Recurrence", newJString(Recurrence))
  add(query_612976, "MaxSize", newJInt(MaxSize))
  add(query_612976, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_612976, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_612976, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_612976, "Action", newJString(Action))
  add(query_612976, "StartTime", newJString(StartTime))
  add(query_612976, "MinSize", newJInt(MinSize))
  add(query_612976, "EndTime", newJString(EndTime))
  add(query_612976, "Version", newJString(Version))
  add(query_612976, "Time", newJString(Time))
  result = call_612975.call(nil, query_612976, nil, nil, nil)

var getPutScheduledUpdateGroupAction* = Call_GetPutScheduledUpdateGroupAction_612953(
    name: "getPutScheduledUpdateGroupAction", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=PutScheduledUpdateGroupAction",
    validator: validate_GetPutScheduledUpdateGroupAction_612954, base: "/",
    url: url_GetPutScheduledUpdateGroupAction_612955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRecordLifecycleActionHeartbeat_613021 = ref object of OpenApiRestCall_610658
proc url_PostRecordLifecycleActionHeartbeat_613023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRecordLifecycleActionHeartbeat_613022(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613024 = query.getOrDefault("Action")
  valid_613024 = validateParameter(valid_613024, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_613024 != nil:
    section.add "Action", valid_613024
  var valid_613025 = query.getOrDefault("Version")
  valid_613025 = validateParameter(valid_613025, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613025 != nil:
    section.add "Version", valid_613025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613026 = header.getOrDefault("X-Amz-Signature")
  valid_613026 = validateParameter(valid_613026, JString, required = false,
                                 default = nil)
  if valid_613026 != nil:
    section.add "X-Amz-Signature", valid_613026
  var valid_613027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613027 = validateParameter(valid_613027, JString, required = false,
                                 default = nil)
  if valid_613027 != nil:
    section.add "X-Amz-Content-Sha256", valid_613027
  var valid_613028 = header.getOrDefault("X-Amz-Date")
  valid_613028 = validateParameter(valid_613028, JString, required = false,
                                 default = nil)
  if valid_613028 != nil:
    section.add "X-Amz-Date", valid_613028
  var valid_613029 = header.getOrDefault("X-Amz-Credential")
  valid_613029 = validateParameter(valid_613029, JString, required = false,
                                 default = nil)
  if valid_613029 != nil:
    section.add "X-Amz-Credential", valid_613029
  var valid_613030 = header.getOrDefault("X-Amz-Security-Token")
  valid_613030 = validateParameter(valid_613030, JString, required = false,
                                 default = nil)
  if valid_613030 != nil:
    section.add "X-Amz-Security-Token", valid_613030
  var valid_613031 = header.getOrDefault("X-Amz-Algorithm")
  valid_613031 = validateParameter(valid_613031, JString, required = false,
                                 default = nil)
  if valid_613031 != nil:
    section.add "X-Amz-Algorithm", valid_613031
  var valid_613032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613032 = validateParameter(valid_613032, JString, required = false,
                                 default = nil)
  if valid_613032 != nil:
    section.add "X-Amz-SignedHeaders", valid_613032
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   InstanceId: JString
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613033 = formData.getOrDefault("AutoScalingGroupName")
  valid_613033 = validateParameter(valid_613033, JString, required = true,
                                 default = nil)
  if valid_613033 != nil:
    section.add "AutoScalingGroupName", valid_613033
  var valid_613034 = formData.getOrDefault("LifecycleHookName")
  valid_613034 = validateParameter(valid_613034, JString, required = true,
                                 default = nil)
  if valid_613034 != nil:
    section.add "LifecycleHookName", valid_613034
  var valid_613035 = formData.getOrDefault("LifecycleActionToken")
  valid_613035 = validateParameter(valid_613035, JString, required = false,
                                 default = nil)
  if valid_613035 != nil:
    section.add "LifecycleActionToken", valid_613035
  var valid_613036 = formData.getOrDefault("InstanceId")
  valid_613036 = validateParameter(valid_613036, JString, required = false,
                                 default = nil)
  if valid_613036 != nil:
    section.add "InstanceId", valid_613036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613037: Call_PostRecordLifecycleActionHeartbeat_613021;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613037.validator(path, query, header, formData, body)
  let scheme = call_613037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613037.url(scheme.get, call_613037.host, call_613037.base,
                         call_613037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613037, url, valid)

proc call*(call_613038: Call_PostRecordLifecycleActionHeartbeat_613021;
          AutoScalingGroupName: string; LifecycleHookName: string;
          LifecycleActionToken: string = ""; InstanceId: string = "";
          Action: string = "RecordLifecycleActionHeartbeat";
          Version: string = "2011-01-01"): Recallable =
  ## postRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613039 = newJObject()
  var formData_613040 = newJObject()
  add(formData_613040, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613040, "LifecycleHookName", newJString(LifecycleHookName))
  add(formData_613040, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(formData_613040, "InstanceId", newJString(InstanceId))
  add(query_613039, "Action", newJString(Action))
  add(query_613039, "Version", newJString(Version))
  result = call_613038.call(nil, query_613039, nil, formData_613040, nil)

var postRecordLifecycleActionHeartbeat* = Call_PostRecordLifecycleActionHeartbeat_613021(
    name: "postRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_PostRecordLifecycleActionHeartbeat_613022, base: "/",
    url: url_PostRecordLifecycleActionHeartbeat_613023,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRecordLifecycleActionHeartbeat_613002 = ref object of OpenApiRestCall_610658
proc url_GetRecordLifecycleActionHeartbeat_613004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRecordLifecycleActionHeartbeat_613003(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceId: JString
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: JString (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: JString (required)
  ##   LifecycleActionToken: JString
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613005 = query.getOrDefault("InstanceId")
  valid_613005 = validateParameter(valid_613005, JString, required = false,
                                 default = nil)
  if valid_613005 != nil:
    section.add "InstanceId", valid_613005
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613006 = query.getOrDefault("AutoScalingGroupName")
  valid_613006 = validateParameter(valid_613006, JString, required = true,
                                 default = nil)
  if valid_613006 != nil:
    section.add "AutoScalingGroupName", valid_613006
  var valid_613007 = query.getOrDefault("LifecycleHookName")
  valid_613007 = validateParameter(valid_613007, JString, required = true,
                                 default = nil)
  if valid_613007 != nil:
    section.add "LifecycleHookName", valid_613007
  var valid_613008 = query.getOrDefault("Action")
  valid_613008 = validateParameter(valid_613008, JString, required = true, default = newJString(
      "RecordLifecycleActionHeartbeat"))
  if valid_613008 != nil:
    section.add "Action", valid_613008
  var valid_613009 = query.getOrDefault("LifecycleActionToken")
  valid_613009 = validateParameter(valid_613009, JString, required = false,
                                 default = nil)
  if valid_613009 != nil:
    section.add "LifecycleActionToken", valid_613009
  var valid_613010 = query.getOrDefault("Version")
  valid_613010 = validateParameter(valid_613010, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613010 != nil:
    section.add "Version", valid_613010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613011 = header.getOrDefault("X-Amz-Signature")
  valid_613011 = validateParameter(valid_613011, JString, required = false,
                                 default = nil)
  if valid_613011 != nil:
    section.add "X-Amz-Signature", valid_613011
  var valid_613012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613012 = validateParameter(valid_613012, JString, required = false,
                                 default = nil)
  if valid_613012 != nil:
    section.add "X-Amz-Content-Sha256", valid_613012
  var valid_613013 = header.getOrDefault("X-Amz-Date")
  valid_613013 = validateParameter(valid_613013, JString, required = false,
                                 default = nil)
  if valid_613013 != nil:
    section.add "X-Amz-Date", valid_613013
  var valid_613014 = header.getOrDefault("X-Amz-Credential")
  valid_613014 = validateParameter(valid_613014, JString, required = false,
                                 default = nil)
  if valid_613014 != nil:
    section.add "X-Amz-Credential", valid_613014
  var valid_613015 = header.getOrDefault("X-Amz-Security-Token")
  valid_613015 = validateParameter(valid_613015, JString, required = false,
                                 default = nil)
  if valid_613015 != nil:
    section.add "X-Amz-Security-Token", valid_613015
  var valid_613016 = header.getOrDefault("X-Amz-Algorithm")
  valid_613016 = validateParameter(valid_613016, JString, required = false,
                                 default = nil)
  if valid_613016 != nil:
    section.add "X-Amz-Algorithm", valid_613016
  var valid_613017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613017 = validateParameter(valid_613017, JString, required = false,
                                 default = nil)
  if valid_613017 != nil:
    section.add "X-Amz-SignedHeaders", valid_613017
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613018: Call_GetRecordLifecycleActionHeartbeat_613002;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613018.validator(path, query, header, formData, body)
  let scheme = call_613018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613018.url(scheme.get, call_613018.host, call_613018.base,
                         call_613018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613018, url, valid)

proc call*(call_613019: Call_GetRecordLifecycleActionHeartbeat_613002;
          AutoScalingGroupName: string; LifecycleHookName: string;
          InstanceId: string = "";
          Action: string = "RecordLifecycleActionHeartbeat";
          LifecycleActionToken: string = ""; Version: string = "2011-01-01"): Recallable =
  ## getRecordLifecycleActionHeartbeat
  ## <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using <a>PutLifecycleHook</a>.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a Lambda function and a rule that allows CloudWatch Events to invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a pending state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, complete the lifecycle action.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceId: string
  ##             : The ID of the instance.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   LifecycleHookName: string (required)
  ##                    : The name of the lifecycle hook.
  ##   Action: string (required)
  ##   LifecycleActionToken: string
  ##                       : A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
  ##   Version: string (required)
  var query_613020 = newJObject()
  add(query_613020, "InstanceId", newJString(InstanceId))
  add(query_613020, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613020, "LifecycleHookName", newJString(LifecycleHookName))
  add(query_613020, "Action", newJString(Action))
  add(query_613020, "LifecycleActionToken", newJString(LifecycleActionToken))
  add(query_613020, "Version", newJString(Version))
  result = call_613019.call(nil, query_613020, nil, nil, nil)

var getRecordLifecycleActionHeartbeat* = Call_GetRecordLifecycleActionHeartbeat_613002(
    name: "getRecordLifecycleActionHeartbeat", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=RecordLifecycleActionHeartbeat",
    validator: validate_GetRecordLifecycleActionHeartbeat_613003, base: "/",
    url: url_GetRecordLifecycleActionHeartbeat_613004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResumeProcesses_613058 = ref object of OpenApiRestCall_610658
proc url_PostResumeProcesses_613060(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResumeProcesses_613059(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613061 = query.getOrDefault("Action")
  valid_613061 = validateParameter(valid_613061, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_613061 != nil:
    section.add "Action", valid_613061
  var valid_613062 = query.getOrDefault("Version")
  valid_613062 = validateParameter(valid_613062, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613062 != nil:
    section.add "Version", valid_613062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613063 = header.getOrDefault("X-Amz-Signature")
  valid_613063 = validateParameter(valid_613063, JString, required = false,
                                 default = nil)
  if valid_613063 != nil:
    section.add "X-Amz-Signature", valid_613063
  var valid_613064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613064 = validateParameter(valid_613064, JString, required = false,
                                 default = nil)
  if valid_613064 != nil:
    section.add "X-Amz-Content-Sha256", valid_613064
  var valid_613065 = header.getOrDefault("X-Amz-Date")
  valid_613065 = validateParameter(valid_613065, JString, required = false,
                                 default = nil)
  if valid_613065 != nil:
    section.add "X-Amz-Date", valid_613065
  var valid_613066 = header.getOrDefault("X-Amz-Credential")
  valid_613066 = validateParameter(valid_613066, JString, required = false,
                                 default = nil)
  if valid_613066 != nil:
    section.add "X-Amz-Credential", valid_613066
  var valid_613067 = header.getOrDefault("X-Amz-Security-Token")
  valid_613067 = validateParameter(valid_613067, JString, required = false,
                                 default = nil)
  if valid_613067 != nil:
    section.add "X-Amz-Security-Token", valid_613067
  var valid_613068 = header.getOrDefault("X-Amz-Algorithm")
  valid_613068 = validateParameter(valid_613068, JString, required = false,
                                 default = nil)
  if valid_613068 != nil:
    section.add "X-Amz-Algorithm", valid_613068
  var valid_613069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613069 = validateParameter(valid_613069, JString, required = false,
                                 default = nil)
  if valid_613069 != nil:
    section.add "X-Amz-SignedHeaders", valid_613069
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613070 = formData.getOrDefault("AutoScalingGroupName")
  valid_613070 = validateParameter(valid_613070, JString, required = true,
                                 default = nil)
  if valid_613070 != nil:
    section.add "AutoScalingGroupName", valid_613070
  var valid_613071 = formData.getOrDefault("ScalingProcesses")
  valid_613071 = validateParameter(valid_613071, JArray, required = false,
                                 default = nil)
  if valid_613071 != nil:
    section.add "ScalingProcesses", valid_613071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613072: Call_PostResumeProcesses_613058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613072.validator(path, query, header, formData, body)
  let scheme = call_613072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613072.url(scheme.get, call_613072.host, call_613072.base,
                         call_613072.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613072, url, valid)

proc call*(call_613073: Call_PostResumeProcesses_613058;
          AutoScalingGroupName: string; Action: string = "ResumeProcesses";
          ScalingProcesses: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## postResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_613074 = newJObject()
  var formData_613075 = newJObject()
  add(formData_613075, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613074, "Action", newJString(Action))
  if ScalingProcesses != nil:
    formData_613075.add "ScalingProcesses", ScalingProcesses
  add(query_613074, "Version", newJString(Version))
  result = call_613073.call(nil, query_613074, nil, formData_613075, nil)

var postResumeProcesses* = Call_PostResumeProcesses_613058(
    name: "postResumeProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_PostResumeProcesses_613059, base: "/",
    url: url_PostResumeProcesses_613060, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResumeProcesses_613041 = ref object of OpenApiRestCall_610658
proc url_GetResumeProcesses_613043(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResumeProcesses_613042(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613044 = query.getOrDefault("ScalingProcesses")
  valid_613044 = validateParameter(valid_613044, JArray, required = false,
                                 default = nil)
  if valid_613044 != nil:
    section.add "ScalingProcesses", valid_613044
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613045 = query.getOrDefault("AutoScalingGroupName")
  valid_613045 = validateParameter(valid_613045, JString, required = true,
                                 default = nil)
  if valid_613045 != nil:
    section.add "AutoScalingGroupName", valid_613045
  var valid_613046 = query.getOrDefault("Action")
  valid_613046 = validateParameter(valid_613046, JString, required = true,
                                 default = newJString("ResumeProcesses"))
  if valid_613046 != nil:
    section.add "Action", valid_613046
  var valid_613047 = query.getOrDefault("Version")
  valid_613047 = validateParameter(valid_613047, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613047 != nil:
    section.add "Version", valid_613047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613048 = header.getOrDefault("X-Amz-Signature")
  valid_613048 = validateParameter(valid_613048, JString, required = false,
                                 default = nil)
  if valid_613048 != nil:
    section.add "X-Amz-Signature", valid_613048
  var valid_613049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613049 = validateParameter(valid_613049, JString, required = false,
                                 default = nil)
  if valid_613049 != nil:
    section.add "X-Amz-Content-Sha256", valid_613049
  var valid_613050 = header.getOrDefault("X-Amz-Date")
  valid_613050 = validateParameter(valid_613050, JString, required = false,
                                 default = nil)
  if valid_613050 != nil:
    section.add "X-Amz-Date", valid_613050
  var valid_613051 = header.getOrDefault("X-Amz-Credential")
  valid_613051 = validateParameter(valid_613051, JString, required = false,
                                 default = nil)
  if valid_613051 != nil:
    section.add "X-Amz-Credential", valid_613051
  var valid_613052 = header.getOrDefault("X-Amz-Security-Token")
  valid_613052 = validateParameter(valid_613052, JString, required = false,
                                 default = nil)
  if valid_613052 != nil:
    section.add "X-Amz-Security-Token", valid_613052
  var valid_613053 = header.getOrDefault("X-Amz-Algorithm")
  valid_613053 = validateParameter(valid_613053, JString, required = false,
                                 default = nil)
  if valid_613053 != nil:
    section.add "X-Amz-Algorithm", valid_613053
  var valid_613054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613054 = validateParameter(valid_613054, JString, required = false,
                                 default = nil)
  if valid_613054 != nil:
    section.add "X-Amz-SignedHeaders", valid_613054
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613055: Call_GetResumeProcesses_613041; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613055.validator(path, query, header, formData, body)
  let scheme = call_613055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613055.url(scheme.get, call_613055.host, call_613055.base,
                         call_613055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613055, url, valid)

proc call*(call_613056: Call_GetResumeProcesses_613041;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "ResumeProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getResumeProcesses
  ## <p>Resumes the specified suspended automatic scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613057 = newJObject()
  if ScalingProcesses != nil:
    query_613057.add "ScalingProcesses", ScalingProcesses
  add(query_613057, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613057, "Action", newJString(Action))
  add(query_613057, "Version", newJString(Version))
  result = call_613056.call(nil, query_613057, nil, nil, nil)

var getResumeProcesses* = Call_GetResumeProcesses_613041(
    name: "getResumeProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=ResumeProcesses",
    validator: validate_GetResumeProcesses_613042, base: "/",
    url: url_GetResumeProcesses_613043, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDesiredCapacity_613094 = ref object of OpenApiRestCall_610658
proc url_PostSetDesiredCapacity_613096(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDesiredCapacity_613095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613097 = query.getOrDefault("Action")
  valid_613097 = validateParameter(valid_613097, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_613097 != nil:
    section.add "Action", valid_613097
  var valid_613098 = query.getOrDefault("Version")
  valid_613098 = validateParameter(valid_613098, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613098 != nil:
    section.add "Version", valid_613098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613099 = header.getOrDefault("X-Amz-Signature")
  valid_613099 = validateParameter(valid_613099, JString, required = false,
                                 default = nil)
  if valid_613099 != nil:
    section.add "X-Amz-Signature", valid_613099
  var valid_613100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613100 = validateParameter(valid_613100, JString, required = false,
                                 default = nil)
  if valid_613100 != nil:
    section.add "X-Amz-Content-Sha256", valid_613100
  var valid_613101 = header.getOrDefault("X-Amz-Date")
  valid_613101 = validateParameter(valid_613101, JString, required = false,
                                 default = nil)
  if valid_613101 != nil:
    section.add "X-Amz-Date", valid_613101
  var valid_613102 = header.getOrDefault("X-Amz-Credential")
  valid_613102 = validateParameter(valid_613102, JString, required = false,
                                 default = nil)
  if valid_613102 != nil:
    section.add "X-Amz-Credential", valid_613102
  var valid_613103 = header.getOrDefault("X-Amz-Security-Token")
  valid_613103 = validateParameter(valid_613103, JString, required = false,
                                 default = nil)
  if valid_613103 != nil:
    section.add "X-Amz-Security-Token", valid_613103
  var valid_613104 = header.getOrDefault("X-Amz-Algorithm")
  valid_613104 = validateParameter(valid_613104, JString, required = false,
                                 default = nil)
  if valid_613104 != nil:
    section.add "X-Amz-Algorithm", valid_613104
  var valid_613105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613105 = validateParameter(valid_613105, JString, required = false,
                                 default = nil)
  if valid_613105 != nil:
    section.add "X-Amz-SignedHeaders", valid_613105
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613106 = formData.getOrDefault("AutoScalingGroupName")
  valid_613106 = validateParameter(valid_613106, JString, required = true,
                                 default = nil)
  if valid_613106 != nil:
    section.add "AutoScalingGroupName", valid_613106
  var valid_613107 = formData.getOrDefault("DesiredCapacity")
  valid_613107 = validateParameter(valid_613107, JInt, required = true, default = nil)
  if valid_613107 != nil:
    section.add "DesiredCapacity", valid_613107
  var valid_613108 = formData.getOrDefault("HonorCooldown")
  valid_613108 = validateParameter(valid_613108, JBool, required = false, default = nil)
  if valid_613108 != nil:
    section.add "HonorCooldown", valid_613108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613109: Call_PostSetDesiredCapacity_613094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613109.validator(path, query, header, formData, body)
  let scheme = call_613109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613109.url(scheme.get, call_613109.host, call_613109.base,
                         call_613109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613109, url, valid)

proc call*(call_613110: Call_PostSetDesiredCapacity_613094;
          AutoScalingGroupName: string; DesiredCapacity: int;
          HonorCooldown: bool = false; Action: string = "SetDesiredCapacity";
          Version: string = "2011-01-01"): Recallable =
  ## postSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613111 = newJObject()
  var formData_613112 = newJObject()
  add(formData_613112, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613112, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_613112, "HonorCooldown", newJBool(HonorCooldown))
  add(query_613111, "Action", newJString(Action))
  add(query_613111, "Version", newJString(Version))
  result = call_613110.call(nil, query_613111, nil, formData_613112, nil)

var postSetDesiredCapacity* = Call_PostSetDesiredCapacity_613094(
    name: "postSetDesiredCapacity", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_PostSetDesiredCapacity_613095, base: "/",
    url: url_PostSetDesiredCapacity_613096, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDesiredCapacity_613076 = ref object of OpenApiRestCall_610658
proc url_GetSetDesiredCapacity_613078(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDesiredCapacity_613077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DesiredCapacity: JInt (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   HonorCooldown: JBool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DesiredCapacity` field"
  var valid_613079 = query.getOrDefault("DesiredCapacity")
  valid_613079 = validateParameter(valid_613079, JInt, required = true, default = nil)
  if valid_613079 != nil:
    section.add "DesiredCapacity", valid_613079
  var valid_613080 = query.getOrDefault("AutoScalingGroupName")
  valid_613080 = validateParameter(valid_613080, JString, required = true,
                                 default = nil)
  if valid_613080 != nil:
    section.add "AutoScalingGroupName", valid_613080
  var valid_613081 = query.getOrDefault("Action")
  valid_613081 = validateParameter(valid_613081, JString, required = true,
                                 default = newJString("SetDesiredCapacity"))
  if valid_613081 != nil:
    section.add "Action", valid_613081
  var valid_613082 = query.getOrDefault("HonorCooldown")
  valid_613082 = validateParameter(valid_613082, JBool, required = false, default = nil)
  if valid_613082 != nil:
    section.add "HonorCooldown", valid_613082
  var valid_613083 = query.getOrDefault("Version")
  valid_613083 = validateParameter(valid_613083, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613083 != nil:
    section.add "Version", valid_613083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613084 = header.getOrDefault("X-Amz-Signature")
  valid_613084 = validateParameter(valid_613084, JString, required = false,
                                 default = nil)
  if valid_613084 != nil:
    section.add "X-Amz-Signature", valid_613084
  var valid_613085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613085 = validateParameter(valid_613085, JString, required = false,
                                 default = nil)
  if valid_613085 != nil:
    section.add "X-Amz-Content-Sha256", valid_613085
  var valid_613086 = header.getOrDefault("X-Amz-Date")
  valid_613086 = validateParameter(valid_613086, JString, required = false,
                                 default = nil)
  if valid_613086 != nil:
    section.add "X-Amz-Date", valid_613086
  var valid_613087 = header.getOrDefault("X-Amz-Credential")
  valid_613087 = validateParameter(valid_613087, JString, required = false,
                                 default = nil)
  if valid_613087 != nil:
    section.add "X-Amz-Credential", valid_613087
  var valid_613088 = header.getOrDefault("X-Amz-Security-Token")
  valid_613088 = validateParameter(valid_613088, JString, required = false,
                                 default = nil)
  if valid_613088 != nil:
    section.add "X-Amz-Security-Token", valid_613088
  var valid_613089 = header.getOrDefault("X-Amz-Algorithm")
  valid_613089 = validateParameter(valid_613089, JString, required = false,
                                 default = nil)
  if valid_613089 != nil:
    section.add "X-Amz-Algorithm", valid_613089
  var valid_613090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613090 = validateParameter(valid_613090, JString, required = false,
                                 default = nil)
  if valid_613090 != nil:
    section.add "X-Amz-SignedHeaders", valid_613090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613091: Call_GetSetDesiredCapacity_613076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613091.validator(path, query, header, formData, body)
  let scheme = call_613091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613091.url(scheme.get, call_613091.host, call_613091.base,
                         call_613091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613091, url, valid)

proc call*(call_613092: Call_GetSetDesiredCapacity_613076; DesiredCapacity: int;
          AutoScalingGroupName: string; Action: string = "SetDesiredCapacity";
          HonorCooldown: bool = false; Version: string = "2011-01-01"): Recallable =
  ## getSetDesiredCapacity
  ## <p>Sets the size of the specified Auto Scaling group.</p> <p>For more information about desired capacity, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html">What Is Amazon EC2 Auto Scaling?</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int (required)
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   HonorCooldown: bool
  ##                : Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
  ##   Version: string (required)
  var query_613093 = newJObject()
  add(query_613093, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_613093, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613093, "Action", newJString(Action))
  add(query_613093, "HonorCooldown", newJBool(HonorCooldown))
  add(query_613093, "Version", newJString(Version))
  result = call_613092.call(nil, query_613093, nil, nil, nil)

var getSetDesiredCapacity* = Call_GetSetDesiredCapacity_613076(
    name: "getSetDesiredCapacity", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetDesiredCapacity",
    validator: validate_GetSetDesiredCapacity_613077, base: "/",
    url: url_GetSetDesiredCapacity_613078, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceHealth_613131 = ref object of OpenApiRestCall_610658
proc url_PostSetInstanceHealth_613133(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceHealth_613132(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613134 = query.getOrDefault("Action")
  valid_613134 = validateParameter(valid_613134, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_613134 != nil:
    section.add "Action", valid_613134
  var valid_613135 = query.getOrDefault("Version")
  valid_613135 = validateParameter(valid_613135, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613135 != nil:
    section.add "Version", valid_613135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613136 = header.getOrDefault("X-Amz-Signature")
  valid_613136 = validateParameter(valid_613136, JString, required = false,
                                 default = nil)
  if valid_613136 != nil:
    section.add "X-Amz-Signature", valid_613136
  var valid_613137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613137 = validateParameter(valid_613137, JString, required = false,
                                 default = nil)
  if valid_613137 != nil:
    section.add "X-Amz-Content-Sha256", valid_613137
  var valid_613138 = header.getOrDefault("X-Amz-Date")
  valid_613138 = validateParameter(valid_613138, JString, required = false,
                                 default = nil)
  if valid_613138 != nil:
    section.add "X-Amz-Date", valid_613138
  var valid_613139 = header.getOrDefault("X-Amz-Credential")
  valid_613139 = validateParameter(valid_613139, JString, required = false,
                                 default = nil)
  if valid_613139 != nil:
    section.add "X-Amz-Credential", valid_613139
  var valid_613140 = header.getOrDefault("X-Amz-Security-Token")
  valid_613140 = validateParameter(valid_613140, JString, required = false,
                                 default = nil)
  if valid_613140 != nil:
    section.add "X-Amz-Security-Token", valid_613140
  var valid_613141 = header.getOrDefault("X-Amz-Algorithm")
  valid_613141 = validateParameter(valid_613141, JString, required = false,
                                 default = nil)
  if valid_613141 != nil:
    section.add "X-Amz-Algorithm", valid_613141
  var valid_613142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613142 = validateParameter(valid_613142, JString, required = false,
                                 default = nil)
  if valid_613142 != nil:
    section.add "X-Amz-SignedHeaders", valid_613142
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  var valid_613143 = formData.getOrDefault("ShouldRespectGracePeriod")
  valid_613143 = validateParameter(valid_613143, JBool, required = false, default = nil)
  if valid_613143 != nil:
    section.add "ShouldRespectGracePeriod", valid_613143
  assert formData != nil,
        "formData argument is necessary due to required `HealthStatus` field"
  var valid_613144 = formData.getOrDefault("HealthStatus")
  valid_613144 = validateParameter(valid_613144, JString, required = true,
                                 default = nil)
  if valid_613144 != nil:
    section.add "HealthStatus", valid_613144
  var valid_613145 = formData.getOrDefault("InstanceId")
  valid_613145 = validateParameter(valid_613145, JString, required = true,
                                 default = nil)
  if valid_613145 != nil:
    section.add "InstanceId", valid_613145
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613146: Call_PostSetInstanceHealth_613131; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613146.validator(path, query, header, formData, body)
  let scheme = call_613146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613146.url(scheme.get, call_613146.host, call_613146.base,
                         call_613146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613146, url, valid)

proc call*(call_613147: Call_PostSetInstanceHealth_613131; HealthStatus: string;
          InstanceId: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613148 = newJObject()
  var formData_613149 = newJObject()
  add(formData_613149, "ShouldRespectGracePeriod",
      newJBool(ShouldRespectGracePeriod))
  add(formData_613149, "HealthStatus", newJString(HealthStatus))
  add(formData_613149, "InstanceId", newJString(InstanceId))
  add(query_613148, "Action", newJString(Action))
  add(query_613148, "Version", newJString(Version))
  result = call_613147.call(nil, query_613148, nil, formData_613149, nil)

var postSetInstanceHealth* = Call_PostSetInstanceHealth_613131(
    name: "postSetInstanceHealth", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_PostSetInstanceHealth_613132, base: "/",
    url: url_PostSetInstanceHealth_613133, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceHealth_613113 = ref object of OpenApiRestCall_610658
proc url_GetSetInstanceHealth_613115(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceHealth_613114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ShouldRespectGracePeriod: JBool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   HealthStatus: JString (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613116 = query.getOrDefault("ShouldRespectGracePeriod")
  valid_613116 = validateParameter(valid_613116, JBool, required = false, default = nil)
  if valid_613116 != nil:
    section.add "ShouldRespectGracePeriod", valid_613116
  assert query != nil,
        "query argument is necessary due to required `InstanceId` field"
  var valid_613117 = query.getOrDefault("InstanceId")
  valid_613117 = validateParameter(valid_613117, JString, required = true,
                                 default = nil)
  if valid_613117 != nil:
    section.add "InstanceId", valid_613117
  var valid_613118 = query.getOrDefault("HealthStatus")
  valid_613118 = validateParameter(valid_613118, JString, required = true,
                                 default = nil)
  if valid_613118 != nil:
    section.add "HealthStatus", valid_613118
  var valid_613119 = query.getOrDefault("Action")
  valid_613119 = validateParameter(valid_613119, JString, required = true,
                                 default = newJString("SetInstanceHealth"))
  if valid_613119 != nil:
    section.add "Action", valid_613119
  var valid_613120 = query.getOrDefault("Version")
  valid_613120 = validateParameter(valid_613120, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613120 != nil:
    section.add "Version", valid_613120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613121 = header.getOrDefault("X-Amz-Signature")
  valid_613121 = validateParameter(valid_613121, JString, required = false,
                                 default = nil)
  if valid_613121 != nil:
    section.add "X-Amz-Signature", valid_613121
  var valid_613122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613122 = validateParameter(valid_613122, JString, required = false,
                                 default = nil)
  if valid_613122 != nil:
    section.add "X-Amz-Content-Sha256", valid_613122
  var valid_613123 = header.getOrDefault("X-Amz-Date")
  valid_613123 = validateParameter(valid_613123, JString, required = false,
                                 default = nil)
  if valid_613123 != nil:
    section.add "X-Amz-Date", valid_613123
  var valid_613124 = header.getOrDefault("X-Amz-Credential")
  valid_613124 = validateParameter(valid_613124, JString, required = false,
                                 default = nil)
  if valid_613124 != nil:
    section.add "X-Amz-Credential", valid_613124
  var valid_613125 = header.getOrDefault("X-Amz-Security-Token")
  valid_613125 = validateParameter(valid_613125, JString, required = false,
                                 default = nil)
  if valid_613125 != nil:
    section.add "X-Amz-Security-Token", valid_613125
  var valid_613126 = header.getOrDefault("X-Amz-Algorithm")
  valid_613126 = validateParameter(valid_613126, JString, required = false,
                                 default = nil)
  if valid_613126 != nil:
    section.add "X-Amz-Algorithm", valid_613126
  var valid_613127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613127 = validateParameter(valid_613127, JString, required = false,
                                 default = nil)
  if valid_613127 != nil:
    section.add "X-Amz-SignedHeaders", valid_613127
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613128: Call_GetSetInstanceHealth_613113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613128.validator(path, query, header, formData, body)
  let scheme = call_613128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613128.url(scheme.get, call_613128.host, call_613128.base,
                         call_613128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613128, url, valid)

proc call*(call_613129: Call_GetSetInstanceHealth_613113; InstanceId: string;
          HealthStatus: string; ShouldRespectGracePeriod: bool = false;
          Action: string = "SetInstanceHealth"; Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceHealth
  ## <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health Checks for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ShouldRespectGracePeriod: bool
  ##                           : <p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a>CreateAutoScalingGroup</a>.</p>
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   HealthStatus: string (required)
  ##               : The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613130 = newJObject()
  add(query_613130, "ShouldRespectGracePeriod", newJBool(ShouldRespectGracePeriod))
  add(query_613130, "InstanceId", newJString(InstanceId))
  add(query_613130, "HealthStatus", newJString(HealthStatus))
  add(query_613130, "Action", newJString(Action))
  add(query_613130, "Version", newJString(Version))
  result = call_613129.call(nil, query_613130, nil, nil, nil)

var getSetInstanceHealth* = Call_GetSetInstanceHealth_613113(
    name: "getSetInstanceHealth", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceHealth",
    validator: validate_GetSetInstanceHealth_613114, base: "/",
    url: url_GetSetInstanceHealth_613115, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetInstanceProtection_613168 = ref object of OpenApiRestCall_610658
proc url_PostSetInstanceProtection_613170(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetInstanceProtection_613169(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613171 = query.getOrDefault("Action")
  valid_613171 = validateParameter(valid_613171, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_613171 != nil:
    section.add "Action", valid_613171
  var valid_613172 = query.getOrDefault("Version")
  valid_613172 = validateParameter(valid_613172, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613172 != nil:
    section.add "Version", valid_613172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613173 = header.getOrDefault("X-Amz-Signature")
  valid_613173 = validateParameter(valid_613173, JString, required = false,
                                 default = nil)
  if valid_613173 != nil:
    section.add "X-Amz-Signature", valid_613173
  var valid_613174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613174 = validateParameter(valid_613174, JString, required = false,
                                 default = nil)
  if valid_613174 != nil:
    section.add "X-Amz-Content-Sha256", valid_613174
  var valid_613175 = header.getOrDefault("X-Amz-Date")
  valid_613175 = validateParameter(valid_613175, JString, required = false,
                                 default = nil)
  if valid_613175 != nil:
    section.add "X-Amz-Date", valid_613175
  var valid_613176 = header.getOrDefault("X-Amz-Credential")
  valid_613176 = validateParameter(valid_613176, JString, required = false,
                                 default = nil)
  if valid_613176 != nil:
    section.add "X-Amz-Credential", valid_613176
  var valid_613177 = header.getOrDefault("X-Amz-Security-Token")
  valid_613177 = validateParameter(valid_613177, JString, required = false,
                                 default = nil)
  if valid_613177 != nil:
    section.add "X-Amz-Security-Token", valid_613177
  var valid_613178 = header.getOrDefault("X-Amz-Algorithm")
  valid_613178 = validateParameter(valid_613178, JString, required = false,
                                 default = nil)
  if valid_613178 != nil:
    section.add "X-Amz-Algorithm", valid_613178
  var valid_613179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613179 = validateParameter(valid_613179, JString, required = false,
                                 default = nil)
  if valid_613179 != nil:
    section.add "X-Amz-SignedHeaders", valid_613179
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613180 = formData.getOrDefault("AutoScalingGroupName")
  valid_613180 = validateParameter(valid_613180, JString, required = true,
                                 default = nil)
  if valid_613180 != nil:
    section.add "AutoScalingGroupName", valid_613180
  var valid_613181 = formData.getOrDefault("ProtectedFromScaleIn")
  valid_613181 = validateParameter(valid_613181, JBool, required = true, default = nil)
  if valid_613181 != nil:
    section.add "ProtectedFromScaleIn", valid_613181
  var valid_613182 = formData.getOrDefault("InstanceIds")
  valid_613182 = validateParameter(valid_613182, JArray, required = true, default = nil)
  if valid_613182 != nil:
    section.add "InstanceIds", valid_613182
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613183: Call_PostSetInstanceProtection_613168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613183.validator(path, query, header, formData, body)
  let scheme = call_613183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613183.url(scheme.get, call_613183.host, call_613183.base,
                         call_613183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613183, url, valid)

proc call*(call_613184: Call_PostSetInstanceProtection_613168;
          AutoScalingGroupName: string; ProtectedFromScaleIn: bool;
          InstanceIds: JsonNode; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## postSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613185 = newJObject()
  var formData_613186 = newJObject()
  add(formData_613186, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613186, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  if InstanceIds != nil:
    formData_613186.add "InstanceIds", InstanceIds
  add(query_613185, "Action", newJString(Action))
  add(query_613185, "Version", newJString(Version))
  result = call_613184.call(nil, query_613185, nil, formData_613186, nil)

var postSetInstanceProtection* = Call_PostSetInstanceProtection_613168(
    name: "postSetInstanceProtection", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_PostSetInstanceProtection_613169, base: "/",
    url: url_PostSetInstanceProtection_613170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetInstanceProtection_613150 = ref object of OpenApiRestCall_610658
proc url_GetSetInstanceProtection_613152(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetInstanceProtection_613151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   ProtectedFromScaleIn: JBool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `InstanceIds` field"
  var valid_613153 = query.getOrDefault("InstanceIds")
  valid_613153 = validateParameter(valid_613153, JArray, required = true, default = nil)
  if valid_613153 != nil:
    section.add "InstanceIds", valid_613153
  var valid_613154 = query.getOrDefault("AutoScalingGroupName")
  valid_613154 = validateParameter(valid_613154, JString, required = true,
                                 default = nil)
  if valid_613154 != nil:
    section.add "AutoScalingGroupName", valid_613154
  var valid_613155 = query.getOrDefault("Action")
  valid_613155 = validateParameter(valid_613155, JString, required = true,
                                 default = newJString("SetInstanceProtection"))
  if valid_613155 != nil:
    section.add "Action", valid_613155
  var valid_613156 = query.getOrDefault("ProtectedFromScaleIn")
  valid_613156 = validateParameter(valid_613156, JBool, required = true, default = nil)
  if valid_613156 != nil:
    section.add "ProtectedFromScaleIn", valid_613156
  var valid_613157 = query.getOrDefault("Version")
  valid_613157 = validateParameter(valid_613157, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613157 != nil:
    section.add "Version", valid_613157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613158 = header.getOrDefault("X-Amz-Signature")
  valid_613158 = validateParameter(valid_613158, JString, required = false,
                                 default = nil)
  if valid_613158 != nil:
    section.add "X-Amz-Signature", valid_613158
  var valid_613159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613159 = validateParameter(valid_613159, JString, required = false,
                                 default = nil)
  if valid_613159 != nil:
    section.add "X-Amz-Content-Sha256", valid_613159
  var valid_613160 = header.getOrDefault("X-Amz-Date")
  valid_613160 = validateParameter(valid_613160, JString, required = false,
                                 default = nil)
  if valid_613160 != nil:
    section.add "X-Amz-Date", valid_613160
  var valid_613161 = header.getOrDefault("X-Amz-Credential")
  valid_613161 = validateParameter(valid_613161, JString, required = false,
                                 default = nil)
  if valid_613161 != nil:
    section.add "X-Amz-Credential", valid_613161
  var valid_613162 = header.getOrDefault("X-Amz-Security-Token")
  valid_613162 = validateParameter(valid_613162, JString, required = false,
                                 default = nil)
  if valid_613162 != nil:
    section.add "X-Amz-Security-Token", valid_613162
  var valid_613163 = header.getOrDefault("X-Amz-Algorithm")
  valid_613163 = validateParameter(valid_613163, JString, required = false,
                                 default = nil)
  if valid_613163 != nil:
    section.add "X-Amz-Algorithm", valid_613163
  var valid_613164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613164 = validateParameter(valid_613164, JString, required = false,
                                 default = nil)
  if valid_613164 != nil:
    section.add "X-Amz-SignedHeaders", valid_613164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613165: Call_GetSetInstanceProtection_613150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613165.validator(path, query, header, formData, body)
  let scheme = call_613165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613165.url(scheme.get, call_613165.host, call_613165.base,
                         call_613165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613165, url, valid)

proc call*(call_613166: Call_GetSetInstanceProtection_613150;
          InstanceIds: JsonNode; AutoScalingGroupName: string;
          ProtectedFromScaleIn: bool; Action: string = "SetInstanceProtection";
          Version: string = "2011-01-01"): Recallable =
  ## getSetInstanceProtection
  ## <p>Updates the instance protection settings of the specified instances.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   InstanceIds: JArray (required)
  ##              : One or more instance IDs.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ProtectedFromScaleIn: bool (required)
  ##                       : Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
  ##   Version: string (required)
  var query_613167 = newJObject()
  if InstanceIds != nil:
    query_613167.add "InstanceIds", InstanceIds
  add(query_613167, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613167, "Action", newJString(Action))
  add(query_613167, "ProtectedFromScaleIn", newJBool(ProtectedFromScaleIn))
  add(query_613167, "Version", newJString(Version))
  result = call_613166.call(nil, query_613167, nil, nil, nil)

var getSetInstanceProtection* = Call_GetSetInstanceProtection_613150(
    name: "getSetInstanceProtection", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SetInstanceProtection",
    validator: validate_GetSetInstanceProtection_613151, base: "/",
    url: url_GetSetInstanceProtection_613152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSuspendProcesses_613204 = ref object of OpenApiRestCall_610658
proc url_PostSuspendProcesses_613206(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSuspendProcesses_613205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613207 = query.getOrDefault("Action")
  valid_613207 = validateParameter(valid_613207, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_613207 != nil:
    section.add "Action", valid_613207
  var valid_613208 = query.getOrDefault("Version")
  valid_613208 = validateParameter(valid_613208, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613208 != nil:
    section.add "Version", valid_613208
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613209 = header.getOrDefault("X-Amz-Signature")
  valid_613209 = validateParameter(valid_613209, JString, required = false,
                                 default = nil)
  if valid_613209 != nil:
    section.add "X-Amz-Signature", valid_613209
  var valid_613210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613210 = validateParameter(valid_613210, JString, required = false,
                                 default = nil)
  if valid_613210 != nil:
    section.add "X-Amz-Content-Sha256", valid_613210
  var valid_613211 = header.getOrDefault("X-Amz-Date")
  valid_613211 = validateParameter(valid_613211, JString, required = false,
                                 default = nil)
  if valid_613211 != nil:
    section.add "X-Amz-Date", valid_613211
  var valid_613212 = header.getOrDefault("X-Amz-Credential")
  valid_613212 = validateParameter(valid_613212, JString, required = false,
                                 default = nil)
  if valid_613212 != nil:
    section.add "X-Amz-Credential", valid_613212
  var valid_613213 = header.getOrDefault("X-Amz-Security-Token")
  valid_613213 = validateParameter(valid_613213, JString, required = false,
                                 default = nil)
  if valid_613213 != nil:
    section.add "X-Amz-Security-Token", valid_613213
  var valid_613214 = header.getOrDefault("X-Amz-Algorithm")
  valid_613214 = validateParameter(valid_613214, JString, required = false,
                                 default = nil)
  if valid_613214 != nil:
    section.add "X-Amz-Algorithm", valid_613214
  var valid_613215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613215 = validateParameter(valid_613215, JString, required = false,
                                 default = nil)
  if valid_613215 != nil:
    section.add "X-Amz-SignedHeaders", valid_613215
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613216 = formData.getOrDefault("AutoScalingGroupName")
  valid_613216 = validateParameter(valid_613216, JString, required = true,
                                 default = nil)
  if valid_613216 != nil:
    section.add "AutoScalingGroupName", valid_613216
  var valid_613217 = formData.getOrDefault("ScalingProcesses")
  valid_613217 = validateParameter(valid_613217, JArray, required = false,
                                 default = nil)
  if valid_613217 != nil:
    section.add "ScalingProcesses", valid_613217
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613218: Call_PostSuspendProcesses_613204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613218.validator(path, query, header, formData, body)
  let scheme = call_613218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613218.url(scheme.get, call_613218.host, call_613218.base,
                         call_613218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613218, url, valid)

proc call*(call_613219: Call_PostSuspendProcesses_613204;
          AutoScalingGroupName: string; Action: string = "SuspendProcesses";
          ScalingProcesses: JsonNode = nil; Version: string = "2011-01-01"): Recallable =
  ## postSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   Version: string (required)
  var query_613220 = newJObject()
  var formData_613221 = newJObject()
  add(formData_613221, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613220, "Action", newJString(Action))
  if ScalingProcesses != nil:
    formData_613221.add "ScalingProcesses", ScalingProcesses
  add(query_613220, "Version", newJString(Version))
  result = call_613219.call(nil, query_613220, nil, formData_613221, nil)

var postSuspendProcesses* = Call_PostSuspendProcesses_613204(
    name: "postSuspendProcesses", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_PostSuspendProcesses_613205, base: "/",
    url: url_PostSuspendProcesses_613206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSuspendProcesses_613187 = ref object of OpenApiRestCall_610658
proc url_GetSuspendProcesses_613189(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSuspendProcesses_613188(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613190 = query.getOrDefault("ScalingProcesses")
  valid_613190 = validateParameter(valid_613190, JArray, required = false,
                                 default = nil)
  if valid_613190 != nil:
    section.add "ScalingProcesses", valid_613190
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613191 = query.getOrDefault("AutoScalingGroupName")
  valid_613191 = validateParameter(valid_613191, JString, required = true,
                                 default = nil)
  if valid_613191 != nil:
    section.add "AutoScalingGroupName", valid_613191
  var valid_613192 = query.getOrDefault("Action")
  valid_613192 = validateParameter(valid_613192, JString, required = true,
                                 default = newJString("SuspendProcesses"))
  if valid_613192 != nil:
    section.add "Action", valid_613192
  var valid_613193 = query.getOrDefault("Version")
  valid_613193 = validateParameter(valid_613193, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613193 != nil:
    section.add "Version", valid_613193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613194 = header.getOrDefault("X-Amz-Signature")
  valid_613194 = validateParameter(valid_613194, JString, required = false,
                                 default = nil)
  if valid_613194 != nil:
    section.add "X-Amz-Signature", valid_613194
  var valid_613195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613195 = validateParameter(valid_613195, JString, required = false,
                                 default = nil)
  if valid_613195 != nil:
    section.add "X-Amz-Content-Sha256", valid_613195
  var valid_613196 = header.getOrDefault("X-Amz-Date")
  valid_613196 = validateParameter(valid_613196, JString, required = false,
                                 default = nil)
  if valid_613196 != nil:
    section.add "X-Amz-Date", valid_613196
  var valid_613197 = header.getOrDefault("X-Amz-Credential")
  valid_613197 = validateParameter(valid_613197, JString, required = false,
                                 default = nil)
  if valid_613197 != nil:
    section.add "X-Amz-Credential", valid_613197
  var valid_613198 = header.getOrDefault("X-Amz-Security-Token")
  valid_613198 = validateParameter(valid_613198, JString, required = false,
                                 default = nil)
  if valid_613198 != nil:
    section.add "X-Amz-Security-Token", valid_613198
  var valid_613199 = header.getOrDefault("X-Amz-Algorithm")
  valid_613199 = validateParameter(valid_613199, JString, required = false,
                                 default = nil)
  if valid_613199 != nil:
    section.add "X-Amz-Algorithm", valid_613199
  var valid_613200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613200 = validateParameter(valid_613200, JString, required = false,
                                 default = nil)
  if valid_613200 != nil:
    section.add "X-Amz-SignedHeaders", valid_613200
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613201: Call_GetSuspendProcesses_613187; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## 
  let valid = call_613201.validator(path, query, header, formData, body)
  let scheme = call_613201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613201.url(scheme.get, call_613201.host, call_613201.base,
                         call_613201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613201, url, valid)

proc call*(call_613202: Call_GetSuspendProcesses_613187;
          AutoScalingGroupName: string; ScalingProcesses: JsonNode = nil;
          Action: string = "SuspendProcesses"; Version: string = "2011-01-01"): Recallable =
  ## getSuspendProcesses
  ## <p>Suspends the specified automatic scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly.</p> <p>To resume processes that have been suspended, use <a>ResumeProcesses</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and Resuming Scaling Processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   ScalingProcesses: JArray
  ##                   : <p>One or more of the following processes. If you omit this parameter, all processes are specified.</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> </ul>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613203 = newJObject()
  if ScalingProcesses != nil:
    query_613203.add "ScalingProcesses", ScalingProcesses
  add(query_613203, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613203, "Action", newJString(Action))
  add(query_613203, "Version", newJString(Version))
  result = call_613202.call(nil, query_613203, nil, nil, nil)

var getSuspendProcesses* = Call_GetSuspendProcesses_613187(
    name: "getSuspendProcesses", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=SuspendProcesses",
    validator: validate_GetSuspendProcesses_613188, base: "/",
    url: url_GetSuspendProcesses_613189, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTerminateInstanceInAutoScalingGroup_613239 = ref object of OpenApiRestCall_610658
proc url_PostTerminateInstanceInAutoScalingGroup_613241(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTerminateInstanceInAutoScalingGroup_613240(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613242 = query.getOrDefault("Action")
  valid_613242 = validateParameter(valid_613242, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_613242 != nil:
    section.add "Action", valid_613242
  var valid_613243 = query.getOrDefault("Version")
  valid_613243 = validateParameter(valid_613243, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613243 != nil:
    section.add "Version", valid_613243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613244 = header.getOrDefault("X-Amz-Signature")
  valid_613244 = validateParameter(valid_613244, JString, required = false,
                                 default = nil)
  if valid_613244 != nil:
    section.add "X-Amz-Signature", valid_613244
  var valid_613245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613245 = validateParameter(valid_613245, JString, required = false,
                                 default = nil)
  if valid_613245 != nil:
    section.add "X-Amz-Content-Sha256", valid_613245
  var valid_613246 = header.getOrDefault("X-Amz-Date")
  valid_613246 = validateParameter(valid_613246, JString, required = false,
                                 default = nil)
  if valid_613246 != nil:
    section.add "X-Amz-Date", valid_613246
  var valid_613247 = header.getOrDefault("X-Amz-Credential")
  valid_613247 = validateParameter(valid_613247, JString, required = false,
                                 default = nil)
  if valid_613247 != nil:
    section.add "X-Amz-Credential", valid_613247
  var valid_613248 = header.getOrDefault("X-Amz-Security-Token")
  valid_613248 = validateParameter(valid_613248, JString, required = false,
                                 default = nil)
  if valid_613248 != nil:
    section.add "X-Amz-Security-Token", valid_613248
  var valid_613249 = header.getOrDefault("X-Amz-Algorithm")
  valid_613249 = validateParameter(valid_613249, JString, required = false,
                                 default = nil)
  if valid_613249 != nil:
    section.add "X-Amz-Algorithm", valid_613249
  var valid_613250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613250 = validateParameter(valid_613250, JString, required = false,
                                 default = nil)
  if valid_613250 != nil:
    section.add "X-Amz-SignedHeaders", valid_613250
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_613251 = formData.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_613251 = validateParameter(valid_613251, JBool, required = true, default = nil)
  if valid_613251 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_613251
  var valid_613252 = formData.getOrDefault("InstanceId")
  valid_613252 = validateParameter(valid_613252, JString, required = true,
                                 default = nil)
  if valid_613252 != nil:
    section.add "InstanceId", valid_613252
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613253: Call_PostTerminateInstanceInAutoScalingGroup_613239;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_613253.validator(path, query, header, formData, body)
  let scheme = call_613253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613253.url(scheme.get, call_613253.host, call_613253.base,
                         call_613253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613253, url, valid)

proc call*(call_613254: Call_PostTerminateInstanceInAutoScalingGroup_613239;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## postTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613255 = newJObject()
  var formData_613256 = newJObject()
  add(formData_613256, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(formData_613256, "InstanceId", newJString(InstanceId))
  add(query_613255, "Action", newJString(Action))
  add(query_613255, "Version", newJString(Version))
  result = call_613254.call(nil, query_613255, nil, formData_613256, nil)

var postTerminateInstanceInAutoScalingGroup* = Call_PostTerminateInstanceInAutoScalingGroup_613239(
    name: "postTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_PostTerminateInstanceInAutoScalingGroup_613240, base: "/",
    url: url_PostTerminateInstanceInAutoScalingGroup_613241,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTerminateInstanceInAutoScalingGroup_613222 = ref object of OpenApiRestCall_610658
proc url_GetTerminateInstanceInAutoScalingGroup_613224(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTerminateInstanceInAutoScalingGroup_613223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ShouldDecrementDesiredCapacity: JBool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: JString (required)
  ##             : The ID of the instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ShouldDecrementDesiredCapacity` field"
  var valid_613225 = query.getOrDefault("ShouldDecrementDesiredCapacity")
  valid_613225 = validateParameter(valid_613225, JBool, required = true, default = nil)
  if valid_613225 != nil:
    section.add "ShouldDecrementDesiredCapacity", valid_613225
  var valid_613226 = query.getOrDefault("InstanceId")
  valid_613226 = validateParameter(valid_613226, JString, required = true,
                                 default = nil)
  if valid_613226 != nil:
    section.add "InstanceId", valid_613226
  var valid_613227 = query.getOrDefault("Action")
  valid_613227 = validateParameter(valid_613227, JString, required = true, default = newJString(
      "TerminateInstanceInAutoScalingGroup"))
  if valid_613227 != nil:
    section.add "Action", valid_613227
  var valid_613228 = query.getOrDefault("Version")
  valid_613228 = validateParameter(valid_613228, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613228 != nil:
    section.add "Version", valid_613228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613229 = header.getOrDefault("X-Amz-Signature")
  valid_613229 = validateParameter(valid_613229, JString, required = false,
                                 default = nil)
  if valid_613229 != nil:
    section.add "X-Amz-Signature", valid_613229
  var valid_613230 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613230 = validateParameter(valid_613230, JString, required = false,
                                 default = nil)
  if valid_613230 != nil:
    section.add "X-Amz-Content-Sha256", valid_613230
  var valid_613231 = header.getOrDefault("X-Amz-Date")
  valid_613231 = validateParameter(valid_613231, JString, required = false,
                                 default = nil)
  if valid_613231 != nil:
    section.add "X-Amz-Date", valid_613231
  var valid_613232 = header.getOrDefault("X-Amz-Credential")
  valid_613232 = validateParameter(valid_613232, JString, required = false,
                                 default = nil)
  if valid_613232 != nil:
    section.add "X-Amz-Credential", valid_613232
  var valid_613233 = header.getOrDefault("X-Amz-Security-Token")
  valid_613233 = validateParameter(valid_613233, JString, required = false,
                                 default = nil)
  if valid_613233 != nil:
    section.add "X-Amz-Security-Token", valid_613233
  var valid_613234 = header.getOrDefault("X-Amz-Algorithm")
  valid_613234 = validateParameter(valid_613234, JString, required = false,
                                 default = nil)
  if valid_613234 != nil:
    section.add "X-Amz-Algorithm", valid_613234
  var valid_613235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613235 = validateParameter(valid_613235, JString, required = false,
                                 default = nil)
  if valid_613235 != nil:
    section.add "X-Amz-SignedHeaders", valid_613235
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613236: Call_GetTerminateInstanceInAutoScalingGroup_613222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ## 
  let valid = call_613236.validator(path, query, header, formData, body)
  let scheme = call_613236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613236.url(scheme.get, call_613236.host, call_613236.base,
                         call_613236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613236, url, valid)

proc call*(call_613237: Call_GetTerminateInstanceInAutoScalingGroup_613222;
          ShouldDecrementDesiredCapacity: bool; InstanceId: string;
          Action: string = "TerminateInstanceInAutoScalingGroup";
          Version: string = "2011-01-01"): Recallable =
  ## getTerminateInstanceInAutoScalingGroup
  ## <p>Terminates the specified instance and optionally adjusts the desired group size.</p> <p>This call simply makes a termination request. The instance is not terminated immediately.</p>
  ##   ShouldDecrementDesiredCapacity: bool (required)
  ##                                 : Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
  ##   InstanceId: string (required)
  ##             : The ID of the instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613238 = newJObject()
  add(query_613238, "ShouldDecrementDesiredCapacity",
      newJBool(ShouldDecrementDesiredCapacity))
  add(query_613238, "InstanceId", newJString(InstanceId))
  add(query_613238, "Action", newJString(Action))
  add(query_613238, "Version", newJString(Version))
  result = call_613237.call(nil, query_613238, nil, nil, nil)

var getTerminateInstanceInAutoScalingGroup* = Call_GetTerminateInstanceInAutoScalingGroup_613222(
    name: "getTerminateInstanceInAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com",
    route: "/#Action=TerminateInstanceInAutoScalingGroup",
    validator: validate_GetTerminateInstanceInAutoScalingGroup_613223, base: "/",
    url: url_GetTerminateInstanceInAutoScalingGroup_613224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAutoScalingGroup_613292 = ref object of OpenApiRestCall_610658
proc url_PostUpdateAutoScalingGroup_613294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAutoScalingGroup_613293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613295 = query.getOrDefault("Action")
  valid_613295 = validateParameter(valid_613295, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_613295 != nil:
    section.add "Action", valid_613295
  var valid_613296 = query.getOrDefault("Version")
  valid_613296 = validateParameter(valid_613296, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613296 != nil:
    section.add "Version", valid_613296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613297 = header.getOrDefault("X-Amz-Signature")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Signature", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-Content-Sha256", valid_613298
  var valid_613299 = header.getOrDefault("X-Amz-Date")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "X-Amz-Date", valid_613299
  var valid_613300 = header.getOrDefault("X-Amz-Credential")
  valid_613300 = validateParameter(valid_613300, JString, required = false,
                                 default = nil)
  if valid_613300 != nil:
    section.add "X-Amz-Credential", valid_613300
  var valid_613301 = header.getOrDefault("X-Amz-Security-Token")
  valid_613301 = validateParameter(valid_613301, JString, required = false,
                                 default = nil)
  if valid_613301 != nil:
    section.add "X-Amz-Security-Token", valid_613301
  var valid_613302 = header.getOrDefault("X-Amz-Algorithm")
  valid_613302 = validateParameter(valid_613302, JString, required = false,
                                 default = nil)
  if valid_613302 != nil:
    section.add "X-Amz-Algorithm", valid_613302
  var valid_613303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613303 = validateParameter(valid_613303, JString, required = false,
                                 default = nil)
  if valid_613303 != nil:
    section.add "X-Amz-SignedHeaders", valid_613303
  result.add "header", section
  ## parameters in `formData` object:
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613304 = formData.getOrDefault("AutoScalingGroupName")
  valid_613304 = validateParameter(valid_613304, JString, required = true,
                                 default = nil)
  if valid_613304 != nil:
    section.add "AutoScalingGroupName", valid_613304
  var valid_613305 = formData.getOrDefault("MinSize")
  valid_613305 = validateParameter(valid_613305, JInt, required = false, default = nil)
  if valid_613305 != nil:
    section.add "MinSize", valid_613305
  var valid_613306 = formData.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_613306 = validateParameter(valid_613306, JString, required = false,
                                 default = nil)
  if valid_613306 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_613306
  var valid_613307 = formData.getOrDefault("DesiredCapacity")
  valid_613307 = validateParameter(valid_613307, JInt, required = false, default = nil)
  if valid_613307 != nil:
    section.add "DesiredCapacity", valid_613307
  var valid_613308 = formData.getOrDefault("DefaultCooldown")
  valid_613308 = validateParameter(valid_613308, JInt, required = false, default = nil)
  if valid_613308 != nil:
    section.add "DefaultCooldown", valid_613308
  var valid_613309 = formData.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_613309 = validateParameter(valid_613309, JBool, required = false, default = nil)
  if valid_613309 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_613309
  var valid_613310 = formData.getOrDefault("MaxInstanceLifetime")
  valid_613310 = validateParameter(valid_613310, JInt, required = false, default = nil)
  if valid_613310 != nil:
    section.add "MaxInstanceLifetime", valid_613310
  var valid_613311 = formData.getOrDefault("TerminationPolicies")
  valid_613311 = validateParameter(valid_613311, JArray, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "TerminationPolicies", valid_613311
  var valid_613312 = formData.getOrDefault("AvailabilityZones")
  valid_613312 = validateParameter(valid_613312, JArray, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "AvailabilityZones", valid_613312
  var valid_613313 = formData.getOrDefault("LaunchTemplate.Version")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "LaunchTemplate.Version", valid_613313
  var valid_613314 = formData.getOrDefault("HealthCheckType")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "HealthCheckType", valid_613314
  var valid_613315 = formData.getOrDefault("PlacementGroup")
  valid_613315 = validateParameter(valid_613315, JString, required = false,
                                 default = nil)
  if valid_613315 != nil:
    section.add "PlacementGroup", valid_613315
  var valid_613316 = formData.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_613316 = validateParameter(valid_613316, JString, required = false,
                                 default = nil)
  if valid_613316 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_613316
  var valid_613317 = formData.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_613317 = validateParameter(valid_613317, JString, required = false,
                                 default = nil)
  if valid_613317 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_613317
  var valid_613318 = formData.getOrDefault("MaxSize")
  valid_613318 = validateParameter(valid_613318, JInt, required = false, default = nil)
  if valid_613318 != nil:
    section.add "MaxSize", valid_613318
  var valid_613319 = formData.getOrDefault("HealthCheckGracePeriod")
  valid_613319 = validateParameter(valid_613319, JInt, required = false, default = nil)
  if valid_613319 != nil:
    section.add "HealthCheckGracePeriod", valid_613319
  var valid_613320 = formData.getOrDefault("ServiceLinkedRoleARN")
  valid_613320 = validateParameter(valid_613320, JString, required = false,
                                 default = nil)
  if valid_613320 != nil:
    section.add "ServiceLinkedRoleARN", valid_613320
  var valid_613321 = formData.getOrDefault("LaunchConfigurationName")
  valid_613321 = validateParameter(valid_613321, JString, required = false,
                                 default = nil)
  if valid_613321 != nil:
    section.add "LaunchConfigurationName", valid_613321
  var valid_613322 = formData.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_613322 = validateParameter(valid_613322, JString, required = false,
                                 default = nil)
  if valid_613322 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_613322
  var valid_613323 = formData.getOrDefault("VPCZoneIdentifier")
  valid_613323 = validateParameter(valid_613323, JString, required = false,
                                 default = nil)
  if valid_613323 != nil:
    section.add "VPCZoneIdentifier", valid_613323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613324: Call_PostUpdateAutoScalingGroup_613292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_613324.validator(path, query, header, formData, body)
  let scheme = call_613324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613324.url(scheme.get, call_613324.host, call_613324.base,
                         call_613324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613324, url, valid)

proc call*(call_613325: Call_PostUpdateAutoScalingGroup_613292;
          AutoScalingGroupName: string; MinSize: int = 0;
          MixedInstancesPolicyInstancesDistribution: string = "";
          DesiredCapacity: int = 0; DefaultCooldown: int = 0;
          NewInstancesProtectedFromScaleIn: bool = false;
          MaxInstanceLifetime: int = 0; TerminationPolicies: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; LaunchTemplateVersion: string = "";
          HealthCheckType: string = ""; PlacementGroup: string = "";
          LaunchTemplateLaunchTemplateName: string = "";
          Action: string = "UpdateAutoScalingGroup";
          LaunchTemplateLaunchTemplateId: string = ""; MaxSize: int = 0;
          HealthCheckGracePeriod: int = 0; ServiceLinkedRoleARN: string = "";
          LaunchConfigurationName: string = ""; Version: string = "2011-01-01";
          MixedInstancesPolicyLaunchTemplate: string = "";
          VPCZoneIdentifier: string = ""): Recallable =
  ## postUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   Action: string (required)
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   Version: string (required)
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  var query_613326 = newJObject()
  var formData_613327 = newJObject()
  add(formData_613327, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(formData_613327, "MinSize", newJInt(MinSize))
  add(formData_613327, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(formData_613327, "DesiredCapacity", newJInt(DesiredCapacity))
  add(formData_613327, "DefaultCooldown", newJInt(DefaultCooldown))
  add(formData_613327, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  add(formData_613327, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  if TerminationPolicies != nil:
    formData_613327.add "TerminationPolicies", TerminationPolicies
  if AvailabilityZones != nil:
    formData_613327.add "AvailabilityZones", AvailabilityZones
  add(formData_613327, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(formData_613327, "HealthCheckType", newJString(HealthCheckType))
  add(formData_613327, "PlacementGroup", newJString(PlacementGroup))
  add(formData_613327, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_613326, "Action", newJString(Action))
  add(formData_613327, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  add(formData_613327, "MaxSize", newJInt(MaxSize))
  add(formData_613327, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(formData_613327, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(formData_613327, "LaunchConfigurationName",
      newJString(LaunchConfigurationName))
  add(query_613326, "Version", newJString(Version))
  add(formData_613327, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(formData_613327, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  result = call_613325.call(nil, query_613326, nil, formData_613327, nil)

var postUpdateAutoScalingGroup* = Call_PostUpdateAutoScalingGroup_613292(
    name: "postUpdateAutoScalingGroup", meth: HttpMethod.HttpPost,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_PostUpdateAutoScalingGroup_613293, base: "/",
    url: url_PostUpdateAutoScalingGroup_613294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAutoScalingGroup_613257 = ref object of OpenApiRestCall_610658
proc url_GetUpdateAutoScalingGroup_613259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAutoScalingGroup_613258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MixedInstancesPolicy.InstancesDistribution: JString
  ##                                             : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplate.LaunchTemplateName: JString
  ##                                    : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: JInt
  ##          : The maximum size of the Auto Scaling group.
  ##   LaunchConfigurationName: JString
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckGracePeriod: JInt
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicy.LaunchTemplate: JString
  ##                                      : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   NewInstancesProtectedFromScaleIn: JBool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   HealthCheckType: JString
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: JInt
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   AutoScalingGroupName: JString (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultCooldown: JInt
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: JString (required)
  ##   MinSize: JInt
  ##          : The minimum size of the Auto Scaling group.
  ##   PlacementGroup: JString
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplate.Version: JString
  ##                         : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: JInt
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: JString (required)
  ##   VPCZoneIdentifier: JString
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   ServiceLinkedRoleARN: JString
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplate.LaunchTemplateId: JString
  ##                                  : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  section = newJObject()
  var valid_613260 = query.getOrDefault("MixedInstancesPolicy.InstancesDistribution")
  valid_613260 = validateParameter(valid_613260, JString, required = false,
                                 default = nil)
  if valid_613260 != nil:
    section.add "MixedInstancesPolicy.InstancesDistribution", valid_613260
  var valid_613261 = query.getOrDefault("LaunchTemplate.LaunchTemplateName")
  valid_613261 = validateParameter(valid_613261, JString, required = false,
                                 default = nil)
  if valid_613261 != nil:
    section.add "LaunchTemplate.LaunchTemplateName", valid_613261
  var valid_613262 = query.getOrDefault("MaxSize")
  valid_613262 = validateParameter(valid_613262, JInt, required = false, default = nil)
  if valid_613262 != nil:
    section.add "MaxSize", valid_613262
  var valid_613263 = query.getOrDefault("LaunchConfigurationName")
  valid_613263 = validateParameter(valid_613263, JString, required = false,
                                 default = nil)
  if valid_613263 != nil:
    section.add "LaunchConfigurationName", valid_613263
  var valid_613264 = query.getOrDefault("HealthCheckGracePeriod")
  valid_613264 = validateParameter(valid_613264, JInt, required = false, default = nil)
  if valid_613264 != nil:
    section.add "HealthCheckGracePeriod", valid_613264
  var valid_613265 = query.getOrDefault("MixedInstancesPolicy.LaunchTemplate")
  valid_613265 = validateParameter(valid_613265, JString, required = false,
                                 default = nil)
  if valid_613265 != nil:
    section.add "MixedInstancesPolicy.LaunchTemplate", valid_613265
  var valid_613266 = query.getOrDefault("NewInstancesProtectedFromScaleIn")
  valid_613266 = validateParameter(valid_613266, JBool, required = false, default = nil)
  if valid_613266 != nil:
    section.add "NewInstancesProtectedFromScaleIn", valid_613266
  var valid_613267 = query.getOrDefault("AvailabilityZones")
  valid_613267 = validateParameter(valid_613267, JArray, required = false,
                                 default = nil)
  if valid_613267 != nil:
    section.add "AvailabilityZones", valid_613267
  var valid_613268 = query.getOrDefault("HealthCheckType")
  valid_613268 = validateParameter(valid_613268, JString, required = false,
                                 default = nil)
  if valid_613268 != nil:
    section.add "HealthCheckType", valid_613268
  var valid_613269 = query.getOrDefault("TerminationPolicies")
  valid_613269 = validateParameter(valid_613269, JArray, required = false,
                                 default = nil)
  if valid_613269 != nil:
    section.add "TerminationPolicies", valid_613269
  var valid_613270 = query.getOrDefault("DesiredCapacity")
  valid_613270 = validateParameter(valid_613270, JInt, required = false, default = nil)
  if valid_613270 != nil:
    section.add "DesiredCapacity", valid_613270
  assert query != nil, "query argument is necessary due to required `AutoScalingGroupName` field"
  var valid_613271 = query.getOrDefault("AutoScalingGroupName")
  valid_613271 = validateParameter(valid_613271, JString, required = true,
                                 default = nil)
  if valid_613271 != nil:
    section.add "AutoScalingGroupName", valid_613271
  var valid_613272 = query.getOrDefault("DefaultCooldown")
  valid_613272 = validateParameter(valid_613272, JInt, required = false, default = nil)
  if valid_613272 != nil:
    section.add "DefaultCooldown", valid_613272
  var valid_613273 = query.getOrDefault("Action")
  valid_613273 = validateParameter(valid_613273, JString, required = true,
                                 default = newJString("UpdateAutoScalingGroup"))
  if valid_613273 != nil:
    section.add "Action", valid_613273
  var valid_613274 = query.getOrDefault("MinSize")
  valid_613274 = validateParameter(valid_613274, JInt, required = false, default = nil)
  if valid_613274 != nil:
    section.add "MinSize", valid_613274
  var valid_613275 = query.getOrDefault("PlacementGroup")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "PlacementGroup", valid_613275
  var valid_613276 = query.getOrDefault("LaunchTemplate.Version")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "LaunchTemplate.Version", valid_613276
  var valid_613277 = query.getOrDefault("MaxInstanceLifetime")
  valid_613277 = validateParameter(valid_613277, JInt, required = false, default = nil)
  if valid_613277 != nil:
    section.add "MaxInstanceLifetime", valid_613277
  var valid_613278 = query.getOrDefault("Version")
  valid_613278 = validateParameter(valid_613278, JString, required = true,
                                 default = newJString("2011-01-01"))
  if valid_613278 != nil:
    section.add "Version", valid_613278
  var valid_613279 = query.getOrDefault("VPCZoneIdentifier")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "VPCZoneIdentifier", valid_613279
  var valid_613280 = query.getOrDefault("ServiceLinkedRoleARN")
  valid_613280 = validateParameter(valid_613280, JString, required = false,
                                 default = nil)
  if valid_613280 != nil:
    section.add "ServiceLinkedRoleARN", valid_613280
  var valid_613281 = query.getOrDefault("LaunchTemplate.LaunchTemplateId")
  valid_613281 = validateParameter(valid_613281, JString, required = false,
                                 default = nil)
  if valid_613281 != nil:
    section.add "LaunchTemplate.LaunchTemplateId", valid_613281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613282 = header.getOrDefault("X-Amz-Signature")
  valid_613282 = validateParameter(valid_613282, JString, required = false,
                                 default = nil)
  if valid_613282 != nil:
    section.add "X-Amz-Signature", valid_613282
  var valid_613283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613283 = validateParameter(valid_613283, JString, required = false,
                                 default = nil)
  if valid_613283 != nil:
    section.add "X-Amz-Content-Sha256", valid_613283
  var valid_613284 = header.getOrDefault("X-Amz-Date")
  valid_613284 = validateParameter(valid_613284, JString, required = false,
                                 default = nil)
  if valid_613284 != nil:
    section.add "X-Amz-Date", valid_613284
  var valid_613285 = header.getOrDefault("X-Amz-Credential")
  valid_613285 = validateParameter(valid_613285, JString, required = false,
                                 default = nil)
  if valid_613285 != nil:
    section.add "X-Amz-Credential", valid_613285
  var valid_613286 = header.getOrDefault("X-Amz-Security-Token")
  valid_613286 = validateParameter(valid_613286, JString, required = false,
                                 default = nil)
  if valid_613286 != nil:
    section.add "X-Amz-Security-Token", valid_613286
  var valid_613287 = header.getOrDefault("X-Amz-Algorithm")
  valid_613287 = validateParameter(valid_613287, JString, required = false,
                                 default = nil)
  if valid_613287 != nil:
    section.add "X-Amz-Algorithm", valid_613287
  var valid_613288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613288 = validateParameter(valid_613288, JString, required = false,
                                 default = nil)
  if valid_613288 != nil:
    section.add "X-Amz-SignedHeaders", valid_613288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613289: Call_GetUpdateAutoScalingGroup_613257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ## 
  let valid = call_613289.validator(path, query, header, formData, body)
  let scheme = call_613289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613289.url(scheme.get, call_613289.host, call_613289.base,
                         call_613289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613289, url, valid)

proc call*(call_613290: Call_GetUpdateAutoScalingGroup_613257;
          AutoScalingGroupName: string;
          MixedInstancesPolicyInstancesDistribution: string = "";
          LaunchTemplateLaunchTemplateName: string = ""; MaxSize: int = 0;
          LaunchConfigurationName: string = ""; HealthCheckGracePeriod: int = 0;
          MixedInstancesPolicyLaunchTemplate: string = "";
          NewInstancesProtectedFromScaleIn: bool = false;
          AvailabilityZones: JsonNode = nil; HealthCheckType: string = "";
          TerminationPolicies: JsonNode = nil; DesiredCapacity: int = 0;
          DefaultCooldown: int = 0; Action: string = "UpdateAutoScalingGroup";
          MinSize: int = 0; PlacementGroup: string = "";
          LaunchTemplateVersion: string = ""; MaxInstanceLifetime: int = 0;
          Version: string = "2011-01-01"; VPCZoneIdentifier: string = "";
          ServiceLinkedRoleARN: string = "";
          LaunchTemplateLaunchTemplateId: string = ""): Recallable =
  ## getUpdateAutoScalingGroup
  ## <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the parameter that you want to change. Any parameters that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in event occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which parameters have been set, use <a>DescribeAutoScalingGroups</a>. You can also view the scaling policies for an Auto Scaling group using <a>DescribePolicies</a>. If the group has scaling policies, you can update them using <a>PutScalingPolicy</a>.</p>
  ##   MixedInstancesPolicyInstancesDistribution: string
  ##                                            : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The instances distribution to use.</p> <p>If you leave this parameter unspecified, the value for each parameter in <code>InstancesDistribution</code> uses a default value.</p>
  ##   LaunchTemplateLaunchTemplateName: string
  ##                                   : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The name of the launch template. You must specify either a template name or a template ID.
  ##   MaxSize: int
  ##          : The maximum size of the Auto Scaling group.
  ##   LaunchConfigurationName: string
  ##                          : The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.
  ##   HealthCheckGracePeriod: int
  ##                         : <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is <code>0</code>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health Check Grace Period</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Conditional: This parameter is required if you are adding an <code>ELB</code> health check.</p>
  ##   MixedInstancesPolicyLaunchTemplate: string
  ##                                     : <p>Describes a mixed instances policy for an Auto Scaling group. With mixed instances, your Auto Scaling group can provision a combination of On-Demand Instances and Spot Instances across multiple instance types. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling Groups with Multiple Instance Types and Purchase Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can create a mixed instances policy for a new Auto Scaling group, or you can create it for an existing group by updating the group to specify <code>MixedInstancesPolicy</code> as the top-level parameter instead of a launch configuration or template. For more information, see <a>CreateAutoScalingGroup</a> and <a>UpdateAutoScalingGroup</a>.</p>
  ## <p>The launch template and instance types (overrides).</p> <p>This parameter must be specified when creating a mixed instances policy.</p>
  ##   NewInstancesProtectedFromScaleIn: bool
  ##                                   : <p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.</p> <p>For more information about preventing instances from terminating on scale in, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance Protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   AvailabilityZones: JArray
  ##                    : One or more Availability Zones for the group.
  ##   HealthCheckType: string
  ##                  : The service to use for the health checks. The valid values are <code>EC2</code> and <code>ELB</code>. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
  ##   TerminationPolicies: JArray
  ##                      : <p>A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling Which Instances Auto Scaling Terminates During Scale In</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   DesiredCapacity: int
  ##                  : The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
  ##   AutoScalingGroupName: string (required)
  ##                       : The name of the Auto Scaling group.
  ##   DefaultCooldown: int
  ##                  : <p>The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is <code>300</code>. This cooldown period is not used when a scaling-specific cooldown is specified.</p> <p>Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling Cooldowns</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ##   Action: string (required)
  ##   MinSize: int
  ##          : The minimum size of the Auto Scaling group.
  ##   PlacementGroup: string
  ##                 : The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  ##   LaunchTemplateVersion: string
  ##                        : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The version number, <code>$Latest</code>, or <code>$Default</code>. If the value is <code>$Latest</code>, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is <code>$Default</code>, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is <code>$Default</code>.
  ##   MaxInstanceLifetime: int
  ##                      : <p>The maximum amount of time, in seconds, that an instance can be in service.</p> <p>Valid Range: Minimum value of 604800.</p>
  ##   Version: string (required)
  ##   VPCZoneIdentifier: string
  ##                    : <p>A comma-separated list of subnet IDs for virtual private cloud (VPC).</p> <p>If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify for this parameter must reside in those Availability Zones.</p>
  ##   ServiceLinkedRoleARN: string
  ##                       : The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-Linked Roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ##   LaunchTemplateLaunchTemplateId: string
  ##                                 : <p>Describes a launch template and the launch template version.</p> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a 
  ## href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
  ## The ID of the launch template. You must specify either a template ID or a template name.
  var query_613291 = newJObject()
  add(query_613291, "MixedInstancesPolicy.InstancesDistribution",
      newJString(MixedInstancesPolicyInstancesDistribution))
  add(query_613291, "LaunchTemplate.LaunchTemplateName",
      newJString(LaunchTemplateLaunchTemplateName))
  add(query_613291, "MaxSize", newJInt(MaxSize))
  add(query_613291, "LaunchConfigurationName", newJString(LaunchConfigurationName))
  add(query_613291, "HealthCheckGracePeriod", newJInt(HealthCheckGracePeriod))
  add(query_613291, "MixedInstancesPolicy.LaunchTemplate",
      newJString(MixedInstancesPolicyLaunchTemplate))
  add(query_613291, "NewInstancesProtectedFromScaleIn",
      newJBool(NewInstancesProtectedFromScaleIn))
  if AvailabilityZones != nil:
    query_613291.add "AvailabilityZones", AvailabilityZones
  add(query_613291, "HealthCheckType", newJString(HealthCheckType))
  if TerminationPolicies != nil:
    query_613291.add "TerminationPolicies", TerminationPolicies
  add(query_613291, "DesiredCapacity", newJInt(DesiredCapacity))
  add(query_613291, "AutoScalingGroupName", newJString(AutoScalingGroupName))
  add(query_613291, "DefaultCooldown", newJInt(DefaultCooldown))
  add(query_613291, "Action", newJString(Action))
  add(query_613291, "MinSize", newJInt(MinSize))
  add(query_613291, "PlacementGroup", newJString(PlacementGroup))
  add(query_613291, "LaunchTemplate.Version", newJString(LaunchTemplateVersion))
  add(query_613291, "MaxInstanceLifetime", newJInt(MaxInstanceLifetime))
  add(query_613291, "Version", newJString(Version))
  add(query_613291, "VPCZoneIdentifier", newJString(VPCZoneIdentifier))
  add(query_613291, "ServiceLinkedRoleARN", newJString(ServiceLinkedRoleARN))
  add(query_613291, "LaunchTemplate.LaunchTemplateId",
      newJString(LaunchTemplateLaunchTemplateId))
  result = call_613290.call(nil, query_613291, nil, nil, nil)

var getUpdateAutoScalingGroup* = Call_GetUpdateAutoScalingGroup_613257(
    name: "getUpdateAutoScalingGroup", meth: HttpMethod.HttpGet,
    host: "autoscaling.amazonaws.com", route: "/#Action=UpdateAutoScalingGroup",
    validator: validate_GetUpdateAutoScalingGroup_613258, base: "/",
    url: url_GetUpdateAutoScalingGroup_613259,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  headers[$ContentSha256] = hash(text, SHA256)
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
